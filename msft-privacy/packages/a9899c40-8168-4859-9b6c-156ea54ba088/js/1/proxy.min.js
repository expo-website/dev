(function () {
    'use strict';

    var kind = 'trackerConsent';

    var formDataToJsonObject = function (formData) {
        var object = {};
        formData.forEach(function (value, key) {
            if (!Reflect.has(object, key)) {
                object[key] = value;
                return;
            }
            if (!Array.isArray(object[key])) {
                object[key] = [object[key]];
            }
            object[key].push(value);
        });
        return object;
    };
    var getStaticData = function (jsonStr) {
        try {
            return JSON.parse(jsonStr);
        }
        catch (e) {
            return null;
        }
    };
    var getJsonUsingFormId = function (formId) {
        try {
            var form = document.getElementById(formId);
            if (!form) {
                return null;
            }
            var formData = new FormData(form);
            return formDataToJsonObject(formData);
        }
        catch (e) {
            return null;
        }
    };
    var getJsonUsingInputIds = function (inputIds) {
        try {
            var inputIdsArray = inputIds.split(',');
            var object_1 = {};
            inputIdsArray.forEach(function (id) {
                var input = document.getElementById(id);
                if (input) {
                    object_1[id] = input.value;
                }
            });
            return object_1;
        }
        catch (e) {
            return null;
        }
    };
    var msftCallbackFunction = function (event) {
        event.preventDefault();
        var formData = new FormData(event.target);
        var object = formDataToJsonObject(formData);
        window.MSFTPrivacy[kind].trigger('QuestionsFormSubmitWithoutMetaData', {
            data: object,
        });
    };

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
        PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
        PublicEvents["DataPropsUpdated"] = "DataPropsUpdated";
        PublicEvents["Done"] = "Done";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
        Events["ConsentInvalid"] = "ConsentInvalid";
    })(Events || (Events = {}));
    var Attributes;
    (function (Attributes) {
        // Web consent events
        Attributes["ConsentNotice"] = "msft-consent-notice";
        Attributes["AcceptAll"] = "msft-consent-accept-all";
        Attributes["OpenPreference"] = "msft-consent-open-preferences";
        Attributes["ClosePreference"] = "msft-consent-close-preferences";
        Attributes["DeclineAll"] = "msft-consent-decline-all";
        Attributes["SavePreferences"] = "msft-consent-save-preferences";
        Attributes["TrackerCategory"] = "msft-consent-tracker-category";
        // DSR events
        Attributes["QuestionnaireForm"] = "msft-questionnaire-form";
        Attributes["QuestionnaireFormSubmit"] = "msft-questionnaire-form-submit";
        // Generic events
        Attributes["Redirect"] = "msft-redirect";
        Attributes["OpenPage"] = "msft-open-page";
        Attributes["ClosePage"] = "msft-close-page";
        Attributes["TriggerEvent"] = "msft-trigger";
        Attributes["ToggleId"] = "msft-toggle-id";
        Attributes["ToggleOn"] = "msft-toggle-on";
        Attributes["ToggleOff"] = "msft-toggle-off";
        Attributes["FormPayloadData"] = "msft-payload-data";
        Attributes["FormId"] = "msft-payload-form-id";
        Attributes["FormInputIDs"] = "msft-payload-input-ids";
    })(Attributes || (Attributes = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
        Cookie["ConsentMetadata"] = "msft-consent-metadata";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ControlType;
    (function (ControlType) {
        ControlType["Purpose"] = "Purpose";
    })(ControlType || (ControlType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsent"] = "MICROSOFT.WebConsent";
        ModelKind["DSRSubmission"] = "MICROSOFT.DSRSubmission";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = "WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var handlers = [
        {
            //handler for accept all button
            selector: "[".concat(Attributes.AcceptAll, "]"),
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    window.MSFTPrivacy[kind].trigger('AcceptAll');
                    window.MSFTPrivacy[kind].trigger('CloseConsentNotice');
                });
            },
        },
        //handler for open preferences button
        {
            selector: "[".concat(Attributes.OpenPreference, "]"),
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    window.MSFTPrivacy[kind].trigger('ShowTemplate', {
                        templateId: 'Preferences',
                    });
                    window.MSFTPrivacy[kind].trigger('CloseConsentNotice');
                });
            },
        },
        //handler for decline all button
        {
            selector: "[".concat(Attributes.DeclineAll, "]"),
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    window.MSFTPrivacy[kind].trigger('RejectAll');
                    window.MSFTPrivacy[kind].trigger('CloseConsentNotice');
                });
            },
        },
        //handler for save preferences button
        {
            selector: "[".concat(Attributes.SavePreferences, "]"),
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    var trackerCategoriesSelectors = document.querySelectorAll("[".concat(Attributes.TrackerCategory, "]"));
                    var currentPreferences = { preferences: {} };
                    trackerCategoriesSelectors.forEach(function (category) {
                        currentPreferences.preferences[category.getElementsByTagName('input')[0].id] = category.getElementsByTagName('input')[0].checked ? '1' : '0';
                    });
                    window.MSFTPrivacy[kind].trigger('UpdateConsent', {
                        consent: currentPreferences,
                    });
                    window.MSFTPrivacy[kind].trigger('CloseTemplate', {
                        templateId: 'Preferences',
                    });
                    window.MSFTPrivacy[kind].trigger('CloseConsentNotice');
                });
            },
        },
        //handler for close preferences button
        {
            selector: "[".concat(Attributes.ClosePreference, "]"),
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    window.MSFTPrivacy[kind].trigger('CloseTemplate', {
                        templateId: 'Preferences',
                    });
                    window.MSFTPrivacy[kind].trigger('ShowConsentNotice');
                });
            },
        },
        //handler for form submit
        {
            selector: "[".concat(Attributes.QuestionnaireForm, "]"),
            handler: function (elm) {
                elm.addEventListener('submit', msftCallbackFunction);
            },
        },
        //handler for open page
        {
            selector: "[".concat(Attributes.OpenPage, "]"),
            handler: function (elm) {
                var templateId = elm.getAttribute(Attributes.OpenPage);
                if (templateId === null)
                    return;
                elm.addEventListener('click', function () {
                    window.MSFTPrivacy[kind].trigger('ShowTemplate', {
                        templateId: templateId,
                    });
                });
            },
        },
        //handler for close page
        {
            selector: "[".concat(Attributes.ClosePage, "]"),
            handler: function (elm) {
                var templateIds = elm.getAttribute(Attributes.ClosePage);
                if (templateIds === null)
                    return;
                elm.addEventListener('click', function () {
                    templateIds.split(',').forEach(function (templateId) {
                        window.MSFTPrivacy[kind].trigger('CloseTemplate', {
                            templateId: templateId,
                        });
                    });
                });
            },
        },
        //handler for trigger event
        {
            selector: "[".concat(Attributes.TriggerEvent, "]"),
            handler: function (elm) {
                var eventName = elm.getAttribute(Attributes.TriggerEvent);
                if (eventName === null)
                    return;
                elm.addEventListener('click', function () {
                    if (eventName === 'toggle-driven') {
                        var toggleId = elm.getAttribute(Attributes.ToggleId);
                        if (toggleId === null)
                            return;
                        var input = document.getElementById(toggleId);
                        if (input === null || input === void 0 ? void 0 : input.checked) {
                            eventName = input.getAttribute(Attributes.ToggleOn);
                        }
                        else {
                            eventName = input.getAttribute(Attributes.ToggleOff);
                        }
                    }
                    var staticData = elm.getAttribute(Attributes.FormPayloadData);
                    var formId = elm.getAttribute(Attributes.FormId);
                    var inputIds = elm.getAttribute(Attributes.FormInputIDs);
                    var payload = null;
                    if (staticData !== null) {
                        payload = getStaticData(staticData);
                    }
                    else if (formId !== null) {
                        payload = getJsonUsingFormId(formId);
                    }
                    else if (inputIds !== null) {
                        payload = getJsonUsingInputIds(inputIds);
                    }
                    eventName !== null &&
                        window.MSFTPrivacy[kind].trigger(eventName, payload);
                });
            },
        },
        {
            selector: "[".concat(Attributes.Redirect, "]"),
            handler: function (elm) {
                var redirectUrl = elm.getAttribute(Attributes.Redirect);
                if (redirectUrl) {
                    elm.addEventListener('click', function () { return (window.location.href = redirectUrl); });
                }
            },
        },
    ];
    window['disableQuestionFormSubmit'] = function () {
        document
            .querySelectorAll("[".concat(Attributes.QuestionnaireFormSubmit, "]"))
            .forEach(function (elm) {
            elm.setAttribute('disabled', '');
        });
    };
    window['enableQuestionFormSubmit'] = function () {
        document
            .querySelectorAll("[".concat(Attributes.QuestionnaireFormSubmit, "]"))
            .forEach(function (elm) {
            elm.removeAttribute('disabled');
        });
    };
    var registerHandlers = function () {
        var _a, _b, _c;
        var executionContexts = ((_b = (_a = window.msftData) === null || _a === void 0 ? void 0 : _a.executionContexts) === null || _b === void 0 ? void 0 : _b.length)
            ? window.msftData.executionContexts
            : [];
        // register all handlers
        handlers.forEach(function (_a) {
            var selector = _a.selector, handler = _a.handler;
            document.querySelectorAll(selector).forEach(function (elm) {
                if (executionContexts.length > 0) {
                    var attributes_1 = elm.getAttributeNames();
                    if (executionContexts.some(function (ctx) { return attributes_1.includes("".concat(ctx, "-disabled")); })) {
                        return;
                    }
                }
                handler(elm);
            });
        });
        //remove all hidden elements
        executionContexts.forEach(function (ctx) {
            document.querySelectorAll("[".concat(ctx, "-hidden]")).forEach(function (elm) {
                elm.remove();
            });
        });
        var isGPCEnabled = ((_c = window.msftData) === null || _c === void 0 ? void 0 : _c.isGPCEnabled) || false;
        if (isGPCEnabled) {
            var inputs = document.querySelectorAll('input');
            inputs.forEach(function (input) {
                input.setAttribute('disabled', '');
            });
            var buttons = document.querySelectorAll('button');
            buttons.forEach(function (button) {
                button.setAttribute('disabled', '');
                button.classList.add('msft-disabled');
            });
            var closeButtons = document.querySelectorAll("[".concat(Attributes.ClosePage, "]"));
            closeButtons.forEach(function (button) {
                button.removeAttribute('disabled');
                button.classList.remove('msft-disabled');
            });
        }
    };
    if (document.readyState !== 'loading') {
        registerHandlers();
    }
    else {
        document.addEventListener('DOMContentLoaded', function () {
            registerHandlers();
        });
    }

    var _a;
    var addProxyMethods = function () {
        Promise.resolve().then(function () { return anchorClickHandler; });
        Promise.resolve().then(function () { return proxy; }).then(function (_a) {
            var _b;
            var callMethod = _a.callMethod, sendMessage = _a.sendMessage;
            window.MSFTPrivacy = (_b = {}, _b[kind] = {}, _b);
            var methodsWithReturnType = ['getConsent', 'getTrackerCategories'];
            var methodsWithoutReturnType = ['trigger', 'showChangeSettingsModal'];
            methodsWithoutReturnType.forEach(function (methodName) {
                window.MSFTPrivacy[kind][methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    sendMessage(methodName, args);
                };
            });
            methodsWithReturnType.forEach(function (methodName) {
                window.MSFTPrivacy[kind][methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return callMethod(methodName, args);
                };
            });
        });
    };
    if (!((_a = window.msftData) === null || _a === void 0 ? void 0 : _a.renderTemplateWithoutIframe)) {
        addProxyMethods();
    }

    var onclickHandler = function (e) {
        if (e.target &&
            e.target.nodeName.toLowerCase() === 'a') {
            var attributes = {};
            var attributeNames = e.target.getAttributeNames();
            e.preventDefault();
            e.stopPropagation();
            for (var i = 0; i < attributeNames.length; i++) {
                var attrName = attributeNames[i];
                attributes[attrName] =
                    e.target.getAttribute(attrName) || '';
            }
            window.MSFTPrivacy[kind].trigger(PublicEvents.AnchorTagClicked, {
                attributes: attributes,
            });
        }
    };
    // Options for the observer (which mutations to observe)
    var config = { childList: true, subtree: true };
    // Callback function to execute when mutations are observed
    var callback = function (mutationList) {
        mutationList.forEach(function (mutationRecord) {
            mutationRecord.addedNodes.forEach(function (addedNode) {
                if (addedNode.nodeName.toLowerCase() === 'a') {
                    addedNode.addEventListener('click', { handleEvent: onclickHandler });
                }
            });
        });
    };
    // Create an observer instance linked to the callback function
    var observer = new MutationObserver(callback);
    // Start observing the target node for configured mutations
    observer.observe(document.documentElement, config);

    var anchorClickHandler = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    var AsyncUtils = /** @class */ (function () {
        function AsyncUtils() {
        }
        AsyncUtils.deferred = function () {
            var defer = {};
            defer.promise = new Promise(function (res, rej) {
                defer.resolve = res;
                defer.reject = rej;
            });
            return defer;
        };
        return AsyncUtils;
    }());
    var AsyncUtils$1 = AsyncUtils;

    var promiseMap = {};
    var sendMessage = function (method, args, responseId) {
        var _a;
        if (parent) {
            if (args.length > 0 &&
                (args[0] === PublicEvents.ShowTemplate ||
                    args[0] === PublicEvents.CloseTemplate ||
                    args[0] === PublicEvents.CloseConsentNotice ||
                    !((_a = window.msftData) === null || _a === void 0 ? void 0 : _a.isGPCEnabled)))
                parent.postMessage({ method: method, params: Object.values(args), responseId: responseId }, msftData.origin);
        }
    };
    var callMethod = function (method, args) {
        var responseId = "".concat(method, "-").concat(new Date().getTime());
        var deferred = AsyncUtils$1.deferred();
        promiseMap[responseId] = deferred;
        sendMessage(method, args, responseId);
        return deferred.promise;
    };
    window.onmessage = function (e) {
        var _a;
        if (e.origin === msftData.origin && ((_a = e === null || e === void 0 ? void 0 : e.data) === null || _a === void 0 ? void 0 : _a.responseId)) {
            e.data.error
                ? promiseMap[e.data.responseId].reject(e.data.error)
                : promiseMap[e.data.responseId].resolve(e.data.response);
        }
    };

    var proxy = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sendMessage: sendMessage,
        callMethod: callMethod
    });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
