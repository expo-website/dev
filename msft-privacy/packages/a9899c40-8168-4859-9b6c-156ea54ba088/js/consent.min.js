/* eslint-disable */

(function () {
  "use strict";

  /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function (d, b) {
    extendStatics =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (d, b) {
          d.__proto__ = b;
        }) ||
      function (d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      };
    return extendStatics(d, b);
  };

  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError(
        "Class extends value " + String(b) + " is not a constructor or null"
      );
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype =
      b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
  }

  var __assign = function () {
    __assign =
      Object.assign ||
      function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };

  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }

  function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: [],
      },
      f,
      y,
      t,
      g;
    return (
      (g = { next: verb(0), throw: verb(1), return: verb(2) }),
      typeof Symbol === "function" &&
        (g[Symbol.iterator] = function () {
          return this;
        }),
      g
    );
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_)
        try {
          if (
            ((f = 1),
            y &&
              (t =
                op[0] & 2
                  ? y["return"]
                  : op[0]
                  ? y["throw"] || ((t = y["return"]) && t.call(y), 0)
                  : y.next) &&
              !(t = t.call(y, op[1])).done)
          )
            return t;
          if (((y = 0), t)) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (
                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                (op[0] === 6 || op[0] === 2)
              ) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5) throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }

  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        },
      };
    throw new TypeError(
      s ? "Object is not iterable." : "Symbol.iterator is not defined."
    );
  }

  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
      r,
      ar = [],
      e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error: error };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  }

  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  var ObjectUtils = /** @class */ (function () {
    function ObjectUtils() {}
    ObjectUtils.isObject = function (item) {
      return item && typeof item === "object" && !Array.isArray(item);
    };
    ObjectUtils.mergeDeep = function (target) {
      var _a, _b;
      var sources = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
      }
      if (!sources.length) return target;
      var source = sources.shift();
      if (this.isObject(target) && this.isObject(source)) {
        for (var key in source) {
          if (this.isObject(source[key])) {
            if (!target[key])
              Object.assign(target, ((_a = {}), (_a[key] = {}), _a));
            this.mergeDeep(target[key], source[key]);
          } else {
            Object.assign(target, ((_b = {}), (_b[key] = source[key]), _b));
          }
        }
      }
      return this.mergeDeep.apply(
        this,
        __spreadArray([target], __read(sources), false)
      );
    };
    return ObjectUtils;
  })();

  var SDKModules;
  (function (SDKModules) {
    SDKModules["PRESENTATION"] = "presentation";
    SDKModules["PREVIEW"] = "preview";
    SDKModules["CONFIG"] = "config";
    SDKModules["HANDLEBAR"] = "handlebar";
    SDKModules["PROXY"] = "proxy";
    SDKModules["DSR"] = "dsr";
  })(SDKModules || (SDKModules = {}));
  var SDKModulesPath;
  (function (SDKModulesPath) {
    SDKModulesPath["PRESENTATION"] =
      "$jsRootPath/msft-privacy/packages/$packageId/js/$consentSDKVersion/presentation.min.js";
    SDKModulesPath["PREVIEW"] =
      "$jsRootPath/msft-privacy/packages/$packageId/js/$consentSDKVersion/preview.min.js";
    SDKModulesPath["HANDLEBAR"] =
      "$jsRootPath/msft-privacy/packages/$packageId/js/$consentSDKVersion/vendor/handlebars.min.js";
    SDKModulesPath["PROXY"] =
      "$jsRootPath/msft-privacy/packages/$packageId/js/$consentSDKVersion/proxy.min.js";
    SDKModulesPath["DSR"] =
      "$jsRootPath/msft-privacy/packages/$packageId/js/$consentSDKVersion/dsr.min.js";
  })(SDKModulesPath || (SDKModulesPath = {}));
  var SDKModulesSourceVariable;
  (function (SDKModulesSourceVariable) {
    SDKModulesSourceVariable["PRESENTATION"] = "msft-presentation.js";
    SDKModulesSourceVariable["HANDLEBAR"] = "msft-handlebars.js";
    SDKModulesSourceVariable["PROXY"] = "msft-proxy.js";
    SDKModulesSourceVariable["DSR"] = "dsr.js";
  })(SDKModulesSourceVariable || (SDKModulesSourceVariable = {}));
  var ModuleSourceType;
  (function (ModuleSourceType) {
    ModuleSourceType["PATH"] = "path";
    ModuleSourceType["VARIABLE"] = "variable";
  })(ModuleSourceType || (ModuleSourceType = {}));

  var State$1 = /** @class */ (function () {
    function State(state) {
      this.state = state || {
        config: {},
        debug: {
          logs: [],
          events: [],
        },
        custom: {},
        userValues: {},
      };
    }
    return State;
  })();

  var Getters$1 = /** @class */ (function (_super) {
    __extends(Getters, _super);
    function Getters(state) {
      return _super.call(this, state) || this;
    }
    Object.defineProperty(Getters.prototype, "debugInfo", {
      get: function () {
        return this.state.debug;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "config", {
      get: function () {
        return this.state.config;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "userConsent", {
      get: function () {
        return this.state.custom.userConsent;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "isHeadless", {
      // TODO: Implement below getters
      get: function () {
        return false;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "isPreviewMode", {
      get: function () {
        var _a;
        return (
          ((_a = this.state.config.initConfig) === null || _a === void 0
            ? void 0
            : _a.preview) || false
        );
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "isActionDisabled", {
      get: function () {
        var _a;
        return (
          ((_a = this.state.config.initConfig) === null || _a === void 0
            ? void 0
            : _a.disableActions) || false
        );
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "isLivePreviewMode", {
      get: function () {
        var _a;
        try {
          return (
            ((_a = window.parent) === null || _a === void 0
              ? void 0
              : _a.name) === "ConsentLivePreview"
          );
        } catch (_err) {
          // If we try to access outer IFrame we get error
          // Uncaught (in promise) DOMException: Blocked a frame with origin "https://localhost:23309" from accessing a cross-origin frame.
          // This catch block is to bypass the error
          return false;
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "presentationVariable", {
      get: function () {
        return SDKModulesSourceVariable.PRESENTATION;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "handlebarVariable", {
      get: function () {
        return SDKModulesSourceVariable.HANDLEBAR;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "proxyVariable", {
      get: function () {
        return SDKModulesSourceVariable.PROXY;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "dsrVariable", {
      get: function () {
        return SDKModulesSourceVariable.DSR;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "dataProps", {
      get: function () {
        return this.state.custom.dynamicValues || {};
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "isGPCEnabled", {
      get: function () {
        var _a;
        var gpcValue =
          (_a = window.navigator.globalPrivacyControl) === null || _a === void 0
            ? void 0
            : _a.toString();
        return gpcValue ? gpcValue === "true" || gpcValue === "1" : false;
      },
      enumerable: false,
      configurable: true,
    });
    return Getters;
  })(State$1);

  var ConsentModelType;
  (function (ConsentModelType) {
    ConsentModelType["Explicit"] = "Explicit";
    ConsentModelType["Implicit"] = "Implicit";
  })(ConsentModelType || (ConsentModelType = {}));
  var PublicEvents;
  (function (PublicEvents) {
    PublicEvents["ConsentChanged"] = "ConsentChanged";
    PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
    PublicEvents["ShowFirstPage"] = "ShowFirstPage";
    PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
    PublicEvents["AcceptAll"] = "AcceptAll";
    PublicEvents["RejectAll"] = "RejectAll";
    PublicEvents["ShowTemplate"] = "ShowTemplate";
    PublicEvents["CloseTemplate"] = "CloseTemplate";
    PublicEvents["UpdateConsent"] = "UpdateConsent";
    PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
    PublicEvents["FetchConfig"] = "FetchConfig";
    PublicEvents["QuestionsFormSubmitWithoutMetaData"] =
      "QuestionsFormSubmitWithoutMetaData";
    PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
    PublicEvents["ShowPreferences"] = "ShowPreferences";
    PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
    PublicEvents["DataPropsUpdated"] = "DataPropsUpdated";
    PublicEvents["Done"] = "Done";
  })(PublicEvents || (PublicEvents = {}));
  var Events;
  (function (Events) {
    Events["Init"] = "Init";
    Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
    Events["ConfigReady"] = "ConfigReady";
    Events["ConsentInvalid"] = "ConsentInvalid";
  })(Events || (Events = {}));
  var Attributes;
  (function (Attributes) {
    // Web consent events
    Attributes["ConsentNotice"] = "msft-consent-notice";
    Attributes["AcceptAll"] = "msft-consent-accept-all";
    Attributes["OpenPreference"] = "msft-consent-open-preferences";
    Attributes["ClosePreference"] = "msft-consent-close-preferences";
    Attributes["DeclineAll"] = "msft-consent-decline-all";
    Attributes["SavePreferences"] = "msft-consent-save-preferences";
    Attributes["TrackerCategory"] = "msft-consent-tracker-category";
    // DSR events
    Attributes["QuestionnaireForm"] = "msft-questionnaire-form";
    Attributes["QuestionnaireFormSubmit"] = "msft-questionnaire-form-submit";
    // Generic events
    Attributes["Redirect"] = "msft-redirect";
    Attributes["OpenPage"] = "msft-open-page";
    Attributes["ClosePage"] = "msft-close-page";
    Attributes["TriggerEvent"] = "msft-trigger";
    Attributes["ToggleId"] = "msft-toggle-id";
    Attributes["ToggleOn"] = "msft-toggle-on";
    Attributes["ToggleOff"] = "msft-toggle-off";
    Attributes["FormPayloadData"] = "msft-payload-data";
    Attributes["FormId"] = "msft-payload-form-id";
    Attributes["FormInputIDs"] = "msft-payload-input-ids";
  })(Attributes || (Attributes = {}));
  var SDKMode;
  (function (SDKMode) {
    SDKMode["Default"] = "Default";
    SDKMode["HeadLess"] = "HeadLess";
  })(SDKMode || (SDKMode = {}));
  var StyleType;
  (function (StyleType) {
    StyleType["Url"] = "Url";
    StyleType["Text"] = "Text";
  })(StyleType || (StyleType = {}));
  var Preference;
  (function (Preference) {
    Preference["OFF"] = "0";
    Preference["ON"] = "1";
  })(Preference || (Preference = {}));
  var Cookie;
  (function (Cookie) {
    Cookie["Consent"] = "msft-consent";
    Cookie["ConsentMetadata"] = "msft-consent-metadata";
  })(Cookie || (Cookie = {}));
  var RegisteredDivType;
  (function (RegisteredDivType) {
    RegisteredDivType["Script"] = "script";
    RegisteredDivType["IFrame"] = "iframe";
  })(RegisteredDivType || (RegisteredDivType = {}));
  var NoticeType;
  (function (NoticeType) {
    NoticeType["TrackerCategory"] = "trackerCategory";
    NoticeType["Questions"] = "Questions";
  })(NoticeType || (NoticeType = {}));
  var ErrorStrings;
  (function (ErrorStrings) {
    ErrorStrings["TemplateError"] =
      "<b>There is something wrong with template. Please check logs.</b>";
  })(ErrorStrings || (ErrorStrings = {}));
  var IntervalUnits;
  (function (IntervalUnits) {
    IntervalUnits["day"] = "day";
    IntervalUnits["week"] = "week";
    IntervalUnits["month"] = "month";
    IntervalUnits["year"] = "year";
  })(IntervalUnits || (IntervalUnits = {}));
  var QuestionType;
  (function (QuestionType) {
    QuestionType["Text"] = "Text";
    QuestionType["Email"] = "Email";
    QuestionType["Radio"] = "Radio";
    QuestionType["MultiSelect"] = "MultiSelect";
    QuestionType["Select"] = "Select";
    QuestionType["Date"] = "Date";
    QuestionType["PhoneNumber"] = "PhoneNumber";
    QuestionType["CreditCard"] = "CreditCard";
    QuestionType["Number"] = "Number";
    QuestionType["MultiLineText"] = "multiLineText";
  })(QuestionType || (QuestionType = {}));
  var QuestionValidation;
  (function (QuestionValidation) {
    QuestionValidation["Required"] = "Required";
  })(QuestionValidation || (QuestionValidation = {}));
  var QuestionField;
  (function (QuestionField) {
    QuestionField["Question"] = "question";
    QuestionField["Placeholder"] = "placeholder";
    QuestionField["Options"] = "options";
  })(QuestionField || (QuestionField = {}));
  var ModelKind;
  (function (ModelKind) {
    ModelKind["WebConsent"] = "MICROSOFT.WebConsent";
    ModelKind["DSRSubmission"] = "MICROSOFT.DSRSubmission";
  })(ModelKind || (ModelKind = {}));
  var PackageKind;
  (function (PackageKind) {
    PackageKind["WebConsentPackage"] = "WebConsentPackage";
    PackageKind["FIDESPackage"] = "FIDESPackage";
    PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
  })(PackageKind || (PackageKind = {}));
  var Template;
  (function (Template) {
    Template["Preferences"] = "Preferences";
  })(Template || (Template = {}));

  var enums = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    get ConsentModelType() {
      return ConsentModelType;
    },
    get PublicEvents() {
      return PublicEvents;
    },
    get Events() {
      return Events;
    },
    get Attributes() {
      return Attributes;
    },
    get SDKMode() {
      return SDKMode;
    },
    get StyleType() {
      return StyleType;
    },
    get Preference() {
      return Preference;
    },
    get Cookie() {
      return Cookie;
    },
    get RegisteredDivType() {
      return RegisteredDivType;
    },
    get NoticeType() {
      return NoticeType;
    },
    get ErrorStrings() {
      return ErrorStrings;
    },
    get IntervalUnits() {
      return IntervalUnits;
    },
    get QuestionType() {
      return QuestionType;
    },
    get QuestionValidation() {
      return QuestionValidation;
    },
    get QuestionField() {
      return QuestionField;
    },
    get ModelKind() {
      return ModelKind;
    },
    get PackageKind() {
      return PackageKind;
    },
    get Template() {
      return Template;
    },
  });

  var Reducers$1 = /** @class */ (function (_super) {
    __extends(Reducers, _super);
    function Reducers(state) {
      return _super.call(this, state) || this;
    }
    Reducers.prototype.saveDebugInfo = function (_a) {
      var event = _a.event,
        log = _a.log;
      if (event) {
        this.state.debug.events.push(event);
      }
      if (log) {
        this.state.debug.logs.push(log);
      }
    };
    Reducers.prototype.setUserConsent = function (consent) {
      this.state.custom.userConsent = consent;
    };
    Reducers.prototype.setInitConfig = function (initConfig) {
      this.state.config.initConfig = initConfig;
      if (
        initConfig === null || initConfig === void 0
          ? void 0
          : initConfig.dataProps
      ) {
        this.setDataProps(initConfig.dataProps);
      }
    };
    Reducers.prototype.setDataProps = function (values) {
      this.state.custom.dynamicValues = __assign(
        __assign({}, this.state.custom.dynamicValues || {}),
        values
      );
      EventBus$1.trigger(
        PublicEvents.DataPropsUpdated,
        this.state.custom.dynamicValues
      );
    };
    Reducers.prototype.addCustomUserValue = function (key, value) {
      this.state.userValues[key] = value;
    };
    Reducers.prototype.getCustomUserValue = function (key) {
      return this.state.userValues[key];
    };
    return Reducers;
  })(State$1);

  var state$1 = new State$1().state;
  var getter$1 = new Getters$1(state$1);
  var reducer$1 = new Reducers$1(state$1);
  var Store = {
    getters: getter$1,
    reducers: reducer$1,
    addReducers: function (reducers) {
      this.reducers = ObjectUtils.mergeDeep(this.reducers, reducers);
    },
    addGetters: function (getters) {
      Object.defineProperties(
        this.getters,
        Object.getOwnPropertyDescriptors(getters.prototype)
      );
    },
  };

  var LogLevels;
  (function (LogLevels) {
    LogLevels[(LogLevels["INFO"] = 0)] = "INFO";
    LogLevels[(LogLevels["WARN"] = 1)] = "WARN";
    LogLevels[(LogLevels["ERROR"] = 2)] = "ERROR";
  })(LogLevels || (LogLevels = {}));

  var ConsoleLogger = /** @class */ (function () {
    function ConsoleLogger() {}
    /**
     * Browser's console logger plugin.
     *
     * @param {LogLevels} level Log level
     * @param {string} message Log message
     */
    ConsoleLogger.log = function (level, message) {
      switch (level) {
        case LogLevels.WARN:
          console.warn(message);
          break;
        case LogLevels.ERROR:
          console.error(message);
          break;
        default:
          {
            console.log(message);
          }
          break;
      }
    };
    return ConsoleLogger;
  })();

  /**
   * @typedef {import("core/types/interfaces").IGenericObject} IGenericObject
   */
  var Logger = /** @class */ (function () {
    function Logger() {}
    /**
     * Info logs
     *
     * @param {string} message Logger message
     * @param {IGenericObject} data Additional details to log
     */
    Logger.info = function (message, data) {
      Logger.log(LogLevels.INFO, message, data);
    };
    /**
     * Warning logs
     *
     * @param {string} message Logger message
     * @param {IGenericObject} data Additional details to log
     */
    Logger.warn = function (message, data) {
      Logger.log(LogLevels.WARN, message, data);
    };
    /**
     * Error logs
     *
     * @param {string} message Logger message
     * @param {IGenericObject} data Additional details to log
     */
    Logger.error = function (message, data) {
      Logger.log(LogLevels.ERROR, message, data);
    };
    /**
     * Logs the message using the plugin based in level.
     *
     * @param {LogLevels} logLevel Log level
     * @param {string} message Logger message
     * @param {IGenericObject} data Additional details to log
     */
    Logger.log = function (logLevel, message, data) {
      var formattedMessage = Logger.formatLogMessage(logLevel, message, data);
      Store.reducers.saveDebugInfo({ log: formattedMessage });
      ConsoleLogger.log(logLevel, formattedMessage);
    };
    /**
     * Formats the logger message.
     *
     * @param {LogLevels} logLevel Log level
     * @param {string} message Logger message
     * @param {IGenericObject} data Additional details to log
     * @returns {string} Formatted logger message
     */
    Logger.formatLogMessage = function (logLevel, message, data) {
      var stringifiedData = data ? "| ".concat(JSON.stringify(data)) : "";
      return "["
        .concat(LogLevels[logLevel], "] ")
        .concat(message, " ")
        .concat(stringifiedData);
    };
    return Logger;
  })();

  var EventsReplayStrategy;
  (function (EventsReplayStrategy) {
    EventsReplayStrategy[(EventsReplayStrategy["REPLAY_ALL"] = 0)] =
      "REPLAY_ALL";
    EventsReplayStrategy[(EventsReplayStrategy["REPLAY_LATEST"] = 1)] =
      "REPLAY_LATEST";
    EventsReplayStrategy[(EventsReplayStrategy["SKIP"] = 2)] = "SKIP";
  })(EventsReplayStrategy || (EventsReplayStrategy = {}));

  var ReplayAllEvents = /** @class */ (function () {
    function ReplayAllEvents() {
      this.strategy = EventsReplayStrategy.REPLAY_ALL;
    }
    ReplayAllEvents.prototype.execute = function (callback, events) {
      events.forEach(function (_a) {
        var payload = _a.payload;
        return callback(payload);
      });
    };
    return ReplayAllEvents;
  })();
  var ReplayAllEvents$1 = new ReplayAllEvents();

  var ReplayLatestEvent = /** @class */ (function () {
    function ReplayLatestEvent() {
      this.strategy = EventsReplayStrategy.REPLAY_LATEST;
    }
    ReplayLatestEvent.prototype.execute = function (callback, events) {
      if (events.length) {
        callback(events[events.length - 1].payload);
      }
    };
    return ReplayLatestEvent;
  })();
  var ReplayLatestEvent$1 = new ReplayLatestEvent();

  var SkipEventReplay = /** @class */ (function () {
    function SkipEventReplay() {
      this.strategy = EventsReplayStrategy.SKIP;
    }
    SkipEventReplay.prototype.execute = function () {
      return void 0;
    };
    return SkipEventReplay;
  })();
  var SkipEventReplay$1 = new SkipEventReplay();

  var _a$1;
  var ReplayStrategy =
    ((_a$1 = {}),
    (_a$1[EventsReplayStrategy.REPLAY_ALL] = ReplayAllEvents$1),
    (_a$1[EventsReplayStrategy.REPLAY_LATEST] = ReplayLatestEvent$1),
    (_a$1[EventsReplayStrategy.SKIP] = SkipEventReplay$1),
    _a$1);

  var EventsRecording = /** @class */ (function () {
    function EventsRecording() {}
    EventsRecording.record = function (event, payload) {
      this.eventsLogs[event] = this.eventsLogs[event] || [];
      this.eventsLogs[event].push({ payload: payload });
    };
    EventsRecording.replay = function (event, callback, strategy) {
      if (strategy === void 0) {
        strategy = this.DEFAULT_STRATEGY;
      }
      ReplayStrategy[strategy].execute(callback, this.eventsLogs[event] || []);
    };
    EventsRecording.eventsLogs = {};
    EventsRecording.DEFAULT_STRATEGY = EventsReplayStrategy.REPLAY_LATEST;
    return EventsRecording;
  })();

  var EventBus = /** @class */ (function () {
    function EventBus() {
      this.events = {};
      this.eventIdCounter = 0;
    }
    /**
     * Gets default event details.
     * @returns {IEventDetails} Default event details
     */
    EventBus.getDefaultEventDetails = function () {
      return {
        executionCount: 0,
        callbacks: [],
      };
    };
    /**
     * Add an event listener.
     * @param {string} event Event name
     * @param {ICallback} callback Listener callback
     * @param {IEventHandlerProperties} properties Additional configuration properties
     * @returns {number} Event ID
     */
    EventBus.prototype.on = function (event, callback, _a) {
      var _b = _a === void 0 ? {} : _a,
        _c = _b.sync,
        sync = _c === void 0 ? false : _c,
        replayStrategy = _b.replayStrategy;
      Logger.info("Callback registered for event : ".concat(event));
      this.eventIdCounter++;
      var eventDetails = {
        id: this.eventIdCounter,
        fn: callback,
        sync: sync,
      };
      this.events[event] =
        this.events[event] || EventBus.getDefaultEventDetails();
      this.events[event].callbacks.push(eventDetails);
      EventsRecording.replay(event, callback, replayStrategy);
      return this.eventIdCounter;
    };
    /**
     * Execute an event.
     * @param {string} event Event name
     * @param {import("core/types/interfaces").IGenericObject} payload Payload data
     */
    EventBus.prototype.trigger = function (event, payload) {
      var _this = this;
      var _a;
      if (payload === void 0) {
        payload = {};
      }
      var callbacks =
        ((_a = this.events[event]) === null || _a === void 0
          ? void 0
          : _a.callbacks) || [];
      // Let the logic run even if no active listeners so that we can record the events.
      Logger.info(
        "Started executing '"
          .concat(callbacks.length, "' callbacks for event '")
          .concat(event, "'"),
        payload
      );
      Store.reducers.saveDebugInfo({ event: event });
      callbacks.forEach(function (eventHandler) {
        return __awaiter(_this, void 0, void 0, function () {
          var e_1;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                _a.trys.push([0, 3, , 4]);
                if (!!eventHandler.sync) return [3 /*break*/, 2];
                return [4 /*yield*/, Promise.resolve()];
              case 1:
                _a.sent();
                _a.label = 2;
              case 2:
                eventHandler.fn(payload);
                return [3 /*break*/, 4];
              case 3:
                e_1 = _a.sent();
                Logger.error(
                  "Error in executing callback id : "
                    .concat(eventHandler.id, " for event '")
                    .concat(event),
                  e_1
                );
                return [3 /*break*/, 4];
              case 4:
                return [2 /*return*/];
            }
          });
        });
      });
      EventsRecording.record(event, payload);
      Logger.info(
        "Completed executing '"
          .concat(callbacks.length, "' callbacks for event '")
          .concat(event, "'"),
        payload
      );
      if (this.events[event]) {
        this.events[event].executionCount++;
      }
    };
    /**
     * Detach an event listener.
     * @param {string} event Event name
     * @param {number | ICallback} eventIdOrCallback Event listener ID or callback to remove
     */
    EventBus.prototype.off = function (event, eventIdOrCallback) {
      var _a;
      var idx =
        (_a = this.events[event]) === null || _a === void 0
          ? void 0
          : _a.callbacks.findIndex(function (eventDetails) {
              return (
                eventDetails.id === eventIdOrCallback ||
                eventDetails.fn === eventIdOrCallback
              );
            });
      if (typeof idx === "number" && ~idx) {
        Logger.info(
          "Removing event listener '"
            .concat(this.events[event].callbacks[idx].id, "' of '")
            .concat(event, "' event")
        );
        this.events[event].callbacks.splice(idx, 1);
      } else {
        Logger.error(
          "Unable to remove event listener for event '".concat(
            event,
            "'. No matching event id or callback found."
          )
        );
      }
    };
    /**
     * Checks if any event listener is attached in the event bus.
     * @param {string} event Event name
     * @returns {boolean} True if an event listener is attached else false
     */
    EventBus.prototype.hasListener = function (event) {
      var _a;
      return (
        ((_a = this.events[event]) === null || _a === void 0
          ? void 0
          : _a.callbacks.length) > 0
      );
    };
    return EventBus;
  })();
  var EventBus$1 = new EventBus();

  var InternalAPI = /** @class */ (function () {
    function InternalAPI() {}
    InternalAPI.initConsent = function (config) {
      Store.reducers.setInitConfig(config);
      EventBus$1.trigger(Events.Init, config);
    };
    return InternalAPI;
  })();

  var DataPropsApi = /** @class */ (function () {
    function DataPropsApi() {}
    DataPropsApi.push = function (values) {
      Store.reducers.setDataProps(values);
    };
    return DataPropsApi;
  })();

  var MSFTPrivacy = /** @class */ (function () {
    function MSFTPrivacy() {}
    /**
     * Init will initialize the window.__MSFT_SDK[kind].
     *
     * @param  {import("core/types/interfaces").IInitConfig} config init config
     */
    MSFTPrivacy.init = function (config) {
      InternalAPI.initConsent(config);
    };
    /**
     * Add an event listener.
     *
     * @param {string} event Event name
     * @param {ICallback} callback Listener callback
     * @param {IEventHandlerProperties} properties Additional configuration properties
     * @returns {number} Event ID
     */
    MSFTPrivacy.on = function (event, callback, _a) {
      var _b = _a === void 0 ? {} : _a,
        _c = _b.sync,
        sync = _c === void 0 ? false : _c;
      if (event in Events) {
        Logger.error(
          "Cannot subscribe to internal event '".concat(event, "'.")
        );
        return;
      }
      return EventBus$1.on(event, callback, { sync: sync });
    };
    /**
     * Execute an event.
     *
     * @param {string} event Event name
     * @param {import("core/types/interfaces").IGenericObject} payload Payload data
     */
    MSFTPrivacy.trigger = function (event, payload) {
      if (event in Events) {
        Logger.error("Cannot trigger internal event '".concat(event, "'."));
        return;
      }
      EventBus$1.trigger(event, payload);
    };
    /**
     * Detach an event listener.
     *
     * @param {string} event Event name
     * @param {number | ICallback} eventIdOrCallback Event listener ID or callback to remove
     */
    MSFTPrivacy.off = function (event, eventIdOrCallback) {
      if (event in Events) {
        Logger.error(
          "Cannot detach listener for internal event '".concat(event, "'.")
        );
        return;
      }
      EventBus$1.off(event, eventIdOrCallback);
    };
    /**
     * Add a custom value.
     *
     * @param {string} key Key name
     * @param {any} value Custom value
     */
    MSFTPrivacy.addValue = function (key, value) {
      Store.reducers.addCustomUserValue(key, value);
    };
    /**
     * Get custom value.
     *
     * @param {string} key Key name
     * @returns {any} Custom value
     */
    MSFTPrivacy.getValue = function (key) {
      return Store.reducers.getCustomUserValue(key);
    };
    MSFTPrivacy.dataProps = DataPropsApi;
    return MSFTPrivacy;
  })();

  var kind$1 = "__PACKAGE_KIND__";

  var IFrameUtils = /** @class */ (function () {
    function IFrameUtils() {}
    /**
     * Create and add new iframe
     *
     * @param  {string} bodyHtml body html content
     * @param  {string} iframeId id to be assigned to iframe
     * @param  {HTMLElement|null} parentElement parent element to which iframe will be added
     * @param  {import("core/types/interfaces").IStyle[]} styles user provided styles
     */
    IFrameUtils.createIFrame = function (
      bodyHtml,
      iframeId,
      parentElement,
      styles
    ) {
      var _a;
      var renderWithoutIframe =
        (_a = Store.getters.config.initConfig) === null || _a === void 0
          ? void 0
          : _a.renderTemplateWithoutIframe;
      if (document.body) {
        IFrameUtils.appendElement(
          renderWithoutIframe
            ? IFrameUtils.getDivElement(
                bodyHtml,
                iframeId,
                parentElement == null
              )
            : IFrameUtils.getIframeObject(
                bodyHtml,
                iframeId,
                parentElement == null,
                styles
              ),
          parentElement
        );
      } else {
        window.addEventListener("DOMContentLoaded", function () {
          IFrameUtils.appendElement(
            renderWithoutIframe
              ? IFrameUtils.getDivElement(
                  bodyHtml,
                  iframeId,
                  parentElement == null
                )
              : IFrameUtils.getIframeObject(
                  bodyHtml,
                  iframeId,
                  parentElement == null,
                  styles
                ),
            parentElement
          );
        });
      }
    };
    IFrameUtils.getGlobalStyle = function () {
      return ".msft-disabled{opacity:0.5;}";
    };
    IFrameUtils.getIframeObject = function (
      bodyHtml,
      iframeId,
      fixedPosition,
      styles
    ) {
      var html =
        "<html><head><style>.msft-iframe-body{background-color: rgb(204 204 204 / 60%);} "
          .concat(
            this.getGlobalStyle(),
            '</style></head><body class="msft-iframe-body">'
          )
          .concat(bodyHtml)
          .concat(IFrameUtils.getAllStylesAsText(styles), "</body></html>");
      var iframe = document.createElement("iframe");
      iframe.setAttribute(
        "style",
        "height:100%;width:100%;border:0;position:".concat(
          fixedPosition ? "fixed" : "relative",
          ";top:0;left:0;z-index:5000;"
        )
      );
      iframe.className = "msft-model-container";
      iframe.setAttribute("sandbox", "allow-scripts allow-forms");
      iframe.id = iframeId;
      iframe.srcdoc = html;
      return iframe;
    };
    IFrameUtils.getDivElement = function (bodyHtml, divId, fixedPosition) {
      var css =
        ".msft-iframe-body{background-color: rgb(204 204 204 / 60%);height:100%;width:100%}";
      var styleElement = document.createElement("style");
      styleElement.appendChild(document.createTextNode(css));
      var childDiv = document.createElement("div");
      // eslint-disable-next-line @microsoft/sdl/no-inner-html
      childDiv.innerHTML = bodyHtml;
      childDiv.className = "msft-iframe-body";
      var containerDiv = document.createElement("div");
      containerDiv.setAttribute(
        "style",
        "height:100%;width:100%;border:0;position:".concat(
          fixedPosition ? "fixed" : "relative",
          ";top:0;left:0;z-index:5000;"
        )
      );
      containerDiv.className = "msft-model-container";
      containerDiv.id = divId;
      containerDiv.appendChild(styleElement);
      containerDiv.appendChild(childDiv);
      var scripts = containerDiv.getElementsByTagName("script");
      var scriptsToBeAdded = [];
      for (var i = 0; i < scripts.length; i++) {
        var script = document.createElement("script");
        if (scripts[i].src) {
          script.src = scripts[i].src;
        } else {
          var inlineScript = document.createTextNode(scripts[i].innerHTML);
          script.appendChild(inlineScript);
        }
        scriptsToBeAdded.push(script);
      }
      setTimeout(function () {
        scriptsToBeAdded.forEach(function (script) {
          var _a;
          (_a = document.getElementById(divId)) === null || _a === void 0
            ? void 0
            : _a.appendChild(script);
        });
      });
      return containerDiv;
    };
    /**
     * Append iframe element to dom
     *
     * @param  {HTMLElement} element element
     * @param  {HTMLElement|null} parentElement parent container
     */
    IFrameUtils.appendElement = function (element, parentElement) {
      (parentElement || document.body).appendChild(element);
    };
    /**
     * @param  {import("core/types/interfaces").IStyle[]} styles user provided styles
     * @returns {string} style text
     */
    IFrameUtils.appendStyles = function (styles) {
      var styleText = "";
      styles === null || styles === void 0
        ? void 0
        : styles.forEach(function (style) {
            if (style.type == StyleType.Text) {
              var css = document.createElement("style");
              css.appendChild(document.createTextNode(style.value));
              styleText += css.outerHTML;
            } else if (style.type == StyleType.Url) {
              var link = document.createElement("link");
              link.rel = "stylesheet";
              link.href = style.value;
              styleText += link.outerHTML;
            }
          });
      return styleText;
    };
    /**
     * @param  {import("core/types/interfaces").IStyle[]} styles user provided styles
     * @returns {string} style text
     */
    IFrameUtils.getAllStylesAsText = function (styles) {
      var styleText = "";
      var styleElements = __spreadArray(
        __spreadArray(
          [],
          __read(document.getElementsByTagName("style")),
          false
        ),
        __read(document.getElementsByTagName("link")),
        false
      );
      styleText += this.appendStyles(styles);
      styleElements.forEach(function (elm) {
        return (styleText += elm.outerHTML);
      });
      styleText += this.appendStyles(
        window.__MSFT_SDK[kind$1].Store.getters.styles
      );
      return styleText;
    };
    return IFrameUtils;
  })();

  var PublicApiHelper = /** @class */ (function () {
    function PublicApiHelper() {}
    PublicApiHelper.addPublicApis = function (Apis) {
      this.PublicApis = Apis;
    };
    PublicApiHelper.exposeApis = function () {
      var PublicApis = Object.getOwnPropertyNames(
        window.MSFTPrivacy[kind$1]
      ).filter(function (element) {
        return typeof element == "function";
      });
      var toBeAddedApis = Object.getOwnPropertyNames(this.PublicApis);
      PublicApis.forEach(function (element) {
        if (toBeAddedApis.includes(element))
          Logger.warn(
            "Already existing Public Api with the same name '".concat(
              element,
              "'"
            )
          );
      });
      Object.defineProperties(
        window.MSFTPrivacy[kind$1],
        Object.getOwnPropertyDescriptors(this.PublicApis)
      );
    };
    return PublicApiHelper;
  })();

  var Constants = {
    OFF: "0",
    ON: "1",
    COOKIE_NAME: "APCC",
    ConsentConfig: "MicrosoftConsentConfig",
    TrackerCategoryControl: "TrackerCategory",
    GeoLocations: "GeoLocations",
    CountriesOrRegions: "CountriesOrRegions",
  };

  var constants = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Constants: Constants,
  });

  var GraphUtils = /** @class */ (function () {
    function GraphUtils() {}
    GraphUtils.topologicalSort = function (directedEdges) {
      var _this = this;
      var adjacencyList = this.getAdjacencyList(directedEdges);
      var sortedNodesMap = {};
      return Object.keys(adjacencyList).reduce(function (
        sortedNodes,
        currentNode
      ) {
        return sortedNodes.concat(
          _this.dfs(currentNode, adjacencyList, sortedNodesMap)
        );
      },
      []);
    };
    GraphUtils.dfs = function (
      currentNode,
      adjacencyList,
      sortedNodesMap,
      visitedNodes
    ) {
      var _this = this;
      var _a;
      if (visitedNodes === void 0) {
        visitedNodes = {};
      }
      if (visitedNodes[currentNode]) {
        throw new Error("Circular dependency found!");
      }
      if (!sortedNodesMap[currentNode]) {
        visitedNodes[currentNode] = true;
        var sortedNodes =
          ((_a = adjacencyList[currentNode]) === null || _a === void 0
            ? void 0
            : _a.reduce(function (partiallySortedNodes, dependentNode) {
                return partiallySortedNodes.concat(
                  _this.dfs(
                    dependentNode,
                    adjacencyList,
                    sortedNodesMap,
                    visitedNodes
                  )
                );
              }, [])) || [];
        sortedNodesMap[currentNode] = true;
        visitedNodes[currentNode] = false;
        return sortedNodes.concat(currentNode);
      }
      return [];
    };
    GraphUtils.getAdjacencyList = function (directedEdges) {
      var adjacencyList = {};
      directedEdges.forEach(function (_a) {
        var _b;
        var _c = __read(_a, 2),
          nodeA = _c[0],
          dependencyNodes = _c[1];
        adjacencyList[nodeA] = adjacencyList[nodeA] || [];
        (_b = adjacencyList[nodeA]).push.apply(
          _b,
          __spreadArray([], __read(dependencyNodes), false)
        );
      });
      return adjacencyList;
    };
    return GraphUtils;
  })();

  var ConfigCallbacks = {
    Translation: function (noticeName, translation) {
      var _a;
      Logger.info("fetch translation callback invoked", {
        noticeName: noticeName,
        translation: translation,
      });
      window.__MSFT_SDK[kind$1].Store.reducers.setTranslations(
        __spreadArray(
          __spreadArray(
            [],
            __read(window.__MSFT_SDK[kind$1].Store.getters.translations || []),
            false
          ),
          [((_a = {}), (_a[noticeName] = translation.translations), _a)],
          false
        )
      );
    },
    Model: function (val) {
      Logger.info("fetch model callback invoked", { val: val });
      window.__MSFT_SDK[kind$1].Store.reducers.setCurrentModel(val);
    },
    Template: function (val) {
      Logger.info("fetch template callback invoked", { val: val });
      window.__MSFT_SDK[kind$1].Store.reducers.setTemplate(val);
    },
  };

  // TODO: Add real store getters and path names
  var SDKDependency = {
    getDependencies: function () {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      return {
        fields: {
          packageId:
            (_a = window.__MSFT_SDK[kind$1].config) === null || _a === void 0
              ? void 0
              : _a.id,
          modelId:
            ((_b = Store.getters.selectedCoreModel) === null || _b === void 0
              ? void 0
              : _b.id) || "",
          lcid: Store.getters.lcid,
          sdkRootPath:
            ((_c = Store.getters.config.initConfig) === null || _c === void 0
              ? void 0
              : _c.assetsPath) ||
            ((_d = Store.getters.packageConfigurations) === null ||
            _d === void 0
              ? void 0
              : _d.assetsPath) ||
            "",
          jsRootPath:
            ((_e = Store.getters.config.initConfig) === null || _e === void 0
              ? void 0
              : _e.jsPath) ||
            ((_f = Store.getters.config.initConfig) === null || _f === void 0
              ? void 0
              : _f.assetsPath) ||
            ((_g = Store.getters.packageConfigurations) === null ||
            _g === void 0
              ? void 0
              : _g.assetsPath) ||
            "",
          modelVersion:
            "" +
            ((_h = Store.getters.selectedCoreModel) === null || _h === void 0
              ? void 0
              : _h.version),
          packageVersion: "latest",
          consentSDKVersion:
            "" + window.__MSFT_SDK[kind$1].config.consentSDKVersion,
        },
        modules: __spreadArray(
          [
            {
              module: SDKModules.CONFIG,
              source: {
                type: ModuleSourceType.VARIABLE,
                value: "config.js",
              },
              dependency: [],
              callback: function () {
                window.__MSFT_SDK[kind$1].EventBus.trigger(
                  window.__MSFT_SDK[kind$1].enums.Events.ConfigReady
                );
              },
              condition: function () {
                return !(
                  Store.getters.isPreviewMode || Store.getters.isLivePreviewMode
                );
              },
              configs: __spreadArray(
                __spreadArray(
                  [],
                  __read(
                    ((_j = Store.getters.selectedCoreModel) === null ||
                    _j === void 0
                      ? void 0
                      : _j.kind) === ModelKind.WebConsent
                      ? window.__MSFT_SDK[
                          kind$1
                        ].Store.getters.bannerTrackerCategories.map(function (
                          category
                        ) {
                          return {
                            source: {
                              type: ModuleSourceType.PATH,
                              value:
                                "$sdkRootPath/msft-privacy/packages/$packageId/$packageVersion/models/$modelId/$modelVersion/translations/".concat(
                                  category.objectId,
                                  "/$lcid.json"
                                ),
                            },
                            callback: function (val) {
                              return ConfigCallbacks.Translation(
                                category.objectId,
                                val
                              );
                            },
                          };
                        })
                      : []
                  ),
                  false
                ),
                [
                  {
                    source: {
                      type: ModuleSourceType.PATH,
                      value:
                        "$sdkRootPath/msft-privacy/packages/$packageId/$packageVersion/models/$modelId/$modelVersion/translations/model/$lcid.json",
                    },
                    callback: function (val) {
                      return ConfigCallbacks.Translation("model", val);
                    },
                  },
                  {
                    source: {
                      type: ModuleSourceType.PATH,
                      value:
                        "$sdkRootPath/msft-privacy/packages/$packageId/$packageVersion/models/$modelId/$modelVersion/model.json",
                    },
                    callback: ConfigCallbacks.Model,
                  },
                  {
                    source: {
                      type: ModuleSourceType.PATH,
                      value:
                        "$sdkRootPath/msft-privacy/packages/$packageId/$packageVersion/models/$modelId/$modelVersion/templates/".concat(
                          (_k = Store.getters.selectedCoreModel) === null ||
                            _k === void 0
                            ? void 0
                            : _k.layout.id,
                          "/template.json"
                        ),
                    },
                    callback: ConfigCallbacks.Template,
                  },
                ],
                false
              ),
            },
            {
              module: SDKModules.PRESENTATION,
              source: Store.getters.isPreviewMode
                ? {
                    type: ModuleSourceType.VARIABLE,
                    value: Store.getters.presentationVariable,
                  }
                : {
                    type: ModuleSourceType.PATH,
                    value: SDKModulesPath.PRESENTATION,
                  },
              condition: function () {
                return !Store.getters.isHeadless;
              },
              dependency: __spreadArray(
                [SDKModules.HANDLEBAR, SDKModules.CONFIG, SDKModules.PROXY],
                __read(
                  ((_l = Store.getters.selectedCoreModel) === null ||
                  _l === void 0
                    ? void 0
                    : _l.kind) === ModelKind.DSRSubmission
                    ? [SDKModules.DSR]
                    : []
                ),
                false
              ),
            },
            {
              module: SDKModules.HANDLEBAR,
              source: Store.getters.isPreviewMode
                ? {
                    type: ModuleSourceType.VARIABLE,
                    value: Store.getters.handlebarVariable,
                  }
                : {
                    type: ModuleSourceType.PATH,
                    value: SDKModulesPath.HANDLEBAR,
                  },
              condition: function () {
                return !Store.getters.isHeadless;
              },
              dependency: [],
            },
            {
              module: SDKModules.PREVIEW,
              source: {
                type: ModuleSourceType.PATH,
                value: SDKModulesPath.PREVIEW,
              },
              condition: function () {
                return Store.getters.isLivePreviewMode;
              },
              dependency: [],
            },
            {
              module: SDKModules.PROXY,
              source: Store.getters.isPreviewMode
                ? {
                    type: ModuleSourceType.VARIABLE,
                    value: Store.getters.proxyVariable,
                  }
                : {
                    type: ModuleSourceType.PATH,
                    value: SDKModulesPath.PROXY,
                  },
              callback: function (js) {
                window.__MSFT_SDK[kind$1].Store.reducers.setProxyJS(js);
              },
              dependency: [],
            },
          ],
          __read(
            ((_m = Store.getters.selectedCoreModel) === null || _m === void 0
              ? void 0
              : _m.kind) === ModelKind.DSRSubmission
              ? [
                  {
                    module: SDKModules.DSR,
                    source: Store.getters.isPreviewMode
                      ? {
                          type: ModuleSourceType.VARIABLE,
                          value: Store.getters.dsrVariable,
                        }
                      : {
                          type: ModuleSourceType.PATH,
                          value: SDKModulesPath.DSR,
                        },
                    dependency: [],
                  },
                ]
              : []
          ),
          false
        ),
      };
    },
  };

  var AsyncUtils = /** @class */ (function () {
    function AsyncUtils() {}
    AsyncUtils.deferred = function () {
      var defer = {};
      defer.promise = new Promise(function (res, rej) {
        defer.resolve = res;
        defer.reject = rej;
      });
      return defer;
    };
    return AsyncUtils;
  })();

  var DomUtils = /** @class */ (function () {
    function DomUtils() {}
    DomUtils.addScriptToDOM = function (value) {
      var defer = AsyncUtils.deferred();
      var script = document.createElement("script");
      script.type = "text/javascript";
      script.appendChild(document.createTextNode(value));
      script.onload = function () {
        return defer.resolve();
      };
      script.onerror = function () {
        return defer.reject();
      };
      if (document.body) {
        document.body.appendChild(script);
      } else {
        window.addEventListener("DOMContentLoaded", function () {
          document.body.appendChild(script);
        });
      }
      return defer.promise;
    };
    return DomUtils;
  })();

  var EventUtils = /** @class */ (function () {
    function EventUtils() {}
    EventUtils.fetch = function (path) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, promise, resolve;
        return __generator(this, function (_b) {
          (_a = AsyncUtils.deferred()),
            (promise = _a.promise),
            (resolve = _a.resolve);
          EventBus$1.trigger(PublicEvents.FetchConfig, {
            path: path,
            callback: function (response) {
              resolve(response.data);
            },
          });
          return [2 /*return*/, promise];
        });
      });
    };
    return EventUtils;
  })();

  var HTTPUtils = /** @class */ (function () {
    function HTTPUtils() {}
    HTTPUtils.fetch = function (url) {
      return __awaiter(this, void 0, void 0, function () {
        var myHeaders;
        return __generator(this, function (_a) {
          try {
            myHeaders = new Headers();
            myHeaders.append("Cache-Control", "max-age=10");
            return [
              2 /*return*/,
              this.exponentialRetry(function () {
                return fetch(url, { headers: myHeaders }).then(function (res) {
                  if (!res.ok) {
                    throw new Error(res.statusText);
                  }
                  return res;
                });
              }),
            ];
          } catch (_err) {
            Logger.error("Unable to fetch asset '".concat(url, "'"));
          }
          return [2 /*return*/];
        });
      });
    };
    HTTPUtils.exponentialRetry = function (callback, currentRetryCount) {
      if (currentRetryCount === void 0) {
        currentRetryCount = 0;
      }
      return __awaiter(this, void 0, void 0, function () {
        var err_1, retryCount_1, defer_1;
        var _this = this;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4 /*yield*/, callback()];
            case 1:
              return [2 /*return*/, _a.sent()];
            case 2:
              err_1 = _a.sent();
              retryCount_1 = currentRetryCount + 1;
              if (retryCount_1 < this.MAX_RETRY_COUNT) {
                defer_1 = AsyncUtils.deferred();
                setTimeout(function () {
                  _this
                    .exponentialRetry(callback, retryCount_1)
                    .then(function () {
                      return defer_1.resolve();
                    })
                    .catch(function () {
                      return defer_1.reject();
                    });
                }, this.EXPONENTIAL_DELAY_FACTOR_IN_MS * retryCount_1);
                return [2 /*return*/, defer_1.promise];
              }
              throw err_1;
            case 3:
              return [2 /*return*/];
          }
        });
      });
    };
    HTTPUtils.MAX_RETRY_COUNT = 3;
    HTTPUtils.EXPONENTIAL_DELAY_FACTOR_IN_MS = 250;
    return HTTPUtils;
  })();

  var BaseModule = /** @class */ (function () {
    function BaseModule(source, callback) {
      this.source = source;
      this.value = "";
      this.callback = callback;
    }
    BaseModule.fetchWrapper = function (path) {
      var _a, _b;
      return __awaiter(this, void 0, void 0, function () {
        var value;
        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              if (
                !((_a = window.__MSFT_SDK[kind$1]) === null || _a === void 0
                  ? void 0
                  : _a.EventBus.hasListener(PublicEvents.FetchConfig))
              )
                return [3 /*break*/, 2];
              return [4 /*yield*/, EventUtils.fetch(path)];
            case 1:
              return [2 /*return*/, _c.sent()];
            case 2:
              return [4 /*yield*/, HTTPUtils.fetch(path)];
            case 3:
              value = _c.sent();
              return [
                4 /*yield*/,
                value === null || value === void 0 ? void 0 : value.text(),
              ];
            case 4:
              return [
                2 /*return*/,
                (_b = _c.sent()) !== null && _b !== void 0 ? _b : "",
              ];
          }
        });
      });
    };
    return BaseModule;
  })();

  var JavascriptModule = /** @class */ (function (_super) {
    __extends(JavascriptModule, _super);
    function JavascriptModule(source, callback) {
      return _super.call(this, source, callback) || this;
    }
    JavascriptModule.prototype.fetch = function () {
      return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              Logger.info("Fetching js module", this.source);
              if (!(this.source.type === ModuleSourceType.VARIABLE))
                return [3 /*break*/, 1];
              this.value = window[this.source.value];
              return [3 /*break*/, 3];
            case 1:
              _a = this;
              return [
                4 /*yield*/,
                JavascriptModule.fetchWrapper(this.source.value),
              ];
            case 2:
              _a.value = _b.sent();
              _b.label = 3;
            case 3:
              return [2 /*return*/];
          }
        });
      });
    };
    JavascriptModule.prototype.addToDOM = function () {
      return DomUtils.addScriptToDOM(this.value);
    };
    JavascriptModule.prototype.execute = function () {
      if (this.callback) {
        this.callback(this.value);
        return Promise.resolve();
      } else {
        return this.addToDOM();
      }
    };
    return JavascriptModule;
  })(BaseModule);

  var JSONModule = /** @class */ (function (_super) {
    __extends(JSONModule, _super);
    function JSONModule(source, callback) {
      return _super.call(this, source, callback) || this;
    }
    JSONModule.prototype.fetch = function () {
      var _a;
      return __awaiter(this, void 0, void 0, function () {
        var _b, _c, _d;
        return __generator(this, function (_e) {
          switch (_e.label) {
            case 0:
              Logger.info("Fetching json module", this.source);
              if (!(this.source.type === ModuleSourceType.VARIABLE))
                return [3 /*break*/, 1];
              this.value = window[this.source.value];
              return [3 /*break*/, 4];
            case 1:
              _e.trys.push([1, 3, , 4]);
              _b = this;
              _d = (_c = JSON).parse;
              return [4 /*yield*/, JSONModule.fetchWrapper(this.source.value)];
            case 2:
              _b.value = _d.apply(_c, [_e.sent()]);
              return [3 /*break*/, 4];
            case 3:
              _e.sent();
              Logger.error(
                "Error in fetching or parsing: ".concat(
                  (_a = this.source) === null || _a === void 0
                    ? void 0
                    : _a.value
                )
              );
              return [3 /*break*/, 4];
            case 4:
              return [2 /*return*/];
          }
        });
      });
    };
    JSONModule.prototype.execute = function () {
      if (this.callback && this.value) {
        this.callback(this.value);
        return Promise.resolve();
      }
      return Promise.reject(new Error("Callback not provided"));
    };
    return JSONModule;
  })(BaseModule);

  var DependencyManager = /** @class */ (function () {
    function DependencyManager() {}
    DependencyManager.resolveDependencies = function () {
      return __awaiter(this, void 0, void 0, function () {
        var _a,
          moduleMap,
          moduleDependency,
          assetsFetchingPromises,
          executionSequence;
        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              (_a = this.getModuleMapAndDependency()),
                (moduleMap = _a.moduleMap),
                (moduleDependency = _a.moduleDependency);
              assetsFetchingPromises = this.fetchAllAssets(moduleMap);
              executionSequence = GraphUtils.topologicalSort(moduleDependency);
              Logger.info("dependencies execution sequence", executionSequence);
              return [4 /*yield*/, Promise.all(assetsFetchingPromises)];
            case 1:
              _b.sent();
              executionSequence.forEach(function (id) {
                if (moduleMap[id]) {
                  moduleMap[id].forEach(function (asset) {
                    return asset.execute();
                  });
                }
              });
              return [2 /*return*/];
          }
        });
      });
    };
    DependencyManager.fetchAllAssets = function (moduleMap) {
      var promises = [];
      Object.values(moduleMap).forEach(function (assets) {
        assets.forEach(function (asset) {
          promises.push(asset.fetch());
        });
      });
      return promises;
    };
    DependencyManager.getModuleMapAndDependency = function () {
      var _this = this;
      var moduleMap = {};
      var moduleDependency = [];
      var _a = SDKDependency.getDependencies(),
        fields = _a.fields,
        modules = _a.modules;
      modules.forEach(function (_a) {
        var module = _a.module,
          source = _a.source,
          configs = _a.configs,
          condition = _a.condition,
          dependency = _a.dependency,
          callback = _a.callback;
        if (!condition || condition()) {
          moduleMap[module] = __spreadArray(
            [],
            __read(
              _this.getModuleTypeInstances({
                source: source,
                callback: callback,
                fields: fields,
              })
            ),
            false
          );
          moduleDependency.push([module, dependency || []]);
          if (configs) {
            moduleMap["".concat(module, ".configs")] = configs.reduce(function (
              acc,
              config
            ) {
              return acc.concat(
                _this.getModuleTypeInstances(
                  __assign(__assign({}, config), { fields: fields })
                )
              );
            },
            []);
            moduleDependency.push([module, ["".concat(module, ".configs")]]);
          }
        }
      });
      return { moduleMap: moduleMap, moduleDependency: moduleDependency };
    };
    DependencyManager.getModuleTypeInstances = function (_a) {
      var source = _a.source,
        callback = _a.callback,
        fields = _a.fields;
      if (source === undefined) return [];
      var modules = [];
      var extension = source.value.split(".").pop();
      if (source.type === ModuleSourceType.PATH) {
        var resolvedPaths = this.resolvePathFields({
          path: source.value,
          fields: fields,
        });
        resolvedPaths.forEach(function (path) {
          DependencyManager.addModuleResolver(
            {
              value: path,
              type: ModuleSourceType.PATH,
            },
            modules,
            extension,
            callback
          );
        });
      } else {
        DependencyManager.addModuleResolver(
          source,
          modules,
          extension,
          callback
        );
      }
      return modules;
    };
    DependencyManager.addModuleResolver = function (
      source,
      modules,
      extension,
      callback
    ) {
      switch (extension) {
        case "js":
          modules.push(new JavascriptModule(source, callback));
          break;
        case "json":
          if (!callback) {
            Logger.error(
              "No callback provided for json asset with "
                .concat(source.type, " '")
                .concat(source.value, "'. Skipping it.")
            );
          } else {
            modules.push(new JSONModule(source, callback));
          }
          break;
        default:
          Logger.error(
            "Cannot resolve dependency. Unknown extension identified for "
              .concat(source.type, " '")
              .concat(source.value, "'")
          );
      }
    };
    DependencyManager.resolvePathFields = function (_a) {
      var path = _a.path,
        fields = _a.fields;
      var matches = __spreadArray([], __read(path.matchAll(/\$(\w+)/g)), false);
      var paths = [path];
      matches.forEach(function (match) {
        var rawFieldValue = fields[match[1]];
        var fieldValues = Array.isArray(rawFieldValue)
          ? rawFieldValue
          : [rawFieldValue];
        var tempPaths = [];
        fieldValues.forEach(function (value) {
          paths.forEach(function (partialResolvedPath) {
            tempPaths.push(partialResolvedPath.replace(match[0], value));
          });
        });
        paths = tempPaths;
      });
      return paths;
    };
    return DependencyManager;
  })();

  var commonjsGlobal =
    typeof globalThis !== "undefined"
      ? globalThis
      : typeof window !== "undefined"
      ? window
      : typeof global !== "undefined"
      ? global
      : typeof self !== "undefined"
      ? self
      : {};

  var check = function (it) {
    return it && it.Math == Math && it;
  };

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global$e =
    // eslint-disable-next-line es/no-global-this -- safe
    check(typeof globalThis == "object" && globalThis) ||
    check(typeof window == "object" && window) ||
    // eslint-disable-next-line no-restricted-globals -- safe
    check(typeof self == "object" && self) ||
    check(typeof commonjsGlobal == "object" && commonjsGlobal) ||
    // eslint-disable-next-line no-new-func -- fallback
    (function () {
      return this;
    })() ||
    Function("return this")();

  var objectGetOwnPropertyDescriptor = {};

  var fails$h = function (exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };

  var fails$g = fails$h;

  // Detect IE8's incomplete defineProperty implementation
  var descriptors = !fails$g(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return (
      Object.defineProperty({}, 1, {
        get: function () {
          return 7;
        },
      })[1] != 7
    );
  });

  var fails$f = fails$h;

  var functionBindNative = !fails$f(function () {
    // eslint-disable-next-line es/no-function-prototype-bind -- safe
    var test = function () {
      /* empty */
    }.bind();
    // eslint-disable-next-line no-prototype-builtins -- safe
    return typeof test != "function" || test.hasOwnProperty("prototype");
  });

  var NATIVE_BIND$2 = functionBindNative;

  var call$b = Function.prototype.call;

  var functionCall = NATIVE_BIND$2
    ? call$b.bind(call$b)
    : function () {
        return call$b.apply(call$b, arguments);
      };

  var objectPropertyIsEnumerable = {};

  var $propertyIsEnumerable = {}.propertyIsEnumerable;
  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
  var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

  // Nashorn ~ JDK8 bug
  var NASHORN_BUG =
    getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({ 1: 2 }, 1);

  // `Object.prototype.propertyIsEnumerable` method implementation
  // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
  objectPropertyIsEnumerable.f = NASHORN_BUG
    ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor$1(this, V);
        return !!descriptor && descriptor.enumerable;
      }
    : $propertyIsEnumerable;

  var createPropertyDescriptor$3 = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value,
    };
  };

  var NATIVE_BIND$1 = functionBindNative;

  var FunctionPrototype$2 = Function.prototype;
  var call$a = FunctionPrototype$2.call;
  var uncurryThisWithBind =
    NATIVE_BIND$1 && FunctionPrototype$2.bind.bind(call$a, call$a);

  var functionUncurryThis = NATIVE_BIND$1
    ? uncurryThisWithBind
    : function (fn) {
        return function () {
          return call$a.apply(fn, arguments);
        };
      };

  var uncurryThis$h = functionUncurryThis;

  var toString$8 = uncurryThis$h({}.toString);
  var stringSlice$5 = uncurryThis$h("".slice);

  var classofRaw$2 = function (it) {
    return stringSlice$5(toString$8(it), 8, -1);
  };

  var uncurryThis$g = functionUncurryThis;
  var fails$e = fails$h;
  var classof$7 = classofRaw$2;

  var $Object$4 = Object;
  var split = uncurryThis$g("".split);

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var indexedObject = fails$e(function () {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins -- safe
    return !$Object$4("z").propertyIsEnumerable(0);
  })
    ? function (it) {
        return classof$7(it) == "String" ? split(it, "") : $Object$4(it);
      }
    : $Object$4;

  // we can't use just `it == null` since of `document.all` special case
  // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
  var isNullOrUndefined$6 = function (it) {
    return it === null || it === undefined;
  };

  var isNullOrUndefined$5 = isNullOrUndefined$6;

  var $TypeError$9 = TypeError;

  // `RequireObjectCoercible` abstract operation
  // https://tc39.es/ecma262/#sec-requireobjectcoercible
  var requireObjectCoercible$6 = function (it) {
    if (isNullOrUndefined$5(it))
      throw $TypeError$9("Can't call method on " + it);
    return it;
  };

  // toObject with fallback for non-array-like ES3 strings
  var IndexedObject = indexedObject;
  var requireObjectCoercible$5 = requireObjectCoercible$6;

  var toIndexedObject$4 = function (it) {
    return IndexedObject(requireObjectCoercible$5(it));
  };

  var documentAll$2 = typeof document == "object" && document.all;

  // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
  var IS_HTMLDDA =
    typeof documentAll$2 == "undefined" && documentAll$2 !== undefined;

  var documentAll_1 = {
    all: documentAll$2,
    IS_HTMLDDA: IS_HTMLDDA,
  };

  var $documentAll$1 = documentAll_1;

  var documentAll$1 = $documentAll$1.all;

  // `IsCallable` abstract operation
  // https://tc39.es/ecma262/#sec-iscallable
  var isCallable$h = $documentAll$1.IS_HTMLDDA
    ? function (argument) {
        return typeof argument == "function" || argument === documentAll$1;
      }
    : function (argument) {
        return typeof argument == "function";
      };

  var isCallable$g = isCallable$h;
  var $documentAll = documentAll_1;

  var documentAll = $documentAll.all;

  var isObject$7 = $documentAll.IS_HTMLDDA
    ? function (it) {
        return typeof it == "object"
          ? it !== null
          : isCallable$g(it) || it === documentAll;
      }
    : function (it) {
        return typeof it == "object" ? it !== null : isCallable$g(it);
      };

  var global$d = global$e;
  var isCallable$f = isCallable$h;

  var aFunction = function (argument) {
    return isCallable$f(argument) ? argument : undefined;
  };

  var getBuiltIn$5 = function (namespace, method) {
    return arguments.length < 2
      ? aFunction(global$d[namespace])
      : global$d[namespace] && global$d[namespace][method];
  };

  var uncurryThis$f = functionUncurryThis;

  var objectIsPrototypeOf = uncurryThis$f({}.isPrototypeOf);

  var getBuiltIn$4 = getBuiltIn$5;

  var engineUserAgent = getBuiltIn$4("navigator", "userAgent") || "";

  var global$c = global$e;
  var userAgent = engineUserAgent;

  var process = global$c.process;
  var Deno = global$c.Deno;
  var versions = (process && process.versions) || (Deno && Deno.version);
  var v8 = versions && versions.v8;
  var match, version;

  if (v8) {
    match = v8.split(".");
    // in old Chrome, versions of V8 isn't V8 = Chrome / 10
    // but their correct versions are not interesting for us
    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
  }

  // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
  // so check `userAgent` even if `.v8` exists, but 0
  if (!version && userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = userAgent.match(/Chrome\/(\d+)/);
      if (match) version = +match[1];
    }
  }

  var engineV8Version = version;

  /* eslint-disable es/no-symbol -- required for testing */

  var V8_VERSION = engineV8Version;
  var fails$d = fails$h;

  // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
  var symbolConstructorDetection =
    !!Object.getOwnPropertySymbols &&
    !fails$d(function () {
      var symbol = Symbol();
      // Chrome 38 Symbol has incorrect toString conversion
      // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
      return (
        !String(symbol) ||
        !(Object(symbol) instanceof Symbol) ||
        // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
        (!Symbol.sham && V8_VERSION && V8_VERSION < 41)
      );
    });

  /* eslint-disable es/no-symbol -- required for testing */

  var NATIVE_SYMBOL$1 = symbolConstructorDetection;

  var useSymbolAsUid =
    NATIVE_SYMBOL$1 && !Symbol.sham && typeof Symbol.iterator == "symbol";

  var getBuiltIn$3 = getBuiltIn$5;
  var isCallable$e = isCallable$h;
  var isPrototypeOf$1 = objectIsPrototypeOf;
  var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;

  var $Object$3 = Object;

  var isSymbol$2 = USE_SYMBOL_AS_UID$1
    ? function (it) {
        return typeof it == "symbol";
      }
    : function (it) {
        var $Symbol = getBuiltIn$3("Symbol");
        return (
          isCallable$e($Symbol) &&
          isPrototypeOf$1($Symbol.prototype, $Object$3(it))
        );
      };

  var $String$2 = String;

  var tryToString$2 = function (argument) {
    try {
      return $String$2(argument);
    } catch (error) {
      return "Object";
    }
  };

  var isCallable$d = isCallable$h;
  var tryToString$1 = tryToString$2;

  var $TypeError$8 = TypeError;

  // `Assert: IsCallable(argument) is true`
  var aCallable$1 = function (argument) {
    if (isCallable$d(argument)) return argument;
    throw $TypeError$8(tryToString$1(argument) + " is not a function");
  };

  var aCallable = aCallable$1;
  var isNullOrUndefined$4 = isNullOrUndefined$6;

  // `GetMethod` abstract operation
  // https://tc39.es/ecma262/#sec-getmethod
  var getMethod$4 = function (V, P) {
    var func = V[P];
    return isNullOrUndefined$4(func) ? undefined : aCallable(func);
  };

  var call$9 = functionCall;
  var isCallable$c = isCallable$h;
  var isObject$6 = isObject$7;

  var $TypeError$7 = TypeError;

  // `OrdinaryToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-ordinarytoprimitive
  var ordinaryToPrimitive$1 = function (input, pref) {
    var fn, val;
    if (
      pref === "string" &&
      isCallable$c((fn = input.toString)) &&
      !isObject$6((val = call$9(fn, input)))
    )
      return val;
    if (
      isCallable$c((fn = input.valueOf)) &&
      !isObject$6((val = call$9(fn, input)))
    )
      return val;
    if (
      pref !== "string" &&
      isCallable$c((fn = input.toString)) &&
      !isObject$6((val = call$9(fn, input)))
    )
      return val;
    throw $TypeError$7("Can't convert object to primitive value");
  };

  var shared$4 = { exports: {} };

  var isPure = false;

  var global$b = global$e;

  // eslint-disable-next-line es/no-object-defineproperty -- safe
  var defineProperty$2 = Object.defineProperty;

  var defineGlobalProperty$3 = function (key, value) {
    try {
      defineProperty$2(global$b, key, {
        value: value,
        configurable: true,
        writable: true,
      });
    } catch (error) {
      global$b[key] = value;
    }
    return value;
  };

  var global$a = global$e;
  var defineGlobalProperty$2 = defineGlobalProperty$3;

  var SHARED = "__core-js_shared__";
  var store$4 = global$a[SHARED] || defineGlobalProperty$2(SHARED, {});

  var sharedStore = store$4;

  var store$3 = sharedStore;

  (shared$4.exports = function (key, value) {
    return store$3[key] || (store$3[key] = value !== undefined ? value : {});
  })("versions", []).push({
    version: "3.26.1",
    mode: "global",
    copyright: "© 2014-2022 Denis Pushkarev (zloirock.ru)",
    license: "https://github.com/zloirock/core-js/blob/v3.26.1/LICENSE",
    source: "https://github.com/zloirock/core-js",
  });

  var requireObjectCoercible$4 = requireObjectCoercible$6;

  var $Object$2 = Object;

  // `ToObject` abstract operation
  // https://tc39.es/ecma262/#sec-toobject
  var toObject$3 = function (argument) {
    return $Object$2(requireObjectCoercible$4(argument));
  };

  var uncurryThis$e = functionUncurryThis;
  var toObject$2 = toObject$3;

  var hasOwnProperty = uncurryThis$e({}.hasOwnProperty);

  // `HasOwnProperty` abstract operation
  // https://tc39.es/ecma262/#sec-hasownproperty
  // eslint-disable-next-line es/no-object-hasown -- safe
  var hasOwnProperty_1 =
    Object.hasOwn ||
    function hasOwn(it, key) {
      return hasOwnProperty(toObject$2(it), key);
    };

  var uncurryThis$d = functionUncurryThis;

  var id = 0;
  var postfix = Math.random();
  var toString$7 = uncurryThis$d((1.0).toString);

  var uid$2 = function (key) {
    return (
      "Symbol(" +
      (key === undefined ? "" : key) +
      ")_" +
      toString$7(++id + postfix, 36)
    );
  };

  var global$9 = global$e;
  var shared$3 = shared$4.exports;
  var hasOwn$9 = hasOwnProperty_1;
  var uid$1 = uid$2;
  var NATIVE_SYMBOL = symbolConstructorDetection;
  var USE_SYMBOL_AS_UID = useSymbolAsUid;

  var WellKnownSymbolsStore = shared$3("wks");
  var Symbol$1 = global$9.Symbol;
  var symbolFor = Symbol$1 && Symbol$1["for"];
  var createWellKnownSymbol = USE_SYMBOL_AS_UID
    ? Symbol$1
    : (Symbol$1 && Symbol$1.withoutSetter) || uid$1;

  var wellKnownSymbol$b = function (name) {
    if (
      !hasOwn$9(WellKnownSymbolsStore, name) ||
      !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")
    ) {
      var description = "Symbol." + name;
      if (NATIVE_SYMBOL && hasOwn$9(Symbol$1, name)) {
        WellKnownSymbolsStore[name] = Symbol$1[name];
      } else if (USE_SYMBOL_AS_UID && symbolFor) {
        WellKnownSymbolsStore[name] = symbolFor(description);
      } else {
        WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
      }
    }
    return WellKnownSymbolsStore[name];
  };

  var call$8 = functionCall;
  var isObject$5 = isObject$7;
  var isSymbol$1 = isSymbol$2;
  var getMethod$3 = getMethod$4;
  var ordinaryToPrimitive = ordinaryToPrimitive$1;
  var wellKnownSymbol$a = wellKnownSymbol$b;

  var $TypeError$6 = TypeError;
  var TO_PRIMITIVE = wellKnownSymbol$a("toPrimitive");

  // `ToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-toprimitive
  var toPrimitive$1 = function (input, pref) {
    if (!isObject$5(input) || isSymbol$1(input)) return input;
    var exoticToPrim = getMethod$3(input, TO_PRIMITIVE);
    var result;
    if (exoticToPrim) {
      if (pref === undefined) pref = "default";
      result = call$8(exoticToPrim, input, pref);
      if (!isObject$5(result) || isSymbol$1(result)) return result;
      throw $TypeError$6("Can't convert object to primitive value");
    }
    if (pref === undefined) pref = "number";
    return ordinaryToPrimitive(input, pref);
  };

  var toPrimitive = toPrimitive$1;
  var isSymbol = isSymbol$2;

  // `ToPropertyKey` abstract operation
  // https://tc39.es/ecma262/#sec-topropertykey
  var toPropertyKey$2 = function (argument) {
    var key = toPrimitive(argument, "string");
    return isSymbol(key) ? key : key + "";
  };

  var global$8 = global$e;
  var isObject$4 = isObject$7;

  var document$1 = global$8.document;
  // typeof document.createElement is 'object' in old IE
  var EXISTS$1 = isObject$4(document$1) && isObject$4(document$1.createElement);

  var documentCreateElement$1 = function (it) {
    return EXISTS$1 ? document$1.createElement(it) : {};
  };

  var DESCRIPTORS$7 = descriptors;
  var fails$c = fails$h;
  var createElement = documentCreateElement$1;

  // Thanks to IE8 for its funny defineProperty
  var ie8DomDefine =
    !DESCRIPTORS$7 &&
    !fails$c(function () {
      // eslint-disable-next-line es/no-object-defineproperty -- required for testing
      return (
        Object.defineProperty(createElement("div"), "a", {
          get: function () {
            return 7;
          },
        }).a != 7
      );
    });

  var DESCRIPTORS$6 = descriptors;
  var call$7 = functionCall;
  var propertyIsEnumerableModule = objectPropertyIsEnumerable;
  var createPropertyDescriptor$2 = createPropertyDescriptor$3;
  var toIndexedObject$3 = toIndexedObject$4;
  var toPropertyKey$1 = toPropertyKey$2;
  var hasOwn$8 = hasOwnProperty_1;
  var IE8_DOM_DEFINE$1 = ie8DomDefine;

  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
  var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
  objectGetOwnPropertyDescriptor.f = DESCRIPTORS$6
    ? $getOwnPropertyDescriptor$1
    : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject$3(O);
        P = toPropertyKey$1(P);
        if (IE8_DOM_DEFINE$1)
          try {
            return $getOwnPropertyDescriptor$1(O, P);
          } catch (error) {
            /* empty */
          }
        if (hasOwn$8(O, P))
          return createPropertyDescriptor$2(
            !call$7(propertyIsEnumerableModule.f, O, P),
            O[P]
          );
      };

  var objectDefineProperty = {};

  var DESCRIPTORS$5 = descriptors;
  var fails$b = fails$h;

  // V8 ~ Chrome 36-
  // https://bugs.chromium.org/p/v8/issues/detail?id=3334
  var v8PrototypeDefineBug =
    DESCRIPTORS$5 &&
    fails$b(function () {
      // eslint-disable-next-line es/no-object-defineproperty -- required for testing
      return (
        Object.defineProperty(
          function () {
            /* empty */
          },
          "prototype",
          {
            value: 42,
            writable: false,
          }
        ).prototype != 42
      );
    });

  var isObject$3 = isObject$7;

  var $String$1 = String;
  var $TypeError$5 = TypeError;

  // `Assert: Type(argument) is Object`
  var anObject$9 = function (argument) {
    if (isObject$3(argument)) return argument;
    throw $TypeError$5($String$1(argument) + " is not an object");
  };

  var DESCRIPTORS$4 = descriptors;
  var IE8_DOM_DEFINE = ie8DomDefine;
  var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
  var anObject$8 = anObject$9;
  var toPropertyKey = toPropertyKey$2;

  var $TypeError$4 = TypeError;
  // eslint-disable-next-line es/no-object-defineproperty -- safe
  var $defineProperty = Object.defineProperty;
  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var ENUMERABLE = "enumerable";
  var CONFIGURABLE$1 = "configurable";
  var WRITABLE = "writable";

  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  objectDefineProperty.f = DESCRIPTORS$4
    ? V8_PROTOTYPE_DEFINE_BUG$1
      ? function defineProperty(O, P, Attributes) {
          anObject$8(O);
          P = toPropertyKey(P);
          anObject$8(Attributes);
          if (
            typeof O === "function" &&
            P === "prototype" &&
            "value" in Attributes &&
            WRITABLE in Attributes &&
            !Attributes[WRITABLE]
          ) {
            var current = $getOwnPropertyDescriptor(O, P);
            if (current && current[WRITABLE]) {
              O[P] = Attributes.value;
              Attributes = {
                configurable:
                  CONFIGURABLE$1 in Attributes
                    ? Attributes[CONFIGURABLE$1]
                    : current[CONFIGURABLE$1],
                enumerable:
                  ENUMERABLE in Attributes
                    ? Attributes[ENUMERABLE]
                    : current[ENUMERABLE],
                writable: false,
              };
            }
          }
          return $defineProperty(O, P, Attributes);
        }
      : $defineProperty
    : function defineProperty(O, P, Attributes) {
        anObject$8(O);
        P = toPropertyKey(P);
        anObject$8(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return $defineProperty(O, P, Attributes);
          } catch (error) {
            /* empty */
          }
        if ("get" in Attributes || "set" in Attributes)
          throw $TypeError$4("Accessors not supported");
        if ("value" in Attributes) O[P] = Attributes.value;
        return O;
      };

  var DESCRIPTORS$3 = descriptors;
  var definePropertyModule$3 = objectDefineProperty;
  var createPropertyDescriptor$1 = createPropertyDescriptor$3;

  var createNonEnumerableProperty$3 = DESCRIPTORS$3
    ? function (object, key, value) {
        return definePropertyModule$3.f(
          object,
          key,
          createPropertyDescriptor$1(1, value)
        );
      }
    : function (object, key, value) {
        object[key] = value;
        return object;
      };

  var makeBuiltIn$2 = { exports: {} };

  var DESCRIPTORS$2 = descriptors;
  var hasOwn$7 = hasOwnProperty_1;

  var FunctionPrototype$1 = Function.prototype;
  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
  var getDescriptor = DESCRIPTORS$2 && Object.getOwnPropertyDescriptor;

  var EXISTS = hasOwn$7(FunctionPrototype$1, "name");
  // additional protection from minified / mangled / dropped function names
  var PROPER =
    EXISTS &&
    function something() {
      /* empty */
    }.name === "something";
  var CONFIGURABLE =
    EXISTS &&
    (!DESCRIPTORS$2 ||
      (DESCRIPTORS$2 &&
        getDescriptor(FunctionPrototype$1, "name").configurable));

  var functionName = {
    EXISTS: EXISTS,
    PROPER: PROPER,
    CONFIGURABLE: CONFIGURABLE,
  };

  var uncurryThis$c = functionUncurryThis;
  var isCallable$b = isCallable$h;
  var store$2 = sharedStore;

  var functionToString = uncurryThis$c(Function.toString);

  // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
  if (!isCallable$b(store$2.inspectSource)) {
    store$2.inspectSource = function (it) {
      return functionToString(it);
    };
  }

  var inspectSource$2 = store$2.inspectSource;

  var global$7 = global$e;
  var isCallable$a = isCallable$h;

  var WeakMap$1 = global$7.WeakMap;

  var weakMapBasicDetection =
    isCallable$a(WeakMap$1) && /native code/.test(String(WeakMap$1));

  var shared$2 = shared$4.exports;
  var uid = uid$2;

  var keys = shared$2("keys");

  var sharedKey$3 = function (key) {
    return keys[key] || (keys[key] = uid(key));
  };

  var hiddenKeys$4 = {};

  var NATIVE_WEAK_MAP = weakMapBasicDetection;
  var global$6 = global$e;
  var isObject$2 = isObject$7;
  var createNonEnumerableProperty$2 = createNonEnumerableProperty$3;
  var hasOwn$6 = hasOwnProperty_1;
  var shared$1 = sharedStore;
  var sharedKey$2 = sharedKey$3;
  var hiddenKeys$3 = hiddenKeys$4;

  var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
  var TypeError$1 = global$6.TypeError;
  var WeakMap = global$6.WeakMap;
  var set, get, has;

  var enforce = function (it) {
    return has(it) ? get(it) : set(it, {});
  };

  var getterFor = function (TYPE) {
    return function (it) {
      var state;
      if (!isObject$2(it) || (state = get(it)).type !== TYPE) {
        throw TypeError$1("Incompatible receiver, " + TYPE + " required");
      }
      return state;
    };
  };

  if (NATIVE_WEAK_MAP || shared$1.state) {
    var store$1 = shared$1.state || (shared$1.state = new WeakMap());
    /* eslint-disable no-self-assign -- prototype methods protection */
    store$1.get = store$1.get;
    store$1.has = store$1.has;
    store$1.set = store$1.set;
    /* eslint-enable no-self-assign -- prototype methods protection */
    set = function (it, metadata) {
      if (store$1.has(it)) throw TypeError$1(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      store$1.set(it, metadata);
      return metadata;
    };
    get = function (it) {
      return store$1.get(it) || {};
    };
    has = function (it) {
      return store$1.has(it);
    };
  } else {
    var STATE = sharedKey$2("state");
    hiddenKeys$3[STATE] = true;
    set = function (it, metadata) {
      if (hasOwn$6(it, STATE)) throw TypeError$1(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      createNonEnumerableProperty$2(it, STATE, metadata);
      return metadata;
    };
    get = function (it) {
      return hasOwn$6(it, STATE) ? it[STATE] : {};
    };
    has = function (it) {
      return hasOwn$6(it, STATE);
    };
  }

  var internalState = {
    set: set,
    get: get,
    has: has,
    enforce: enforce,
    getterFor: getterFor,
  };

  var fails$a = fails$h;
  var isCallable$9 = isCallable$h;
  var hasOwn$5 = hasOwnProperty_1;
  var DESCRIPTORS$1 = descriptors;
  var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
  var inspectSource$1 = inspectSource$2;
  var InternalStateModule$1 = internalState;

  var enforceInternalState = InternalStateModule$1.enforce;
  var getInternalState$2 = InternalStateModule$1.get;
  // eslint-disable-next-line es/no-object-defineproperty -- safe
  var defineProperty$1 = Object.defineProperty;

  var CONFIGURABLE_LENGTH =
    DESCRIPTORS$1 &&
    !fails$a(function () {
      return (
        defineProperty$1(
          function () {
            /* empty */
          },
          "length",
          { value: 8 }
        ).length !== 8
      );
    });

  var TEMPLATE = String(String).split("String");

  var makeBuiltIn$1 = (makeBuiltIn$2.exports = function (value, name, options) {
    if (String(name).slice(0, 7) === "Symbol(") {
      name = "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
    }
    if (options && options.getter) name = "get " + name;
    if (options && options.setter) name = "set " + name;
    if (
      !hasOwn$5(value, "name") ||
      (CONFIGURABLE_FUNCTION_NAME && value.name !== name)
    ) {
      if (DESCRIPTORS$1)
        defineProperty$1(value, "name", { value: name, configurable: true });
      else value.name = name;
    }
    if (
      CONFIGURABLE_LENGTH &&
      options &&
      hasOwn$5(options, "arity") &&
      value.length !== options.arity
    ) {
      defineProperty$1(value, "length", { value: options.arity });
    }
    try {
      if (options && hasOwn$5(options, "constructor") && options.constructor) {
        if (DESCRIPTORS$1)
          defineProperty$1(value, "prototype", { writable: false });
        // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
      } else if (value.prototype) value.prototype = undefined;
    } catch (error) {
      /* empty */
    }
    var state = enforceInternalState(value);
    if (!hasOwn$5(state, "source")) {
      state.source = TEMPLATE.join(typeof name == "string" ? name : "");
    }
    return value;
  });

  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  // eslint-disable-next-line no-extend-native -- required
  Function.prototype.toString = makeBuiltIn$1(function toString() {
    return (
      (isCallable$9(this) && getInternalState$2(this).source) ||
      inspectSource$1(this)
    );
  }, "toString");

  var isCallable$8 = isCallable$h;
  var definePropertyModule$2 = objectDefineProperty;
  var makeBuiltIn = makeBuiltIn$2.exports;
  var defineGlobalProperty$1 = defineGlobalProperty$3;

  var defineBuiltIn$5 = function (O, key, value, options) {
    if (!options) options = {};
    var simple = options.enumerable;
    var name = options.name !== undefined ? options.name : key;
    if (isCallable$8(value)) makeBuiltIn(value, name, options);
    if (options.global) {
      if (simple) O[key] = value;
      else defineGlobalProperty$1(key, value);
    } else {
      try {
        if (!options.unsafe) delete O[key];
        else if (O[key]) simple = true;
      } catch (error) {
        /* empty */
      }
      if (simple) O[key] = value;
      else
        definePropertyModule$2.f(O, key, {
          value: value,
          enumerable: false,
          configurable: !options.nonConfigurable,
          writable: !options.nonWritable,
        });
    }
    return O;
  };

  var objectGetOwnPropertyNames = {};

  var ceil = Math.ceil;
  var floor$1 = Math.floor;

  // `Math.trunc` method
  // https://tc39.es/ecma262/#sec-math.trunc
  // eslint-disable-next-line es/no-math-trunc -- safe
  var mathTrunc =
    Math.trunc ||
    function trunc(x) {
      var n = +x;
      return (n > 0 ? floor$1 : ceil)(n);
    };

  var trunc = mathTrunc;

  // `ToIntegerOrInfinity` abstract operation
  // https://tc39.es/ecma262/#sec-tointegerorinfinity
  var toIntegerOrInfinity$4 = function (argument) {
    var number = +argument;
    // eslint-disable-next-line no-self-compare -- NaN check
    return number !== number || number === 0 ? 0 : trunc(number);
  };

  var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;

  var max$2 = Math.max;
  var min$2 = Math.min;

  // Helper for a popular repeating case of the spec:
  // Let integer be ? ToInteger(index).
  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
  var toAbsoluteIndex$1 = function (index, length) {
    var integer = toIntegerOrInfinity$3(index);
    return integer < 0 ? max$2(integer + length, 0) : min$2(integer, length);
  };

  var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;

  var min$1 = Math.min;

  // `ToLength` abstract operation
  // https://tc39.es/ecma262/#sec-tolength
  var toLength$3 = function (argument) {
    return argument > 0
      ? min$1(toIntegerOrInfinity$2(argument), 0x1fffffffffffff)
      : 0; // 2 ** 53 - 1 == 9007199254740991
  };

  var toLength$2 = toLength$3;

  // `LengthOfArrayLike` abstract operation
  // https://tc39.es/ecma262/#sec-lengthofarraylike
  var lengthOfArrayLike$1 = function (obj) {
    return toLength$2(obj.length);
  };

  var toIndexedObject$2 = toIndexedObject$4;
  var toAbsoluteIndex = toAbsoluteIndex$1;
  var lengthOfArrayLike = lengthOfArrayLike$1;

  // `Array.prototype.{ indexOf, includes }` methods implementation
  var createMethod$1 = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIndexedObject$2($this);
      var length = lengthOfArrayLike(O);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare -- NaN check
      if (IS_INCLUDES && el != el)
        while (length > index) {
          value = O[index++];
          // eslint-disable-next-line no-self-compare -- NaN check
          if (value != value) return true;
          // Array#indexOf ignores holes, Array#includes - not
        }
      else
        for (; length > index; index++) {
          if ((IS_INCLUDES || index in O) && O[index] === el)
            return IS_INCLUDES || index || 0;
        }
      return !IS_INCLUDES && -1;
    };
  };

  var arrayIncludes = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod$1(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod$1(false),
  };

  var uncurryThis$b = functionUncurryThis;
  var hasOwn$4 = hasOwnProperty_1;
  var toIndexedObject$1 = toIndexedObject$4;
  var indexOf$2 = arrayIncludes.indexOf;
  var hiddenKeys$2 = hiddenKeys$4;

  var push$1 = uncurryThis$b([].push);

  var objectKeysInternal = function (object, names) {
    var O = toIndexedObject$1(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O)
      !hasOwn$4(hiddenKeys$2, key) && hasOwn$4(O, key) && push$1(result, key);
    // Don't enum bug & hidden keys
    while (names.length > i)
      if (hasOwn$4(O, (key = names[i++]))) {
        ~indexOf$2(result, key) || push$1(result, key);
      }
    return result;
  };

  // IE8- don't enum bug keys
  var enumBugKeys$3 = [
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf",
  ];

  var internalObjectKeys$1 = objectKeysInternal;
  var enumBugKeys$2 = enumBugKeys$3;

  var hiddenKeys$1 = enumBugKeys$2.concat("length", "prototype");

  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  // eslint-disable-next-line es/no-object-getownpropertynames -- safe
  objectGetOwnPropertyNames.f =
    Object.getOwnPropertyNames ||
    function getOwnPropertyNames(O) {
      return internalObjectKeys$1(O, hiddenKeys$1);
    };

  var objectGetOwnPropertySymbols = {};

  // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
  objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

  var getBuiltIn$2 = getBuiltIn$5;
  var uncurryThis$a = functionUncurryThis;
  var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
  var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
  var anObject$7 = anObject$9;

  var concat$1 = uncurryThis$a([].concat);

  // all object keys, includes non-enumerable and symbols
  var ownKeys$1 =
    getBuiltIn$2("Reflect", "ownKeys") ||
    function ownKeys(it) {
      var keys = getOwnPropertyNamesModule.f(anObject$7(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return getOwnPropertySymbols
        ? concat$1(keys, getOwnPropertySymbols(it))
        : keys;
    };

  var hasOwn$3 = hasOwnProperty_1;
  var ownKeys = ownKeys$1;
  var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
  var definePropertyModule$1 = objectDefineProperty;

  var copyConstructorProperties$1 = function (target, source, exceptions) {
    var keys = ownKeys(source);
    var defineProperty = definePropertyModule$1.f;
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (
        !hasOwn$3(target, key) &&
        !(exceptions && hasOwn$3(exceptions, key))
      ) {
        defineProperty(target, key, getOwnPropertyDescriptor(source, key));
      }
    }
  };

  var fails$9 = fails$h;
  var isCallable$7 = isCallable$h;

  var replacement = /#|\.prototype\./;

  var isForced$1 = function (feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL
      ? true
      : value == NATIVE
      ? false
      : isCallable$7(detection)
      ? fails$9(detection)
      : !!detection;
  };

  var normalize = (isForced$1.normalize = function (string) {
    return String(string).replace(replacement, ".").toLowerCase();
  });

  var data = (isForced$1.data = {});
  var NATIVE = (isForced$1.NATIVE = "N");
  var POLYFILL = (isForced$1.POLYFILL = "P");

  var isForced_1 = isForced$1;

  var global$5 = global$e;
  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
  var createNonEnumerableProperty$1 = createNonEnumerableProperty$3;
  var defineBuiltIn$4 = defineBuiltIn$5;
  var defineGlobalProperty = defineGlobalProperty$3;
  var copyConstructorProperties = copyConstructorProperties$1;
  var isForced = isForced_1;

  /*
      options.target         - name of the target object
      options.global         - target is the global object
      options.stat           - export as static methods of target
      options.proto          - export as prototype methods of target
      options.real           - real prototype method for the `pure` version
      options.forced         - export even if the native feature is available
      options.bind           - bind methods to the target, required for the `pure` version
      options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
      options.unsafe         - use the simple assignment of property instead of delete + defineProperty
      options.sham           - add a flag to not completely full polyfills
      options.enumerable     - export as enumerable property
      options.dontCallGetSet - prevent calling a getter on target
      options.name           - the .name of the function if it does not match the key
    */
  var _export = function (options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) {
      target = global$5;
    } else if (STATIC) {
      target = global$5[TARGET] || defineGlobalProperty(TARGET, {});
    } else {
      target = (global$5[TARGET] || {}).prototype;
    }
    if (target)
      for (key in source) {
        sourceProperty = source[key];
        if (options.dontCallGetSet) {
          descriptor = getOwnPropertyDescriptor(target, key);
          targetProperty = descriptor && descriptor.value;
        } else targetProperty = target[key];
        FORCED = isForced(
          GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key,
          options.forced
        );
        // contained in target
        if (!FORCED && targetProperty !== undefined) {
          if (typeof sourceProperty == typeof targetProperty) continue;
          copyConstructorProperties(sourceProperty, targetProperty);
        }
        // add a flag to not completely full polyfills
        if (options.sham || (targetProperty && targetProperty.sham)) {
          createNonEnumerableProperty$1(sourceProperty, "sham", true);
        }
        defineBuiltIn$4(target, key, sourceProperty, options);
      }
  };

  var wellKnownSymbol$9 = wellKnownSymbol$b;

  var TO_STRING_TAG$2 = wellKnownSymbol$9("toStringTag");
  var test = {};

  test[TO_STRING_TAG$2] = "z";

  var toStringTagSupport = String(test) === "[object z]";

  var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
  var isCallable$6 = isCallable$h;
  var classofRaw$1 = classofRaw$2;
  var wellKnownSymbol$8 = wellKnownSymbol$b;

  var TO_STRING_TAG$1 = wellKnownSymbol$8("toStringTag");
  var $Object$1 = Object;

  // ES3 wrong here
  var CORRECT_ARGUMENTS =
    classofRaw$1(
      (function () {
        return arguments;
      })()
    ) == "Arguments";

  // fallback for IE11 Script Access Denied error
  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (error) {
      /* empty */
    }
  };

  // getting tag from ES6+ `Object.prototype.toString`
  var classof$6 = TO_STRING_TAG_SUPPORT$2
    ? classofRaw$1
    : function (it) {
        var O, tag, result;
        return it === undefined
          ? "Undefined"
          : it === null
          ? "Null"
          : // @@toStringTag case
          typeof (tag = tryGet((O = $Object$1(it)), TO_STRING_TAG$1)) ==
            "string"
          ? tag
          : // builtinTag case
          CORRECT_ARGUMENTS
          ? classofRaw$1(O)
          : // ES3 arguments fallback
          (result = classofRaw$1(O)) == "Object" && isCallable$6(O.callee)
          ? "Arguments"
          : result;
      };

  var classof$5 = classof$6;

  var $String = String;

  var toString$6 = function (argument) {
    if (classof$5(argument) === "Symbol")
      throw TypeError("Cannot convert a Symbol value to a string");
    return $String(argument);
  };

  var anObject$6 = anObject$9;

  // `RegExp.prototype.flags` getter implementation
  // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
  var regexpFlags$1 = function () {
    var that = anObject$6(this);
    var result = "";
    if (that.hasIndices) result += "d";
    if (that.global) result += "g";
    if (that.ignoreCase) result += "i";
    if (that.multiline) result += "m";
    if (that.dotAll) result += "s";
    if (that.unicode) result += "u";
    if (that.unicodeSets) result += "v";
    if (that.sticky) result += "y";
    return result;
  };

  var fails$8 = fails$h;
  var global$4 = global$e;

  // babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var $RegExp$2 = global$4.RegExp;

  var UNSUPPORTED_Y$1 = fails$8(function () {
    var re = $RegExp$2("a", "y");
    re.lastIndex = 2;
    return re.exec("abcd") != null;
  });

  // UC Browser bug
  // https://github.com/zloirock/core-js/issues/1008
  var MISSED_STICKY =
    UNSUPPORTED_Y$1 ||
    fails$8(function () {
      return !$RegExp$2("a", "y").sticky;
    });

  var BROKEN_CARET =
    UNSUPPORTED_Y$1 ||
    fails$8(function () {
      // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
      var re = $RegExp$2("^r", "gy");
      re.lastIndex = 2;
      return re.exec("str") != null;
    });

  var regexpStickyHelpers = {
    BROKEN_CARET: BROKEN_CARET,
    MISSED_STICKY: MISSED_STICKY,
    UNSUPPORTED_Y: UNSUPPORTED_Y$1,
  };

  var objectDefineProperties = {};

  var internalObjectKeys = objectKeysInternal;
  var enumBugKeys$1 = enumBugKeys$3;

  // `Object.keys` method
  // https://tc39.es/ecma262/#sec-object.keys
  // eslint-disable-next-line es/no-object-keys -- safe
  var objectKeys$1 =
    Object.keys ||
    function keys(O) {
      return internalObjectKeys(O, enumBugKeys$1);
    };

  var DESCRIPTORS = descriptors;
  var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
  var definePropertyModule = objectDefineProperty;
  var anObject$5 = anObject$9;
  var toIndexedObject = toIndexedObject$4;
  var objectKeys = objectKeys$1;

  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  // eslint-disable-next-line es/no-object-defineproperties -- safe
  objectDefineProperties.f =
    DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG
      ? Object.defineProperties
      : function defineProperties(O, Properties) {
          anObject$5(O);
          var props = toIndexedObject(Properties);
          var keys = objectKeys(Properties);
          var length = keys.length;
          var index = 0;
          var key;
          while (length > index)
            definePropertyModule.f(O, (key = keys[index++]), props[key]);
          return O;
        };

  var getBuiltIn$1 = getBuiltIn$5;

  var html$1 = getBuiltIn$1("document", "documentElement");

  /* global ActiveXObject -- old IE, WSH */

  var anObject$4 = anObject$9;
  var definePropertiesModule = objectDefineProperties;
  var enumBugKeys = enumBugKeys$3;
  var hiddenKeys = hiddenKeys$4;
  var html = html$1;
  var documentCreateElement = documentCreateElement$1;
  var sharedKey$1 = sharedKey$3;

  var GT = ">";
  var LT = "<";
  var PROTOTYPE = "prototype";
  var SCRIPT = "script";
  var IE_PROTO$1 = sharedKey$1("IE_PROTO");

  var EmptyConstructor = function () {
    /* empty */
  };

  var scriptTag = function (content) {
    return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
  };

  // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
  var NullProtoObjectViaActiveX = function (activeXDocument) {
    activeXDocument.write(scriptTag(""));
    activeXDocument.close();
    var temp = activeXDocument.parentWindow.Object;
    activeXDocument = null; // avoid memory leak
    return temp;
  };

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var NullProtoObjectViaIFrame = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement("iframe");
    var JS = "java" + SCRIPT + ":";
    var iframeDocument;
    iframe.style.display = "none";
    html.appendChild(iframe);
    // https://github.com/zloirock/core-js/issues/475
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag("document.F=Object"));
    iframeDocument.close();
    return iframeDocument.F;
  };

  // Check for document.domain and active x support
  // No need to use active x approach when document.domain is not set
  // see https://github.com/es-shims/es5-shim/issues/150
  // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
  // avoid IE GC bug
  var activeXDocument;
  var NullProtoObject = function () {
    try {
      activeXDocument = new ActiveXObject("htmlfile");
    } catch (error) {
      /* ignore */
    }
    NullProtoObject =
      typeof document != "undefined"
        ? document.domain && activeXDocument
          ? NullProtoObjectViaActiveX(activeXDocument) // old IE
          : NullProtoObjectViaIFrame()
        : NullProtoObjectViaActiveX(activeXDocument); // WSH
    var length = enumBugKeys.length;
    while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
    return NullProtoObject();
  };

  hiddenKeys[IE_PROTO$1] = true;

  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  // eslint-disable-next-line es/no-object-create -- safe
  var objectCreate =
    Object.create ||
    function create(O, Properties) {
      var result;
      if (O !== null) {
        EmptyConstructor[PROTOTYPE] = anObject$4(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO$1] = O;
      } else result = NullProtoObject();
      return Properties === undefined
        ? result
        : definePropertiesModule.f(result, Properties);
    };

  var fails$7 = fails$h;
  var global$3 = global$e;

  // babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
  var $RegExp$1 = global$3.RegExp;

  var regexpUnsupportedDotAll = fails$7(function () {
    var re = $RegExp$1(".", "s");
    return !(re.dotAll && re.exec("\n") && re.flags === "s");
  });

  var fails$6 = fails$h;
  var global$2 = global$e;

  // babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
  var $RegExp = global$2.RegExp;

  var regexpUnsupportedNcg = fails$6(function () {
    var re = $RegExp("(?<a>b)", "g");
    return re.exec("b").groups.a !== "b" || "b".replace(re, "$<a>c") !== "bc";
  });

  /* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
  /* eslint-disable regexp/no-useless-quantifier -- testing */
  var call$6 = functionCall;
  var uncurryThis$9 = functionUncurryThis;
  var toString$5 = toString$6;
  var regexpFlags = regexpFlags$1;
  var stickyHelpers = regexpStickyHelpers;
  var shared = shared$4.exports;
  var create$1 = objectCreate;
  var getInternalState$1 = internalState.get;
  var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
  var UNSUPPORTED_NCG = regexpUnsupportedNcg;

  var nativeReplace = shared("native-string-replace", String.prototype.replace);
  var nativeExec = RegExp.prototype.exec;
  var patchedExec = nativeExec;
  var charAt$3 = uncurryThis$9("".charAt);
  var indexOf$1 = uncurryThis$9("".indexOf);
  var replace$1 = uncurryThis$9("".replace);
  var stringSlice$4 = uncurryThis$9("".slice);

  var UPDATES_LAST_INDEX_WRONG = (function () {
    var re1 = /a/;
    var re2 = /b*/g;
    call$6(nativeExec, re1, "a");
    call$6(nativeExec, re2, "a");
    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
  })();

  var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;

  // nonparticipating capturing group, copied from es5-shim's String#split patch.
  var NPCG_INCLUDED = /()??/.exec("")[1] !== undefined;

  var PATCH =
    UPDATES_LAST_INDEX_WRONG ||
    NPCG_INCLUDED ||
    UNSUPPORTED_Y ||
    UNSUPPORTED_DOT_ALL ||
    UNSUPPORTED_NCG;

  if (PATCH) {
    patchedExec = function exec(string) {
      var re = this;
      var state = getInternalState$1(re);
      var str = toString$5(string);
      var raw = state.raw;
      var result, reCopy, lastIndex, match, i, object, group;

      if (raw) {
        raw.lastIndex = re.lastIndex;
        result = call$6(patchedExec, raw, str);
        re.lastIndex = raw.lastIndex;
        return result;
      }

      var groups = state.groups;
      var sticky = UNSUPPORTED_Y && re.sticky;
      var flags = call$6(regexpFlags, re);
      var source = re.source;
      var charsAdded = 0;
      var strCopy = str;

      if (sticky) {
        flags = replace$1(flags, "y", "");
        if (indexOf$1(flags, "g") === -1) {
          flags += "g";
        }

        strCopy = stringSlice$4(str, re.lastIndex);
        // Support anchored sticky behavior.
        if (
          re.lastIndex > 0 &&
          (!re.multiline ||
            (re.multiline && charAt$3(str, re.lastIndex - 1) !== "\n"))
        ) {
          source = "(?: " + source + ")";
          strCopy = " " + strCopy;
          charsAdded++;
        }
        // ^(? + rx + ) is needed, in combination with some str slicing, to
        // simulate the 'y' flag.
        reCopy = new RegExp("^(?:" + source + ")", flags);
      }

      if (NPCG_INCLUDED) {
        reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
      }
      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

      match = call$6(nativeExec, sticky ? reCopy : re, strCopy);

      if (sticky) {
        if (match) {
          match.input = stringSlice$4(match.input, charsAdded);
          match[0] = stringSlice$4(match[0], charsAdded);
          match.index = re.lastIndex;
          re.lastIndex += match[0].length;
        } else re.lastIndex = 0;
      } else if (UPDATES_LAST_INDEX_WRONG && match) {
        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
      }
      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn't work for /(.?)?/
        call$6(nativeReplace, match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      if (match && groups) {
        match.groups = object = create$1(null);
        for (i = 0; i < groups.length; i++) {
          group = groups[i];
          object[group[0]] = match[group[1]];
        }
      }

      return match;
    };
  }

  var regexpExec$2 = patchedExec;

  var $$2 = _export;
  var exec$1 = regexpExec$2;

  // `RegExp.prototype.exec` method
  // https://tc39.es/ecma262/#sec-regexp.prototype.exec
  $$2(
    { target: "RegExp", proto: true, forced: /./.exec !== exec$1 },
    {
      exec: exec$1,
    }
  );

  var NATIVE_BIND = functionBindNative;

  var FunctionPrototype = Function.prototype;
  var apply$1 = FunctionPrototype.apply;
  var call$5 = FunctionPrototype.call;

  // eslint-disable-next-line es/no-reflect -- safe
  var functionApply =
    (typeof Reflect == "object" && Reflect.apply) ||
    (NATIVE_BIND
      ? call$5.bind(apply$1)
      : function () {
          return call$5.apply(apply$1, arguments);
        });

  var classofRaw = classofRaw$2;
  var uncurryThis$8 = functionUncurryThis;

  var functionUncurryThisClause = function (fn) {
    // Nashorn bug:
    //   https://github.com/zloirock/core-js/issues/1128
    //   https://github.com/zloirock/core-js/issues/1130
    if (classofRaw(fn) === "Function") return uncurryThis$8(fn);
  };

  // TODO: Remove from `core-js@4` since it's moved to entry points

  var uncurryThis$7 = functionUncurryThisClause;
  var defineBuiltIn$3 = defineBuiltIn$5;
  var regexpExec$1 = regexpExec$2;
  var fails$5 = fails$h;
  var wellKnownSymbol$7 = wellKnownSymbol$b;
  var createNonEnumerableProperty = createNonEnumerableProperty$3;

  var SPECIES$1 = wellKnownSymbol$7("species");
  var RegExpPrototype$2 = RegExp.prototype;

  var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
    var SYMBOL = wellKnownSymbol$7(KEY);

    var DELEGATES_TO_SYMBOL = !fails$5(function () {
      // String methods call symbol-named RegEp methods
      var O = {};
      O[SYMBOL] = function () {
        return 7;
      };
      return ""[KEY](O) != 7;
    });

    var DELEGATES_TO_EXEC =
      DELEGATES_TO_SYMBOL &&
      !fails$5(function () {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;

        if (KEY === "split") {
          // We can't use real regex here since it causes deoptimization
          // and serious performance degradation in V8
          // https://github.com/zloirock/core-js/issues/306
          re = {};
          // RegExp[@@split] doesn't call the regex's exec method, but first creates
          // a new one. We need to return the patched regex when creating the new one.
          re.constructor = {};
          re.constructor[SPECIES$1] = function () {
            return re;
          };
          re.flags = "";
          re[SYMBOL] = /./[SYMBOL];
        }

        re.exec = function () {
          execCalled = true;
          return null;
        };

        re[SYMBOL]("");
        return !execCalled;
      });

    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
      var uncurriedNativeRegExpMethod = uncurryThis$7(/./[SYMBOL]);
      var methods = exec(
        SYMBOL,
        ""[KEY],
        function (nativeMethod, regexp, str, arg2, forceStringMethod) {
          var uncurriedNativeMethod = uncurryThis$7(nativeMethod);
          var $exec = regexp.exec;
          if ($exec === regexpExec$1 || $exec === RegExpPrototype$2.exec) {
            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
              // The native String method already delegates to @@method (this
              // polyfilled function), leasing to infinite recursion.
              // We avoid it by directly calling the native @@method method.
              return {
                done: true,
                value: uncurriedNativeRegExpMethod(regexp, str, arg2),
              };
            }
            return {
              done: true,
              value: uncurriedNativeMethod(str, regexp, arg2),
            };
          }
          return { done: false };
        }
      );

      defineBuiltIn$3(String.prototype, KEY, methods[0]);
      defineBuiltIn$3(RegExpPrototype$2, SYMBOL, methods[1]);
    }

    if (SHAM)
      createNonEnumerableProperty(RegExpPrototype$2[SYMBOL], "sham", true);
  };

  var uncurryThis$6 = functionUncurryThis;
  var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
  var toString$4 = toString$6;
  var requireObjectCoercible$3 = requireObjectCoercible$6;

  var charAt$2 = uncurryThis$6("".charAt);
  var charCodeAt = uncurryThis$6("".charCodeAt);
  var stringSlice$3 = uncurryThis$6("".slice);

  var createMethod = function (CONVERT_TO_STRING) {
    return function ($this, pos) {
      var S = toString$4(requireObjectCoercible$3($this));
      var position = toIntegerOrInfinity$1(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size)
        return CONVERT_TO_STRING ? "" : undefined;
      first = charCodeAt(S, position);
      return first < 0xd800 ||
        first > 0xdbff ||
        position + 1 === size ||
        (second = charCodeAt(S, position + 1)) < 0xdc00 ||
        second > 0xdfff
        ? CONVERT_TO_STRING
          ? charAt$2(S, position)
          : first
        : CONVERT_TO_STRING
        ? stringSlice$3(S, position, position + 2)
        : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
    };
  };

  var stringMultibyte = {
    // `String.prototype.codePointAt` method
    // https://tc39.es/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod(true),
  };

  var charAt$1 = stringMultibyte.charAt;

  // `AdvanceStringIndex` abstract operation
  // https://tc39.es/ecma262/#sec-advancestringindex
  var advanceStringIndex$2 = function (S, index, unicode) {
    return index + (unicode ? charAt$1(S, index).length : 1);
  };

  var uncurryThis$5 = functionUncurryThis;
  var toObject$1 = toObject$3;

  var floor = Math.floor;
  var charAt = uncurryThis$5("".charAt);
  var replace = uncurryThis$5("".replace);
  var stringSlice$2 = uncurryThis$5("".slice);
  var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

  // `GetSubstitution` abstract operation
  // https://tc39.es/ecma262/#sec-getsubstitution
  var getSubstitution$2 = function (
    matched,
    str,
    position,
    captures,
    namedCaptures,
    replacement
  ) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject$1(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return replace(replacement, symbols, function (match, ch) {
      var capture;
      switch (charAt(ch, 0)) {
        case "$":
          return "$";
        case "&":
          return matched;
        case "`":
          return stringSlice$2(str, 0, position);
        case "'":
          return stringSlice$2(str, tailPos);
        case "<":
          capture = namedCaptures[stringSlice$2(ch, 1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m)
              return captures[f - 1] === undefined
                ? charAt(ch, 1)
                : captures[f - 1] + charAt(ch, 1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? "" : capture;
    });
  };

  var call$4 = functionCall;
  var anObject$3 = anObject$9;
  var isCallable$5 = isCallable$h;
  var classof$4 = classofRaw$2;
  var regexpExec = regexpExec$2;

  var $TypeError$3 = TypeError;

  // `RegExpExec` abstract operation
  // https://tc39.es/ecma262/#sec-regexpexec
  var regexpExecAbstract = function (R, S) {
    var exec = R.exec;
    if (isCallable$5(exec)) {
      var result = call$4(exec, R, S);
      if (result !== null) anObject$3(result);
      return result;
    }
    if (classof$4(R) === "RegExp") return call$4(regexpExec, R, S);
    throw $TypeError$3("RegExp#exec called on incompatible receiver");
  };

  var apply = functionApply;
  var call$3 = functionCall;
  var uncurryThis$4 = functionUncurryThis;
  var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
  var fails$4 = fails$h;
  var anObject$2 = anObject$9;
  var isCallable$4 = isCallable$h;
  var isNullOrUndefined$3 = isNullOrUndefined$6;
  var toIntegerOrInfinity = toIntegerOrInfinity$4;
  var toLength$1 = toLength$3;
  var toString$3 = toString$6;
  var requireObjectCoercible$2 = requireObjectCoercible$6;
  var advanceStringIndex$1 = advanceStringIndex$2;
  var getMethod$2 = getMethod$4;
  var getSubstitution$1 = getSubstitution$2;
  var regExpExec$1 = regexpExecAbstract;
  var wellKnownSymbol$6 = wellKnownSymbol$b;

  var REPLACE$1 = wellKnownSymbol$6("replace");
  var max$1 = Math.max;
  var min = Math.min;
  var concat = uncurryThis$4([].concat);
  var push = uncurryThis$4([].push);
  var stringIndexOf$2 = uncurryThis$4("".indexOf);
  var stringSlice$1 = uncurryThis$4("".slice);

  var maybeToString = function (it) {
    return it === undefined ? it : String(it);
  };

  // IE <= 11 replaces $0 with the whole match, as if it was $&
  // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
  var REPLACE_KEEPS_$0 = (function () {
    // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
    return "a".replace(/./, "$0") === "$0";
  })();

  // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
    if (/./[REPLACE$1]) {
      return /./[REPLACE$1]("a", "$0") === "";
    }
    return false;
  })();

  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails$4(function () {
    var re = /./;
    re.exec = function () {
      var result = [];
      result.groups = { a: "7" };
      return result;
    };
    // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
    return "".replace(re, "$<a>") !== "7";
  });

  // @@replace logic
  fixRegExpWellKnownSymbolLogic(
    "replace",
    function (_, nativeReplace, maybeCallNative) {
      var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
        ? "$"
        : "$0";

      return [
        // `String.prototype.replace` method
        // https://tc39.es/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible$2(this);
          var replacer = isNullOrUndefined$3(searchValue)
            ? undefined
            : getMethod$2(searchValue, REPLACE$1);
          return replacer
            ? call$3(replacer, searchValue, O, replaceValue)
            : call$3(nativeReplace, toString$3(O), searchValue, replaceValue);
        },
        // `RegExp.prototype[@@replace]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
        function (string, replaceValue) {
          var rx = anObject$2(this);
          var S = toString$3(string);

          if (
            typeof replaceValue == "string" &&
            stringIndexOf$2(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
            stringIndexOf$2(replaceValue, "$<") === -1
          ) {
            var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
            if (res.done) return res.value;
          }

          var functionalReplace = isCallable$4(replaceValue);
          if (!functionalReplace) replaceValue = toString$3(replaceValue);

          var global = rx.global;
          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }
          var results = [];
          while (true) {
            var result = regExpExec$1(rx, S);
            if (result === null) break;

            push(results, result);
            if (!global) break;

            var matchStr = toString$3(result[0]);
            if (matchStr === "")
              rx.lastIndex = advanceStringIndex$1(
                S,
                toLength$1(rx.lastIndex),
                fullUnicode
              );
          }

          var accumulatedResult = "";
          var nextSourcePosition = 0;
          for (var i = 0; i < results.length; i++) {
            result = results[i];

            var matched = toString$3(result[0]);
            var position = max$1(
              min(toIntegerOrInfinity(result.index), S.length),
              0
            );
            var captures = [];
            // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
            for (var j = 1; j < result.length; j++)
              push(captures, maybeToString(result[j]));
            var namedCaptures = result.groups;
            if (functionalReplace) {
              var replacerArgs = concat([matched], captures, position, S);
              if (namedCaptures !== undefined)
                push(replacerArgs, namedCaptures);
              var replacement = toString$3(
                apply(replaceValue, undefined, replacerArgs)
              );
            } else {
              replacement = getSubstitution$1(
                matched,
                S,
                position,
                captures,
                namedCaptures,
                replaceValue
              );
            }
            if (position >= nextSourcePosition) {
              accumulatedResult +=
                stringSlice$1(S, nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }
          return accumulatedResult + stringSlice$1(S, nextSourcePosition);
        },
      ];
    },
    !REPLACE_SUPPORTS_NAMED_GROUPS ||
      !REPLACE_KEEPS_$0 ||
      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
  );

  var isObject$1 = isObject$7;
  var classof$3 = classofRaw$2;
  var wellKnownSymbol$5 = wellKnownSymbol$b;

  var MATCH = wellKnownSymbol$5("match");

  // `IsRegExp` abstract operation
  // https://tc39.es/ecma262/#sec-isregexp
  var isRegexp = function (it) {
    var isRegExp;
    return (
      isObject$1(it) &&
      ((isRegExp = it[MATCH]) !== undefined
        ? !!isRegExp
        : classof$3(it) == "RegExp")
    );
  };

  var call$2 = functionCall;
  var hasOwn$2 = hasOwnProperty_1;
  var isPrototypeOf = objectIsPrototypeOf;
  var regExpFlags = regexpFlags$1;

  var RegExpPrototype$1 = RegExp.prototype;

  var regexpGetFlags = function (R) {
    var flags = R.flags;
    return flags === undefined &&
      !("flags" in RegExpPrototype$1) &&
      !hasOwn$2(R, "flags") &&
      isPrototypeOf(RegExpPrototype$1, R)
      ? call$2(regExpFlags, R)
      : flags;
  };

  var $$1 = _export;
  var call$1 = functionCall;
  var uncurryThis$3 = functionUncurryThis;
  var requireObjectCoercible$1 = requireObjectCoercible$6;
  var isCallable$3 = isCallable$h;
  var isNullOrUndefined$2 = isNullOrUndefined$6;
  var isRegExp$1 = isRegexp;
  var toString$2 = toString$6;
  var getMethod$1 = getMethod$4;
  var getRegExpFlags$1 = regexpGetFlags;
  var getSubstitution = getSubstitution$2;
  var wellKnownSymbol$4 = wellKnownSymbol$b;

  var REPLACE = wellKnownSymbol$4("replace");
  var $TypeError$2 = TypeError;
  var indexOf = uncurryThis$3("".indexOf);
  uncurryThis$3("".replace);
  var stringSlice = uncurryThis$3("".slice);
  var max = Math.max;

  var stringIndexOf$1 = function (string, searchValue, fromIndex) {
    if (fromIndex > string.length) return -1;
    if (searchValue === "") return fromIndex;
    return indexOf(string, searchValue, fromIndex);
  };

  // `String.prototype.replaceAll` method
  // https://tc39.es/ecma262/#sec-string.prototype.replaceall
  $$1(
    { target: "String", proto: true },
    {
      replaceAll: function replaceAll(searchValue, replaceValue) {
        var O = requireObjectCoercible$1(this);
        var IS_REG_EXP,
          flags,
          replacer,
          string,
          searchString,
          functionalReplace,
          searchLength,
          advanceBy,
          replacement;
        var position = 0;
        var endOfLastMatch = 0;
        var result = "";
        if (!isNullOrUndefined$2(searchValue)) {
          IS_REG_EXP = isRegExp$1(searchValue);
          if (IS_REG_EXP) {
            flags = toString$2(
              requireObjectCoercible$1(getRegExpFlags$1(searchValue))
            );
            if (!~indexOf(flags, "g"))
              throw $TypeError$2(
                "`.replaceAll` does not allow non-global regexes"
              );
          }
          replacer = getMethod$1(searchValue, REPLACE);
          if (replacer) {
            return call$1(replacer, searchValue, O, replaceValue);
          }
        }
        string = toString$2(O);
        searchString = toString$2(searchValue);
        functionalReplace = isCallable$3(replaceValue);
        if (!functionalReplace) replaceValue = toString$2(replaceValue);
        searchLength = searchString.length;
        advanceBy = max(1, searchLength);
        position = stringIndexOf$1(string, searchString, 0);
        while (position !== -1) {
          replacement = functionalReplace
            ? toString$2(replaceValue(searchString, position, string))
            : getSubstitution(
                searchString,
                string,
                position,
                [],
                undefined,
                replaceValue
              );
          result += stringSlice(string, endOfLastMatch, position) + replacement;
          endOfLastMatch = position + searchLength;
          position = stringIndexOf$1(
            string,
            searchString,
            position + advanceBy
          );
        }
        if (endOfLastMatch < string.length) {
          result += stringSlice(string, endOfLastMatch);
        }
        return result;
      },
    }
  );

  var global$1 = global$e;
  var uncurryThis$2 = functionUncurryThis;

  var entryUnbind$2 = function (CONSTRUCTOR, METHOD) {
    return uncurryThis$2(global$1[CONSTRUCTOR].prototype[METHOD]);
  };

  var entryUnbind$1 = entryUnbind$2;

  entryUnbind$1("String", "replaceAll");

  var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
  var classof$2 = classof$6;

  // `Object.prototype.toString` method implementation
  // https://tc39.es/ecma262/#sec-object.prototype.tostring
  var objectToString = TO_STRING_TAG_SUPPORT$1
    ? {}.toString
    : function toString() {
        return "[object " + classof$2(this) + "]";
      };

  var TO_STRING_TAG_SUPPORT = toStringTagSupport;
  var defineBuiltIn$2 = defineBuiltIn$5;
  var toString$1 = objectToString;

  // `Object.prototype.toString` method
  // https://tc39.es/ecma262/#sec-object.prototype.tostring
  if (!TO_STRING_TAG_SUPPORT) {
    defineBuiltIn$2(Object.prototype, "toString", toString$1, { unsafe: true });
  }

  var fails$3 = fails$h;

  var correctPrototypeGetter = !fails$3(function () {
    function F() {
      /* empty */
    }
    F.prototype.constructor = null;
    // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
    return Object.getPrototypeOf(new F()) !== F.prototype;
  });

  var hasOwn$1 = hasOwnProperty_1;
  var isCallable$2 = isCallable$h;
  var toObject = toObject$3;
  var sharedKey = sharedKey$3;
  var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;

  var IE_PROTO = sharedKey("IE_PROTO");
  var $Object = Object;
  var ObjectPrototype = $Object.prototype;

  // `Object.getPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.getprototypeof
  // eslint-disable-next-line es/no-object-getprototypeof -- safe
  var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER
    ? $Object.getPrototypeOf
    : function (O) {
        var object = toObject(O);
        if (hasOwn$1(object, IE_PROTO)) return object[IE_PROTO];
        var constructor = object.constructor;
        if (isCallable$2(constructor) && object instanceof constructor) {
          return constructor.prototype;
        }
        return object instanceof $Object ? ObjectPrototype : null;
      };

  var fails$2 = fails$h;
  var isCallable$1 = isCallable$h;
  var isObject = isObject$7;
  var getPrototypeOf = objectGetPrototypeOf;
  var defineBuiltIn$1 = defineBuiltIn$5;
  var wellKnownSymbol$3 = wellKnownSymbol$b;

  var ITERATOR = wellKnownSymbol$3("iterator");
  var BUGGY_SAFARI_ITERATORS = false;

  // `%IteratorPrototype%` object
  // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
  var IteratorPrototype$1, PrototypeOfArrayIteratorPrototype, arrayIterator;

  /* eslint-disable es/no-array-prototype-keys -- safe */
  if ([].keys) {
    arrayIterator = [].keys();
    // Safari 8 has buggy iterators w/o `next`
    if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
    else {
      PrototypeOfArrayIteratorPrototype = getPrototypeOf(
        getPrototypeOf(arrayIterator)
      );
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
        IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
    }
  }

  var NEW_ITERATOR_PROTOTYPE =
    !isObject(IteratorPrototype$1) ||
    fails$2(function () {
      var test = {};
      // FF44- legacy iterators case
      return IteratorPrototype$1[ITERATOR].call(test) !== test;
    });

  if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$1 = {};

  // `%IteratorPrototype%[@@iterator]()` method
  // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
  if (!isCallable$1(IteratorPrototype$1[ITERATOR])) {
    defineBuiltIn$1(IteratorPrototype$1, ITERATOR, function () {
      return this;
    });
  }

  var iteratorsCore = {
    IteratorPrototype: IteratorPrototype$1,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS,
  };

  var defineProperty = objectDefineProperty.f;
  var hasOwn = hasOwnProperty_1;
  var wellKnownSymbol$2 = wellKnownSymbol$b;

  var TO_STRING_TAG = wellKnownSymbol$2("toStringTag");

  var setToStringTag$1 = function (target, TAG, STATIC) {
    if (target && !STATIC) target = target.prototype;
    if (target && !hasOwn(target, TO_STRING_TAG)) {
      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
    }
  };

  var iterators = {};

  var IteratorPrototype = iteratorsCore.IteratorPrototype;
  var create = objectCreate;
  var createPropertyDescriptor = createPropertyDescriptor$3;
  var setToStringTag = setToStringTag$1;
  var Iterators = iterators;

  var returnThis = function () {
    return this;
  };

  var iteratorCreateConstructor = function (
    IteratorConstructor,
    NAME,
    next,
    ENUMERABLE_NEXT
  ) {
    var TO_STRING_TAG = NAME + " Iterator";
    IteratorConstructor.prototype = create(IteratorPrototype, {
      next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next),
    });
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
    Iterators[TO_STRING_TAG] = returnThis;
    return IteratorConstructor;
  };

  // `CreateIterResultObject` abstract operation
  // https://tc39.es/ecma262/#sec-createiterresultobject
  var createIterResultObject$1 = function (value, done) {
    return { value: value, done: done };
  };

  var uncurryThis$1 = functionUncurryThis;
  var fails$1 = fails$h;
  var isCallable = isCallable$h;
  var classof$1 = classof$6;
  var getBuiltIn = getBuiltIn$5;
  var inspectSource = inspectSource$2;

  var noop = function () {
    /* empty */
  };
  var empty = [];
  var construct = getBuiltIn("Reflect", "construct");
  var constructorRegExp = /^\s*(?:class|function)\b/;
  var exec = uncurryThis$1(constructorRegExp.exec);
  var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

  var isConstructorModern = function isConstructor(argument) {
    if (!isCallable(argument)) return false;
    try {
      construct(noop, empty, argument);
      return true;
    } catch (error) {
      return false;
    }
  };

  var isConstructorLegacy = function isConstructor(argument) {
    if (!isCallable(argument)) return false;
    switch (classof$1(argument)) {
      case "AsyncFunction":
      case "GeneratorFunction":
      case "AsyncGeneratorFunction":
        return false;
    }
    try {
      // we can't check .prototype since constructors produced by .bind haven't it
      // `Function#toString` throws on some built-it function in some legacy engines
      // (for example, `DOMQuad` and similar in FF41-)
      return (
        INCORRECT_TO_STRING ||
        !!exec(constructorRegExp, inspectSource(argument))
      );
    } catch (error) {
      return true;
    }
  };

  isConstructorLegacy.sham = true;

  // `IsConstructor` abstract operation
  // https://tc39.es/ecma262/#sec-isconstructor
  var isConstructor$1 =
    !construct ||
    fails$1(function () {
      var called;
      return (
        isConstructorModern(isConstructorModern.call) ||
        !isConstructorModern(Object) ||
        !isConstructorModern(function () {
          called = true;
        }) ||
        called
      );
    })
      ? isConstructorLegacy
      : isConstructorModern;

  var isConstructor = isConstructor$1;
  var tryToString = tryToString$2;

  var $TypeError$1 = TypeError;

  // `Assert: IsConstructor(argument) is true`
  var aConstructor$1 = function (argument) {
    if (isConstructor(argument)) return argument;
    throw $TypeError$1(tryToString(argument) + " is not a constructor");
  };

  var anObject$1 = anObject$9;
  var aConstructor = aConstructor$1;
  var isNullOrUndefined$1 = isNullOrUndefined$6;
  var wellKnownSymbol$1 = wellKnownSymbol$b;

  var SPECIES = wellKnownSymbol$1("species");

  // `SpeciesConstructor` abstract operation
  // https://tc39.es/ecma262/#sec-speciesconstructor
  var speciesConstructor$1 = function (O, defaultConstructor) {
    var C = anObject$1(O).constructor;
    var S;
    return C === undefined || isNullOrUndefined$1((S = anObject$1(C)[SPECIES]))
      ? defaultConstructor
      : aConstructor(S);
  };

  /* eslint-disable es/no-string-prototype-matchall -- safe */
  var $ = _export;
  var call = functionCall;
  var uncurryThis = functionUncurryThisClause;
  var createIteratorConstructor = iteratorCreateConstructor;
  var createIterResultObject = createIterResultObject$1;
  var requireObjectCoercible = requireObjectCoercible$6;
  var toLength = toLength$3;
  var toString = toString$6;
  var anObject = anObject$9;
  var isNullOrUndefined = isNullOrUndefined$6;
  var classof = classofRaw$2;
  var isRegExp = isRegexp;
  var getRegExpFlags = regexpGetFlags;
  var getMethod = getMethod$4;
  var defineBuiltIn = defineBuiltIn$5;
  var fails = fails$h;
  var wellKnownSymbol = wellKnownSymbol$b;
  var speciesConstructor = speciesConstructor$1;
  var advanceStringIndex = advanceStringIndex$2;
  var regExpExec = regexpExecAbstract;
  var InternalStateModule = internalState;
  var IS_PURE = isPure;

  var MATCH_ALL = wellKnownSymbol("matchAll");
  var REGEXP_STRING = "RegExp String";
  var REGEXP_STRING_ITERATOR = REGEXP_STRING + " Iterator";
  var setInternalState = InternalStateModule.set;
  var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
  var RegExpPrototype = RegExp.prototype;
  var $TypeError = TypeError;
  var stringIndexOf = uncurryThis("".indexOf);
  var nativeMatchAll = uncurryThis("".matchAll);

  var WORKS_WITH_NON_GLOBAL_REGEX =
    !!nativeMatchAll &&
    !fails(function () {
      nativeMatchAll("a", /./);
    });

  var $RegExpStringIterator = createIteratorConstructor(
    function RegExpStringIterator(regexp, string, $global, fullUnicode) {
      setInternalState(this, {
        type: REGEXP_STRING_ITERATOR,
        regexp: regexp,
        string: string,
        global: $global,
        unicode: fullUnicode,
        done: false,
      });
    },
    REGEXP_STRING,
    function next() {
      var state = getInternalState(this);
      if (state.done) return createIterResultObject(undefined, true);
      var R = state.regexp;
      var S = state.string;
      var match = regExpExec(R, S);
      if (match === null) {
        state.done = true;
        return createIterResultObject(undefined, true);
      }
      if (state.global) {
        if (toString(match[0]) === "")
          R.lastIndex = advanceStringIndex(
            S,
            toLength(R.lastIndex),
            state.unicode
          );
        return createIterResultObject(match, false);
      }
      state.done = true;
      return createIterResultObject(match, false);
    }
  );

  var $matchAll = function (string) {
    var R = anObject(this);
    var S = toString(string);
    var C = speciesConstructor(R, RegExp);
    var flags = toString(getRegExpFlags(R));
    var matcher, $global, fullUnicode;
    matcher = new C(C === RegExp ? R.source : R, flags);
    $global = !!~stringIndexOf(flags, "g");
    fullUnicode = !!~stringIndexOf(flags, "u");
    matcher.lastIndex = toLength(R.lastIndex);
    return new $RegExpStringIterator(matcher, S, $global, fullUnicode);
  };

  // `String.prototype.matchAll` method
  // https://tc39.es/ecma262/#sec-string.prototype.matchall
  $(
    { target: "String", proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX },
    {
      matchAll: function matchAll(regexp) {
        var O = requireObjectCoercible(this);
        var flags, S, matcher, rx;
        if (!isNullOrUndefined(regexp)) {
          if (isRegExp(regexp)) {
            flags = toString(requireObjectCoercible(getRegExpFlags(regexp)));
            if (!~stringIndexOf(flags, "g"))
              throw $TypeError("`.matchAll` does not allow non-global regexes");
          }
          if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll(O, regexp);
          matcher = getMethod(regexp, MATCH_ALL);
          if (matcher === undefined && IS_PURE && classof(regexp) == "RegExp")
            matcher = $matchAll;
          if (matcher) return call(matcher, regexp, O);
        } else if (WORKS_WITH_NON_GLOBAL_REGEX)
          return nativeMatchAll(O, regexp);
        S = toString(O);
        rx = new RegExp(regexp, "g");
        return rx[MATCH_ALL](S);
      },
    }
  );

  MATCH_ALL in RegExpPrototype ||
    defineBuiltIn(RegExpPrototype, MATCH_ALL, $matchAll);

  var entryUnbind = entryUnbind$2;

  entryUnbind("String", "matchAll");

  var _a, _b;
  var kind = "__PACKAGE_KIND__";
  window.__MSFT_SDK = window.__MSFT_SDK || {};
  window.__MSFT_SDK[kind] = {
    EventBus: EventBus$1,
    Logger: Logger,
    Store: Store,
    Utils: { IFrameUtils: IFrameUtils, ObjectUtils: ObjectUtils },
    enums: enums,
    constants: constants,
    Helpers: PublicApiHelper,
    config:
      ((_a = window.__MSFT_SDK[kind]) === null || _a === void 0
        ? void 0
        : _a.config) || null,
    appConfiguration:
      ((_b = window.__MSFT_SDK[kind]) === null || _b === void 0
        ? void 0
        : _b.appConfiguration) || {},
    initConsent: InternalAPI.initConsent,
    debug: function () {
      return {
        events: window.__MSFT_SDK[kind].Store.getters.debugInfo.events,
        logs: window.__MSFT_SDK[kind].Store.getters.debugInfo.logs,
        state: window.__MSFT_SDK[kind].Store.getters.state,
      };
    },
  };
  window.MSFTPrivacy = window.MSFTPrivacy || {};
  window.MSFTPrivacy[kind] = MSFTPrivacy;
  EventBus$1.on(Events.CoreConsentModelSelected, function () {
    DependencyManager.resolveDependencies();
  });

  var IntervalUtils = /** @class */ (function () {
    function IntervalUtils() {}
    IntervalUtils.ConvertToMilliseconds = function (interval) {
      switch (interval.unit) {
        case IntervalUnits.day:
          return interval.value * 86400000;
        case IntervalUnits.week:
          return interval.value * 86400000 * 7;
        case IntervalUnits.month:
          return interval.value * 86400000 * 30;
        case IntervalUnits.year:
          return interval.value * 86400000 * 365;
        default:
          Logger.error("Invalid unit for interval : ".concat(interval.unit));
          return interval.value;
      }
    };
    return IntervalUtils;
  })();

  var ConsentEncodingService = /** @class */ (function () {
    function ConsentEncodingService() {}
    /**
     * Encode user's consent preference
     *
     * @param  {import("core/types/interfaces").IUserConsent} consent user's consent object
     * @param  {import("core/types/interfaces").ICoreConsentModel} model current selected consent model
     * @returns {string} encoded consent
     */
    ConsentEncodingService.encodeConsent = function (consent, model) {
      Logger.info("encoding consent", { consent: consent, model: model });
      var preferences = consent.preferences;
      var encodedConsentString = Object.keys(preferences)
        .map(function (category) {
          return ""
            .concat(category, "=")
            .concat(
              preferences[category] === Preference.ON
                ? Preference.ON
                : Preference.OFF
            );
        })
        .join("%");
      Logger.info("encoded consent string: ".concat(encodedConsentString));
      return encodedConsentString;
    };
    ConsentEncodingService.encodeConsentMetadata = function (
      consent,
      model,
      bannerTrackerCategories,
      country
    ) {
      Logger.info("encoding consent", { consent: consent, model: model });
      var preferences = consent.preferences;
      var encodedConsentString =
        "".concat(ConsentEncodingService.CONSENTVERSION, "=") +
        model.properties.consentVersion.toString() +
        "%";
      encodedConsentString +=
        "".concat(ConsentEncodingService.CONSENTID, "=") +
        model.properties.consentId +
        "%";
      var acceptAll = true,
        declineAll = true;
      bannerTrackerCategories.forEach(function (bannerTrackerCategory) {
        if (!bannerTrackerCategory.properties.isEssential) {
          if (preferences[bannerTrackerCategory.name] === Preference.OFF)
            acceptAll = false;
          else declineAll = false;
        }
      });
      encodedConsentString +=
        "".concat(ConsentEncodingService.ACCEPTALL, "=") +
        (acceptAll ? Preference.ON : Preference.OFF) +
        "%";
      encodedConsentString +=
        "".concat(ConsentEncodingService.DECLINEALL, "=") +
        (declineAll ? Preference.ON : Preference.OFF) +
        "%";
      encodedConsentString +=
        "".concat(ConsentEncodingService.COUNTRY, "=") + country + "%";
      Logger.info(
        "encoded consent metadata string: ".concat(encodedConsentString)
      );
      return encodedConsentString;
    };
    /**
     * Decode encoded consent string.
     *
     * @param  {string} encodedConsentString encoded consent
     * @returns {import("core/types/interfaces").IUserConsent} object having user preference for all tracker categories
     */
    ConsentEncodingService.decodeConsentString = function (
      encodedConsentString
    ) {
      var _a;
      Logger.info("decoding consent string: ".concat(encodedConsentString));
      var preferences = {};
      (_a =
        encodedConsentString === null || encodedConsentString === void 0
          ? void 0
          : encodedConsentString.split("%")) === null || _a === void 0
        ? void 0
        : _a.forEach(function (pairStr) {
            var pair = pairStr.split("=");
            if (pair.length !== 2) return;
            var key = pair[0];
            var val = pair[1];
            if (
              key !== ConsentEncodingService.CONSENTVERSION &&
              key !== ConsentEncodingService.CONSENTID
            ) {
              preferences[key] = val;
            }
          });
      Logger.info("decoded consent", { preferences: preferences });
      return { preferences: preferences };
    };
    /**
     * Get version from encoded consent metadata string
     *
     * @param  {string} encodedConsentString encoded consent metadata
     * @returns {number} version
     */
    ConsentEncodingService.getVersionFromMetadataString = function (
      encodedConsentString
    ) {
      var match = encodedConsentString.match(/consentVersion=([\d.]+)%/);
      if (match == null) {
        return -1;
      }
      var res = parseInt(match[1]);
      if (isNaN(res)) {
        return -1;
      }
      Logger.info(
        "getVersionString str: "
          .concat(encodedConsentString, " found consentVersion: ")
          .concat(res)
      );
      return res;
    };
    /**
     * Get model name from encoded consent metadata string
     *
     * @param  {string} encodedConsentString encoded consent metadata
     * @returns {string | undefined} name
     */
    ConsentEncodingService.getModelIdFromMetadataString = function (
      encodedConsentString
    ) {
      var match = encodedConsentString.match(/consentId=([^%]+)%/);
      if (match == null) {
        return undefined;
      }
      Logger.info(
        "getModelIdFromString str: "
          .concat(encodedConsentString, " found version: ")
          .concat(match[1])
      );
      return match[1];
    };
    /**
     * Get country from encoded consent metadata string
     *
     * @param  {string} encodedConsentString encoded consent metadata
     * @returns {string | undefined} name
     */
    ConsentEncodingService.getCountryFromMetadataString = function (
      encodedConsentString
    ) {
      var match = encodedConsentString.match(/country=([^%]+)/);
      if (match == null) {
        return undefined;
      }
      Logger.info(
        "getCountryFromMetadataString str: "
          .concat(encodedConsentString, " found country: ")
          .concat(match[1])
      );
      return match[1];
    };
    ConsentEncodingService.getAcceptAllFromMetadataString = function (
      encodedConsentString
    ) {
      var match = encodedConsentString.match(/acceptAll=([^%]+)%/);
      if (match == null) {
        return false;
      }
      Logger.info(
        "getAcceptAllFromString str: "
          .concat(encodedConsentString, " found acceptAll: ")
          .concat(match[1])
      );
      return match[1] === Preference.ON;
    };
    ConsentEncodingService.getDeclineAllFromMetadataString = function (
      encodedConsentString
    ) {
      var match = encodedConsentString.match(/declineAll=([^%]+)%/);
      if (match == null) {
        return false;
      }
      Logger.info(
        "getDeclineAllFromString str: "
          .concat(encodedConsentString, " found declineAll: ")
          .concat(match[1])
      );
      return match[1] === Preference.ON;
    };
    ConsentEncodingService.CONSENTVERSION = "consentVersion";
    ConsentEncodingService.CONSENTID = "consentId";
    ConsentEncodingService.ACCEPTALL = "acceptAll";
    ConsentEncodingService.DECLINEALL = "declineAll";
    ConsentEncodingService.COUNTRY = "country";
    return ConsentEncodingService;
  })();

  var GeoLocationService = /** @class */ (function () {
    function GeoLocationService() {}
    /**
     * Fetch the user's country or region
     */
    GeoLocationService.getUserCountryOrRegion = function () {
      return __awaiter(this, void 0, void 0, function () {
        var geoTrackingURL, country, err_1;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              geoTrackingURL =
                window.__MSFT_SDK[kind$1].Store.getters.packageConfigurations
                  .geoTrackingURL;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [
                4 /*yield*/,
                fetch(geoTrackingURL).then(function (response) {
                  var _a;
                  return (
                    ((_a = response.headers.get("country")) === null ||
                    _a === void 0
                      ? void 0
                      : _a.toLowerCase()) || null
                  );
                }),
              ];
            case 2:
              country = _a.sent();
              window.__MSFT_SDK[kind$1].Store.reducers.setGeolocationCountry(
                country || ""
              );
              return [2 /*return*/, country];
            case 3:
              err_1 = _a.sent();
              console.error(
                "Got exception while fetching geo location. Switching to alternate way.",
                err_1
              );
              return [2 /*return*/, ""];
            case 4:
              return [2 /*return*/];
          }
        });
      });
    };
    return GeoLocationService;
  })();

  var State = /** @class */ (function () {
    function State(state) {
      this.state = state || {
        config: {
          sdkConfig: window.__MSFT_SDK[kind$1].config,
          appConfiguration: window.__MSFT_SDK[kind$1].appConfiguration,
        },
        custom: {
          lcid: "",
          proxyJS: "",
          languageBlockList: [],
          lcidList: [],
          templateData: {},
        },
      };
    }
    return State;
  })();

  /* eslint-disable @microsoft/sdl/no-cookies */
  var CookiePlugin = /** @class */ (function () {
    function CookiePlugin() {}
    /**
     * Get all values from cookie storage.
     *
     * @returns {string} Cookie values
     */
    CookiePlugin.get = function () {
      return document.cookie;
    };
    /**
     * Get specific value of a key name.
     *
     * @param {string} key Key name
     * @returns {string} Value corresponding to the input key
     */
    CookiePlugin.getItem = function (key) {
      Logger.info("get cookie key: ".concat(key));
      return (
        document.cookie.split("; ").find(function (row) {
          return row.startsWith("".concat(key, "="));
        }) || ""
      );
    };
    /**
     * Set values in cookie storage.
     *
     * @param {string} values Values to store
     */
    CookiePlugin.set = function (values) {
      Logger.info("set cookie: ".concat(values));
      document.cookie = values;
    };
    /**
     * Set value for a key name.
     *
     * @param {string} key Key name
     * @param {string} value Value to save
     * @param {number} [ttl] Optional expiry time in milli seconds
     */
    CookiePlugin.setItem = function (key, value, ttl) {
      var expiry;
      Logger.info(
        "set cookie key: "
          .concat(key, " value: ")
          .concat(value, " ttl: ")
          .concat(ttl)
      );
      if (ttl) {
        var date = new Date();
        date.setTime(date.getTime() + ttl);
        expiry = date.toUTCString();
      }
      document.cookie = ""
        .concat(key, "=")
        .concat(value)
        .concat(expiry ? "; expires=".concat(expiry) : "", "; path=/");
    };
    /**
     * Delete a cookie by setting its expiry time to a past date.
     *
     * @param {string} key Key name of the cookie to delete
     */
    CookiePlugin.deleteCookie = function (key) {
      Logger.info("delete cookie key: ".concat(key));
      var deleteDate = new Date();
      deleteDate.setTime(deleteDate.getTime() - 1); // Set deleteDate to past date
      document.cookie = ""
        .concat(key, "=; expires=")
        .concat(deleteDate.toUTCString(), "; Max-Age=0; path=/;");
    };
    return CookiePlugin;
  })();

  var Getters = /** @class */ (function (_super) {
    __extends(Getters, _super);
    function Getters(state) {
      var _this = _super.call(this, state) || this;
      _this.state.custom = __assign(__assign({}, state.custom), {
        languageBlockList: ["ca-Es-VALENCIA", "kok"],
        lcidList: [
          "af",
          "am",
          "ar",
          "az",
          "bg",
          "bn",
          "bs",
          "ca",
          "cs",
          "cy",
          "da",
          "de",
          "el",
          "en-GB",
          "en",
          "es-MX",
          "es",
          "et",
          "eu",
          "fa",
          "fil",
          "fi",
          "fr-CA",
          "fr",
          "ga",
          "gd",
          "gl",
          "gu",
          "he",
          "hi",
          "hr",
          "hu",
          "id",
          "is",
          "it",
          "ja",
          "ka",
          "kk",
          "km",
          "kn",
          "ko",
          "lb",
          "lo",
          "lt",
          "lv",
          "mi",
          "mk",
          "ml",
          "mr",
          "ms",
          "mt",
          "nl",
          "ne",
          "nb",
          "nn",
          "or",
          "pa",
          "pl",
          "pt-BR",
          "pt",
          "qu",
          "ro",
          "ru",
          "sk",
          "sl",
          "sq",
          "sr",
          "sv",
          "ta",
          "te",
          "th",
          "tr",
          "tt",
          "ug",
          "uk",
          "ur",
          "vi",
          "zh-CN",
          "zh-TW",
          "zh",
        ],
      });
      return _this;
    }
    Object.defineProperty(Getters.prototype, "currentModel", {
      /**
       * It's the actual model processed entity
       *
       * @returns {import("core/types/interfaces").IModel} current model
       */
      get: function () {
        return this.state.config.currentModel;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "selectedCoreModel", {
      /**
       * It's the subset of consent model entity present in the package's core-config.json
       *
       * @returns {import("core/types/interfaces").ICoreModel} selected core model
       */
      get: function () {
        return this.state.config.selectedCoreModel;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "applicableTrackerCategories", {
      /**
       * If website tracker categories are available then take them,
       * otherwise take the tracker categories from the package's core-config.json
       *
       * @returns {import("core/types/interfaces").ITrackerCategory[]} list of applicable tracker categories
       */
      get: function () {
        var _a, _b, _c;
        var coreConfigTrackerCategories =
          (_b =
            (_a = this.sdkConfig) === null || _a === void 0
              ? void 0
              : _a.properties) === null || _b === void 0
            ? void 0
            : _b.trackerCategories;
        var appTrackerCategories = this.appConfiguration.trackerCategories;
        if (window.__MSFT_SDK[kind$1].Store.getters.isLivePreviewMode) {
          var selectedModel = this.currentModel || this.selectedCoreModel;
          return (
            ((_c = selectedModel.controls.find(function (c) {
              return c.name === Constants.TrackerCategoryControl;
            })) === null || _c === void 0
              ? void 0
              : _c.instances) || []
          );
        }
        return appTrackerCategories && appTrackerCategories.length
          ? appTrackerCategories
              .map(function (tc) {
                var _a;
                var coreTC = coreConfigTrackerCategories.find(function (
                  coreTc
                ) {
                  return coreTc.objectId === tc.id;
                });
                if (!coreTC) {
                  // Safe check, it should never happen
                  return null;
                }
                var coreTCProperties = __assign(
                  __assign({}, coreTC.properties),
                  {
                    isEssential: Object.prototype.hasOwnProperty.call(
                      tc,
                      "isEssential"
                    )
                      ? tc.isEssential
                      : (_a = coreTC.properties) === null || _a === void 0
                      ? void 0
                      : _a.isEssential,
                  }
                );
                return __assign(__assign({}, coreTC), {
                  properties: coreTCProperties,
                });
              })
              .filter(function (tc) {
                return tc !== null;
              })
          : coreConfigTrackerCategories;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "bannerTrackerCategories", {
      /**
       * Gets banner tracker categories from the selected model
       * that are also available in the applicable tracker categories.
       *
       * If a TC is not there in applicable TC list, then we don't show it in the banner.
       *
       * @returns {import("core/types/interfaces").ITrackerCategory[]} list of banner tracker categories
       */
      get: function () {
        var _this = this;
        var _a;
        var selectedModel = this.currentModel || this.selectedCoreModel;
        var selectedModelTrackerCategories =
          ((_a = selectedModel.controls.find(function (c) {
            return c.name === Constants.TrackerCategoryControl;
          })) === null || _a === void 0
            ? void 0
            : _a.instances) || [];
        var bannerTrackerCategories = [];
        selectedModelTrackerCategories.forEach(function (tc) {
          var _a;
          var applicableTrackerCategory =
            (_a = _this.applicableTrackerCategories) === null || _a === void 0
              ? void 0
              : _a.find(function (atc) {
                  return atc.objectId === tc.objectId;
                });
          if (applicableTrackerCategory) {
            bannerTrackerCategories.push(
              __assign(__assign({}, tc), applicableTrackerCategory)
            );
          }
        });
        return bannerTrackerCategories;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "models", {
      get: function () {
        return this.state.config.sdkConfig.models;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "template", {
      get: function () {
        return this.state.config.template;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "startingLayoutPage", {
      get: function () {
        var _a, _b, _c, _d, _e, _f;
        var initConfigStartingPage =
          (_c =
            (_b =
              (_a = window.__MSFT_SDK[kind$1].Store.getters) === null ||
              _a === void 0
                ? void 0
                : _a.config) === null || _b === void 0
              ? void 0
              : _b.initConfig) === null || _c === void 0
            ? void 0
            : _c.startingLayoutPage;
        var isValidInitConfigStartingPage =
          (_e =
            (_d = this.state.config.template) === null || _d === void 0
              ? void 0
              : _d.pages) === null || _e === void 0
            ? void 0
            : _e.some(function (page) {
                return page.name === initConfigStartingPage;
              });
        return initConfigStartingPage && isValidInitConfigStartingPage
          ? initConfigStartingPage
          : ((_f = this.state.config.template) === null || _f === void 0
              ? void 0
              : _f.initPage) || "";
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "translations", {
      get: function () {
        return this.state.config.translations || [];
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "styles", {
      get: function () {
        return this.state.custom.styles || [];
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "timezone", {
      get: function () {
        return window.Intl.DateTimeFormat().resolvedOptions().timeZone;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "languages", {
      get: function () {
        var _this = this;
        var userLanguages = navigator.languages;
        var userLcids = [];
        userLanguages.forEach(function (userLanguage) {
          if (!_this.state.custom.languageBlockList.includes(userLanguage)) {
            for (
              var index = 0;
              index < _this.state.custom.lcidList.length;
              index++
            ) {
              if (userLanguage.startsWith(_this.state.custom.lcidList[index])) {
                if (!userLcids.includes(_this.state.custom.lcidList[index]))
                  userLcids.push(_this.state.custom.lcidList[index]);
                break;
              }
            }
          }
        });
        return userLcids;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "encodedConsent", {
      get: function () {
        return CookiePlugin.getItem(
          window.__MSFT_SDK[kind$1].enums.Cookie.Consent
        );
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "encodedConsentMetadata", {
      get: function () {
        return CookiePlugin.getItem(
          window.__MSFT_SDK[kind$1].enums.Cookie.ConsentMetadata
        );
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "templateParentMap", {
      get: function () {
        var _a;
        return (
          ((_a = this.state.config.template) === null || _a === void 0
            ? void 0
            : _a.componentParentMap) || {}
        );
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "extendedTrackers", {
      get: function () {
        return this.state.config.sdkConfig.extendedTrackers;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "defaultModel", {
      get: function () {
        var _a;
        return (_a = this.state.config.sdkConfig) === null || _a === void 0
          ? void 0
          : _a.properties.defaultConsentModel;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "lcid", {
      get: function () {
        return this.state.custom.lcid;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "components", {
      get: function () {
        return this.state.config.components || {};
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "proxyJS", {
      get: function () {
        return this.state.custom.proxyJS;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "templateData", {
      get: function () {
        return this.state.custom.templateData;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "sdkConfig", {
      get: function () {
        return this.state.config.sdkConfig;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "shouldHonourGPC", {
      get: function () {
        var _a, _b;
        if (
          ((_b =
            (_a = this.state.config.sdkConfig) === null || _a === void 0
              ? void 0
              : _a.configurations) === null || _b === void 0
            ? void 0
            : _b.shouldHonourGPC) != null
        ) {
          return this.state.config.sdkConfig.configurations.shouldHonourGPC;
        }
        return true;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "packageConfigurations", {
      get: function () {
        var _a;
        return (
          ((_a = this.state.config.sdkConfig) === null || _a === void 0
            ? void 0
            : _a.configurations) || {}
        );
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "appConfiguration", {
      get: function () {
        return this.state.config.appConfiguration || {};
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "geolocationCountry", {
      get: function () {
        return this.state.config.country || "";
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Getters.prototype, "shouldAlwaysFetchGeolocation", {
      get: function () {
        var _a;
        return (
          ((_a = this.state.config.sdkConfig.configurations) === null ||
          _a === void 0
            ? void 0
            : _a.shouldAlwaysfetchGeolocation) || false
        );
      },
      enumerable: false,
      configurable: true,
    });
    return Getters;
  })(State);

  var Reducers = /** @class */ (function (_super) {
    __extends(Reducers, _super);
    function Reducers(state) {
      return _super.call(this, state) || this;
    }
    Reducers.prototype.setCurrentModel = function (val) {
      this.state.config.currentModel = val;
    };
    Reducers.prototype.setSelectedCoreModel = function (val) {
      this.state.config.selectedCoreModel = val;
    };
    Reducers.prototype.setTemplate = function (val) {
      this.state.config.template = val;
    };
    Reducers.prototype.setTranslations = function (val) {
      this.state.config.translations = val;
    };
    Reducers.prototype.setStyles = function (styles) {
      this.state.custom.styles = styles;
    };
    Reducers.prototype.setEncodedConsentString = function (value, ttl) {
      CookiePlugin.setItem(Cookie.Consent, value, ttl);
    };
    Reducers.prototype.setEncodedConsentMetadataString = function (value, ttl) {
      CookiePlugin.setItem(Cookie.ConsentMetadata, value, ttl);
    };
    Reducers.prototype.setLcid = function (lcid) {
      this.state.custom.lcid = lcid;
    };
    Reducers.prototype.setComponents = function (val) {
      this.state.config.components = val;
    };
    Reducers.prototype.setProxyJS = function (js) {
      this.state.custom.proxyJS = js;
    };
    Reducers.prototype.setQuestions = function (val) {
      this.state.config.questions = val;
    };
    Reducers.prototype.setTemplateData = function (val) {
      this.state.custom.templateData = val;
    };
    Reducers.prototype.setSDKconfig = function (val) {
      this.state.config.sdkConfig = val;
    };
    Reducers.prototype.setGeolocationCountry = function (country) {
      this.state.config.country = country;
    };
    return Reducers;
  })(State);

  var state = new State().state;
  var getter = new Getters(state);
  var reducer = new Reducers(state);
  var store = {
    getters: getter,
    reducers: reducer,
  };

  var ConsentModelService = /** @class */ (function () {
    function ConsentModelService() {
      window.__MSFT_SDK[kind$1].Store.addReducers(store.reducers);
      window.__MSFT_SDK[kind$1].Store.addGetters(Getters);
      ConsentModelService.registerEvents();
    }
    /**
     * Register for init event to update consent model
     */
    ConsentModelService.registerEvents = function () {
      window.__MSFT_SDK[kind$1].EventBus.on(
        window.__MSFT_SDK[kind$1].enums.Events.Init,
        ConsentModelService.onInit
      );
      window.__MSFT_SDK[kind$1].EventBus.on(
        window.__MSFT_SDK[kind$1].enums.Events.ConsentInvalid,
        ConsentModelService.onConsentInvalid
      );
    };
    ConsentModelService.matchLocation = function (location, options) {
      if (!options || !Array.isArray(options)) {
        return false;
      }
      for (var i = 0; i < options.length; i++) {
        var option = options[i].toLowerCase();
        if (option === "all" || option === location) {
          return true;
        }
      }
      return options.length === 0;
    };
    /**
     * Select Consent Model as per rules like location etc.
     *
     * @param  {import("core/types/interfaces").IInitConfig} initConfig init config passed by user
     */
    ConsentModelService.selectConsentModel = function (initConfig) {
      return __awaiter(this, void 0, void 0, function () {
        var countryCode, coreModels, LCID, models, selectedModel, _a;
        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              (countryCode = initConfig.countryOrRegion),
                (coreModels = initConfig.coreModels),
                (LCID = initConfig.LCID);
              models =
                coreModels || window.__MSFT_SDK[kind$1].Store.getters.models;
              Logger.info("selecting consent model", {
                models: models,
                countryCode: countryCode,
                timezone: window.__MSFT_SDK[kind$1].Store.getters.timezone,
              });
              if (!Array.isArray(models) || models.length === 0) {
                window.__MSFT_SDK[kind$1].Logger.info("Models not found.");
                return [2 /*return*/, false];
              }
              selectedModel = null;
              if (!initConfig.preview) return [3 /*break*/, 1];
              _a = models[0];
              return [3 /*break*/, 3];
            case 1:
              return [
                4 /*yield*/,
                ConsentModelService.selectModelByGeoLocation(
                  models,
                  countryCode === null || countryCode === void 0
                    ? void 0
                    : countryCode.toLowerCase()
                ),
              ];
            case 2:
              _a = _b.sent();
              _b.label = 3;
            case 3:
              selectedModel = _a;
              if (!selectedModel) {
                window.__MSFT_SDK[kind$1].Logger.info(
                  "No applicable model found."
                );
                return [2 /*return*/, false];
              }
              window.__MSFT_SDK[kind$1].Store.reducers.setSelectedCoreModel(
                selectedModel
              );
              ConsentModelService.selectLanguageCode(
                selectedModel.translations,
                selectedModel.properties.defaultLCID,
                LCID
              );
              window.__MSFT_SDK[kind$1].EventBus.trigger(
                Events.CoreConsentModelSelected
              );
              window.__MSFT_SDK[kind$1].Logger.info("Consent model selected.");
              return [2 /*return*/, true];
          }
        });
      });
    };
    /**
     * Filters out all model versions where start date is greater than Date.now()
     *
     * @param {import("core/types/interfaces").ICoreModel[]} models available notice langs
     * @returns  {import("core/types/interfaces").ICoreModelExtended[]} filtered models
     */
    ConsentModelService.filterOutInvalidModelVersions = function (models) {
      var e_1, _a, e_2, _b;
      var latestVersionMap = {};
      var modelMap = {};
      try {
        for (
          var models_1 = __values(models), models_1_1 = models_1.next();
          !models_1_1.done;
          models_1_1 = models_1.next()
        ) {
          var model = models_1_1.value;
          latestVersionMap[model.name] = Math.max(
            latestVersionMap[model.name] || 0,
            model.version
          );
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (models_1_1 && !models_1_1.done && (_a = models_1.return))
            _a.call(models_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      try {
        for (
          var models_2 = __values(models), models_2_1 = models_2.next();
          !models_2_1.done;
          models_2_1 = models_2.next()
        ) {
          var model = models_2_1.value;
          var extendedModel = __assign(__assign({}, model), {
            computedProperties: {
              isLatestVersion: latestVersionMap[model.name] === model.version,
              startDateInMs: model.properties.startDate
                ? Date.parse(model.properties.startDate)
                : 0,
            },
          });
          if (extendedModel.computedProperties.startDateInMs > Date.now()) {
            //model is not applicable yet
            continue;
          }
          if (
            !modelMap[model.name] ||
            modelMap[model.name].version < model.version
          ) {
            modelMap[model.name] = extendedModel;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (models_2_1 && !models_2_1.done && (_b = models_2.return))
            _b.call(models_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return Object.values(modelMap);
    };
    /**
     * Sort models in order where latest version comes first
     * and then sort by start date in descending order
     *
     * @param {import("core/types/interfaces").ICoreModelExtended[]} models models to sort
     * @returns  {import("core/types/interfaces").ICoreModelExtended[]} sorted models
     */
    ConsentModelService.sortModelsMostToLeastPriority = function (models) {
      return models.sort(function (a, b) {
        if (
          a.computedProperties.isLatestVersion ===
          b.computedProperties.isLatestVersion
        ) {
          return (
            b.computedProperties.startDateInMs -
            a.computedProperties.startDateInMs
          );
        }
        return (
          Number(b.computedProperties.isLatestVersion) -
          Number(a.computedProperties.isLatestVersion)
        );
      });
    };
    ConsentModelService.selectModelByGeoLocation = function (
      models,
      inputCountryCode
    ) {
      return __awaiter(this, void 0, void 0, function () {
        var timezoneArea,
          isGeolocationEnabled,
          consentEncodedMetadataString,
          cookieCountry,
          shouldAlwaysFetchGeolocation,
          geoLocationCountry,
          _a,
          _b,
          countryCode,
          processedModels,
          selectedModel;
        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              timezoneArea = window.__MSFT_SDK[kind$1].Store.getters.timezone;
              isGeolocationEnabled = window.__MSFT_SDK[kind$1].Store.getters
                .isPreviewMode
                ? false
                : window.__MSFT_SDK[kind$1].Store.getters.packageConfigurations
                    .isGeoTrackingEnabled;
              consentEncodedMetadataString =
                window.__MSFT_SDK[kind$1].Store.getters.encodedConsentMetadata;
              cookieCountry =
                ConsentEncodingService.getCountryFromMetadataString(
                  consentEncodedMetadataString
                );
              shouldAlwaysFetchGeolocation =
                window.__MSFT_SDK[kind$1].Store.getters
                  .shouldAlwaysFetchGeolocation;
              if (
                !(
                  !shouldAlwaysFetchGeolocation &&
                  consentEncodedMetadataString != ""
                )
              )
                return [3 /*break*/, 1];
              _a = cookieCountry;
              return [3 /*break*/, 5];
            case 1:
              if (!isGeolocationEnabled) return [3 /*break*/, 3];
              return [4 /*yield*/, GeoLocationService.getUserCountryOrRegion()];
            case 2:
              _b = _c.sent();
              return [3 /*break*/, 4];
            case 3:
              _b = "";
              _c.label = 4;
            case 4:
              _a = _b;
              _c.label = 5;
            case 5:
              geoLocationCountry = _a;
              countryCode = inputCountryCode || geoLocationCountry;
              processedModels =
                ConsentModelService.sortModelsMostToLeastPriority(
                  ConsentModelService.filterOutInvalidModelVersions(models)
                );
              selectedModel = processedModels.find(function (model) {
                return Boolean(
                  countryCode
                    ? ConsentModelService.matchModelByCountryOrRegion(
                        model,
                        countryCode
                      )
                    : ConsentModelService.matchModelByTimezoneArea(
                        model,
                        timezoneArea
                      )
                );
              });
              if (!selectedModel) {
                selectedModel = processedModels.find(function (m) {
                  return (
                    m.name ===
                    window.__MSFT_SDK[kind$1].Store.getters.defaultModel
                  );
                });
              }
              return [2 /*return*/, selectedModel];
          }
        });
      });
    };
    ConsentModelService.matchModelByTimezoneArea = function (
      model,
      timezoneArea
    ) {
      var _a;
      return ConsentModelService.matchLocation(
        timezoneArea,
        ((_a = model.attributes.find(function (attr) {
          return attr.key === Constants.GeoLocations;
        })) === null || _a === void 0
          ? void 0
          : _a.value) || []
      );
    };
    ConsentModelService.matchModelByCountryOrRegion = function (
      model,
      countryCode
    ) {
      var _a;
      return ConsentModelService.matchLocation(
        countryCode,
        ((_a = model.attributes.find(function (attr) {
          return attr.key === Constants.CountriesOrRegions;
        })) === null || _a === void 0
          ? void 0
          : _a.value) || []
      );
    };
    /**
     * Set LCID depending on user's preference and available translations
     *
     * @param {string[]} noticesLanguages available notice langs
     * @param  {string} defaultLCID default LCID
     * @param  {string} overrideLCID override user LCID list
     */
    ConsentModelService.selectLanguageCode = function (
      noticesLanguages,
      defaultLCID,
      overrideLCID
    ) {
      var lcid = defaultLCID;
      var userLanguages = overrideLCID
        ? [overrideLCID]
        : window.__MSFT_SDK[kind$1].Store.getters.languages;
      for (var i = 0; i < userLanguages.length; i++) {
        if (noticesLanguages.includes(userLanguages[i])) {
          lcid = userLanguages[i];
          break;
        }
      }
      Logger.info("selected language code", { lcid: lcid });
      window.__MSFT_SDK[kind$1].Store.reducers.setLcid(lcid);
    };
    /**
     * Selects consent model and updates config if present
     *
     * @param  {import("core/types/interfaces").IInitConfig} initConfig init config passed by user
     */
    ConsentModelService.selectModelAndUpdateConfig = function (initConfig) {
      return __awaiter(this, void 0, void 0, function () {
        var isModelSelected;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                ConsentModelService.selectConsentModel(initConfig),
              ];
            case 1:
              isModelSelected = _a.sent();
              if (!isModelSelected) {
                return [2 /*return*/];
              }
              ConsentModelService.updateConfigIfPresent(initConfig);
              return [2 /*return*/];
          }
        });
      });
    };
    /**
     * Update consent model after init as per init config
     *
     * @param  {import("core/types/interfaces").IInitConfig} initConfig init config passed by user
     */
    ConsentModelService.onInit = function (initConfig) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                ConsentModelService.fetchCoreConfig(initConfig),
              ];
            case 1:
              _a.sent();
              return [
                4 /*yield*/,
                ConsentModelService.selectModelAndUpdateConfig(initConfig),
              ];
            case 2:
              _a.sent();
              return [2 /*return*/];
          }
        });
      });
    };
    /**
     * Update consent model after init as per init config
     *
     * @param  {import("core/types/interfaces").IInitConfig} initConfig init config passed by user
     */
    ConsentModelService.onConsentInvalid = function (initConfig) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                ConsentModelService.selectModelAndUpdateConfig(initConfig),
              ];
            case 1:
              _a.sent();
              return [2 /*return*/];
          }
        });
      });
    };
    ConsentModelService.updateConfigIfPresent = function (initConfig) {
      var translations = initConfig.translations,
        templates = initConfig.templates,
        models = initConfig.models;
      if (models) {
        var model = models.find(function (model) {
          var _a;
          return (
            model.id ===
            ((_a =
              window.__MSFT_SDK[kind$1].Store.getters.selectedCoreModel) ===
              null || _a === void 0
              ? void 0
              : _a.id)
          );
        });
        if (model) {
          window.__MSFT_SDK[kind$1].Store.reducers.setCurrentModel(model);
        }
      }
      if (translations) {
        window.__MSFT_SDK[kind$1].Store.reducers.setTranslations(
          translations[window.__MSFT_SDK[kind$1].Store.getters.lcid]
        );
      }
      if (templates) {
        var template =
          templates.find(function (t) {
            var _a;
            return (
              t.id ===
              ((_a =
                window.__MSFT_SDK[kind$1].Store.getters.selectedCoreModel) ===
                null || _a === void 0
                ? void 0
                : _a.layout.id)
            );
          }) || templates[0];
        window.__MSFT_SDK[kind$1].Store.reducers.setTemplate(template);
        window.__MSFT_SDK[kind$1].EventBus.trigger(
          window.__MSFT_SDK[kind$1].enums.Events.ConfigReady
        );
      }
    };
    ConsentModelService.fetchCoreConfig = function (initConfig) {
      return __awaiter(this, void 0, void 0, function () {
        var config, _a, promise, resolve_1, data;
        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              config = window.__MSFT_SDK[kind$1].Store.getters.sdkConfig;
              if (initConfig.preview) {
                return [2 /*return*/];
              }
              if (!(config == null || config.models == null))
                return [3 /*break*/, 2];
              (_a = AsyncUtils.deferred()),
                (promise = _a.promise),
                (resolve_1 = _a.resolve);
              return [
                4 /*yield*/,
                EventUtils.fetch(
                  "/msft-privacy/packages/".concat(
                    window.__MSFT_SDK[kind$1].config.id,
                    "/latest/core-config.js"
                  )
                ),
              ];
            case 1:
              data = _b.sent();
              DomUtils.addScriptToDOM(data);
              //TODO full proof this logic
              setTimeout(function () {
                var _a;
                window.__MSFT_SDK[kind$1].Store.reducers.setSDKconfig(
                  (_a = window.__MSFT_SDK[kind$1]) === null || _a === void 0
                    ? void 0
                    : _a.config
                );
                resolve_1();
              });
              return [2 /*return*/, promise];
            case 2:
              return [2 /*return*/];
          }
        });
      });
    };
    return ConsentModelService;
  })();
  new ConsentModelService();

  var TrackerCategoryService = /** @class */ (function () {
    function TrackerCategoryService() {}
    /**
     * Returns tracker categories that are used in the banner
     *
     * @returns {import("core/types/interfaces").ITrackerCategory[]} tracker category list
     */
    TrackerCategoryService.getTrackerCategories = function () {
      if (window.__MSFT_SDK[kind$1].Store.getters.currentModel !== undefined) {
        return window.__MSFT_SDK[kind$1].Store.getters.bannerTrackerCategories;
      }
      throw new Error("Consent Model not selected.");
    };
    /**
     * Returns website configuration.
     *
     * @returns {import("core/types/interfaces").IAppConfiguration} website configuration
     */
    TrackerCategoryService.getAppConfiguration = function () {
      return window.__MSFT_SDK[kind$1].Store.getters.appConfiguration;
    };
    /**
     * Returns the package's core-config.json
     *
     * @returns {import("core/types/interfaces").IConfig} package configuration
     */
    TrackerCategoryService.getPackageConfiguration = function () {
      return window.__MSFT_SDK[kind$1].Store.getters.sdkConfig;
    };
    /**
     * Returns default consent setting as per consent model
     *
     * @param {import("core/types/interfaces").ConsentModelType} consentModelType consent model type
     * @returns {import("core/types/interfaces").IUserConsent} user consent object
     */
    TrackerCategoryService.getDefaultConsent = function (consentModelType) {
      var consent = { preferences: {} };
      window.__MSFT_SDK[kind$1].Store.getters.bannerTrackerCategories.forEach(
        function (category) {
          var _a;
          consent.preferences[category.name] =
            ((_a = category.properties) === null || _a === void 0
              ? void 0
              : _a.isEssential) ||
            consentModelType ===
              window.__MSFT_SDK[kind$1].enums.ConsentModelType.Implicit
              ? window.__MSFT_SDK[kind$1].enums.Preference.ON
              : window.__MSFT_SDK[kind$1].enums.Preference.OFF;
        }
      );
      Logger.info("evaluating default consent", {
        consentModelType: consentModelType,
        consent: consent,
      });
      return consent;
    };
    return TrackerCategoryService;
  })();

  var ConsentManager = /** @class */ (function () {
    function ConsentManager() {
      ConsentManager.registerEvents();
    }
    /**
     * Register for window.__MSFT_SDK[kind].enums.Events.
     */
    ConsentManager.registerEvents = function () {
      window.__MSFT_SDK[kind$1].EventBus.on(
        window.__MSFT_SDK[kind$1].enums.Events.ConfigReady,
        ConsentManager.showNoticeIfConsentInvalid
      );
      window.__MSFT_SDK[kind$1].EventBus.on(
        window.__MSFT_SDK[kind$1].enums.PublicEvents.AcceptAll,
        ConsentManager.acceptAllCategories
      );
      window.__MSFT_SDK[kind$1].EventBus.on(
        window.__MSFT_SDK[kind$1].enums.PublicEvents.RejectAll,
        ConsentManager.rejectAllNonEssentialCategories
      );
      window.__MSFT_SDK[kind$1].EventBus.on(
        window.__MSFT_SDK[kind$1].enums.PublicEvents.UpdateConsent,
        ConsentManager.setConsent
      );
    };
    /**
     * Get user's consent.
     *
     * @returns {import("core/types/interfaces").IUserConsent} consent object
     */
    ConsentManager.getConsent = function () {
      return (
        window.__MSFT_SDK[kind$1].Store.getters.userConsent ||
        TrackerCategoryService.getDefaultConsent(
          window.__MSFT_SDK[kind$1].enums.ConsentModelType.Explicit
        )
      );
    };
    /**
     * Get user's consent for specific category
     *
     * @param  {string} trackerCategory category name
     * @returns {number} either on: "1" / off: "0" else null if not found.
     */
    ConsentManager.getConsentFor = function (trackerCategory) {
      return ConsentManager.getConsent().preferences[trackerCategory];
    };
    /**
     * Encode and save user's consent
     *
     * @param  {import("core/types/interfaces").IGenericObject} payload containing consent object
     */
    ConsentManager.setConsent = function (payload) {
      Logger.info("set consent", { payload: payload });
      var consent = payload.consent;
      var model = window.__MSFT_SDK[kind$1].Store.getters.currentModel;
      var coreModel = window.__MSFT_SDK[kind$1].Store.getters.selectedCoreModel;
      if (model === undefined || coreModel === undefined) {
        window.__MSFT_SDK[kind$1].Logger.warn(
          "Cannot set user consent before consent model is ready."
        );
        return;
      }
      var encodedConsentString = ConsentEncodingService.encodeConsent(
        consent,
        coreModel
      );
      var encodedConsentMetadataString =
        ConsentEncodingService.encodeConsentMetadata(
          consent,
          coreModel,
          window.__MSFT_SDK[kind$1].Store.getters.bannerTrackerCategories,
          window.__MSFT_SDK[kind$1].Store.getters.geolocationCountry
        );
      window.__MSFT_SDK[kind$1].Store.reducers.setEncodedConsentString(
        encodedConsentString,
        IntervalUtils.ConvertToMilliseconds(model.properties.expiry)
      );
      window.__MSFT_SDK[kind$1].Store.reducers.setEncodedConsentMetadataString(
        encodedConsentMetadataString,
        IntervalUtils.ConvertToMilliseconds(model.properties.expiry)
      );
      window.__MSFT_SDK[kind$1].Store.reducers.setUserConsent(consent);
      window.__MSFT_SDK[kind$1].Logger.info("Consent updated.");
      window.__MSFT_SDK[kind$1].EventBus.trigger(
        window.__MSFT_SDK[kind$1].enums.PublicEvents.ConsentChanged
      );
      window.__MSFT_SDK[kind$1].EventBus.trigger(
        window.__MSFT_SDK[kind$1].enums.PublicEvents.Done
      );
      var trackerPreferences = consent.preferences;
      var selectedCategories = Object.keys(trackerPreferences)
        .filter(function (category) {
          return trackerPreferences[category] == Preference.ON;
        })
        .join(",");
      window.dataLayer = window.dataLayer || [];
      var event = {
        event: window.__MSFT_SDK[kind$1].enums.PublicEvents.ConsentPreference,
        categories: selectedCategories,
      };
      window.dataLayer.push(event);
    };
    /**
     * Check if user has provided consent and its valid or not
     *
     * @returns {boolean} consent is valid or not
     */
    ConsentManager.isConsentValid = function () {
      var _a;
      var isCookiePresent = true;
      if (
        (_a = window.__MSFT_SDK[kind$1].Store.getters.config.initConfig) ===
          null || _a === void 0
          ? void 0
          : _a.preview
      )
        return {
          consentValid: false,
          isCookiePresent: isCookiePresent,
        };
      var encodedConsentString =
        window.__MSFT_SDK[kind$1].Store.getters.encodedConsent;
      var encodedConsentMetadataString =
        window.__MSFT_SDK[kind$1].Store.getters.encodedConsentMetadata;
      isCookiePresent =
        encodedConsentString !== "" && encodedConsentMetadataString !== "";
      if (
        encodedConsentString === undefined ||
        encodedConsentMetadataString === undefined
      ) {
        return {
          consentValid: false,
          isCookiePresent: isCookiePresent,
        };
      }
      if (
        window.__MSFT_SDK[kind$1].Store.getters.selectedCoreModel === undefined
      ) {
        window.__MSFT_SDK[kind$1].Logger.warn(
          "Consent model not selected, can't validate consent."
        );
        return {
          consentValid: true,
          isCookiePresent: isCookiePresent,
        };
      }
      var _b =
          window.__MSFT_SDK[kind$1].Store.getters.selectedCoreModel.properties,
        consentVersion = _b.consentVersion,
        consentId = _b.consentId;
      var result =
        ConsentEncodingService.getVersionFromMetadataString(
          encodedConsentMetadataString
        ) === consentVersion &&
        ConsentEncodingService.getModelIdFromMetadataString(
          encodedConsentMetadataString
        ) === consentId;
      return {
        consentValid: result,
        isCookiePresent: isCookiePresent,
      };
    };
    /**
     * Show consent notice if required.
     */
    ConsentManager.showNoticeIfConsentInvalid = function () {
      var _a, _b, _c;
      if (
        ((_a = window.__MSFT_SDK[kind$1].Store.getters.selectedCoreModel) ===
          null || _a === void 0
          ? void 0
          : _a.kind) === ModelKind.DSRSubmission
      ) {
        return;
      }
      var mode =
        ((_c =
          (_b = window.__MSFT_SDK[kind$1].Store.getters.selectedCoreModel) ===
            null || _b === void 0
            ? void 0
            : _b.properties) === null || _c === void 0
          ? void 0
          : _c.consentType) || ConsentModelType.Explicit;
      var _d = ConsentManager.isConsentValid(),
        consentValid = _d.consentValid,
        isCookiePresent = _d.isCookiePresent;
      Logger.info("consent valid: ".concat(consentValid));
      var consent = ConsentEncodingService.decodeConsentString(
        window.__MSFT_SDK[kind$1].Store.getters.encodedConsent
      );
      if (!consentValid && isCookiePresent) {
        CookiePlugin.deleteCookie(Cookie.Consent);
        CookiePlugin.deleteCookie(Cookie.ConsentMetadata);
        window.__MSFT_SDK[kind$1].EventBus.trigger(
          window.__MSFT_SDK[kind$1].enums.Events.ConsentInvalid
        );
        return;
      }
      if (
        window.__MSFT_SDK[kind$1].Store.getters.isGPCEnabled &&
        window.__MSFT_SDK[kind$1].Store.getters.shouldHonourGPC
      ) {
        ConsentManager.setConsentForGPC(consentValid, mode, consent);
        return;
      } else if (consentValid) {
        window.__MSFT_SDK[kind$1].Store.reducers.setUserConsent(consent);
        window.__MSFT_SDK[kind$1].EventBus.trigger(
          window.__MSFT_SDK[kind$1].enums.PublicEvents.ConsentChanged
        );
        window.__MSFT_SDK[kind$1].EventBus.trigger(
          window.__MSFT_SDK[kind$1].enums.PublicEvents.Done
        );
        return;
      }
      if (mode === ConsentModelType.Explicit) {
        window.__MSFT_SDK[kind$1].Store.reducers.setUserConsent(
          ConsentManager.getPrefrences({}, mode)
        );
        window.__MSFT_SDK[kind$1].EventBus.trigger(
          window.__MSFT_SDK[kind$1].enums.PublicEvents.ConsentChanged
        );
        window.__MSFT_SDK[kind$1].EventBus.trigger(
          window.__MSFT_SDK[kind$1].enums.PublicEvents.ShowFirstPage
        );
      } else {
        ConsentManager.setConsent({
          consent: ConsentManager.getPrefrences({}, mode),
        });
      }
    };
    ConsentManager.setConsentForGPC = function (consentValid, mode, consent) {
      var isDeclineAll = ConsentEncodingService.getDeclineAllFromMetadataString(
        window.__MSFT_SDK[kind$1].Store.getters.encodedConsentMetadata
      );
      // If consent is valid and user has declined all categories, then don't overwrite the consent
      if (consentValid && isDeclineAll) {
        window.__MSFT_SDK[kind$1].Store.reducers.setUserConsent(consent);
        window.__MSFT_SDK[kind$1].EventBus.trigger(
          window.__MSFT_SDK[kind$1].enums.PublicEvents.ConsentChanged
        );
      } else {
        ConsentManager.setConsent({
          consent: ConsentManager.getPrefrences({}, mode),
        });
      }
    };
    ConsentManager.getPrefrences = function (preferences, mode) {
      var consent = { preferences: {} };
      window.__MSFT_SDK[kind$1].Store.getters.bannerTrackerCategories.forEach(
        function (category) {
          var _a;
          if (
            (_a =
              category === null || category === void 0
                ? void 0
                : category.properties) === null || _a === void 0
              ? void 0
              : _a.isEssential
          ) {
            consent.preferences[category.name] =
              window.__MSFT_SDK[kind$1].enums.Preference.ON;
          } else {
            consent.preferences[category.name] =
              preferences[category.name] ||
              ConsentManager.getDefaultPreference(mode);
          }
        }
      );
      return consent;
    };
    ConsentManager.getDefaultPreference = function (mode) {
      return mode === ConsentModelType.Explicit ||
        window.__MSFT_SDK[kind$1].Store.getters.isGPCEnabled
        ? Preference.OFF
        : Preference.ON;
    };
    /**
     * Save users consent to accept all categories and hide banner
     */
    ConsentManager.acceptAllCategories = function () {
      var consent = { preferences: {} };
      window.__MSFT_SDK[kind$1].Store.getters.bannerTrackerCategories.forEach(
        function (category) {
          consent.preferences[category.name] =
            window.__MSFT_SDK[kind$1].enums.Preference.ON;
        }
      );
      ConsentManager.setConsent({ consent: consent });
      window.__MSFT_SDK[kind$1].EventBus.trigger(
        window.__MSFT_SDK[kind$1].enums.PublicEvents.CloseConsentNotice
      );
    };
    /**
     * Save users consent to reject all non essential categories and hide banner
     */
    ConsentManager.rejectAllNonEssentialCategories = function () {
      var consent = { preferences: {} };
      window.__MSFT_SDK[kind$1].Store.getters.bannerTrackerCategories.forEach(
        function (category) {
          var _a;
          consent.preferences[category.name] = (
            (_a = category.properties) === null || _a === void 0
              ? void 0
              : _a.isEssential
          )
            ? window.__MSFT_SDK[kind$1].enums.Preference.ON
            : window.__MSFT_SDK[kind$1].enums.Preference.OFF;
        }
      );
      ConsentManager.setConsent({ consent: consent });
      window.__MSFT_SDK[kind$1].EventBus.trigger(
        window.__MSFT_SDK[kind$1].enums.PublicEvents.CloseConsentNotice
      );
    };
    return ConsentManager;
  })();
  new ConsentManager();

  var PublicAPI = /** @class */ (function () {
    function PublicAPI() {}
    /**
     * Get user's consent containing category preferences
     *
     * @returns {import("core/types/interfaces").IUserConsent} user's consent
     */
    PublicAPI.getConsent = function () {
      return ConsentManager.getConsent();
    };
    /**
     * Get all tracker categories available as part of current selected model
     *
     * @returns {import("core/types/interfaces").ITrackerCategory[]} list of tracker categories
     */
    PublicAPI.getTrackerCategories = function () {
      return TrackerCategoryService.getTrackerCategories();
    };
    /**
     * Get website configuration.
     *
     * @returns {import("core/types/interfaces").IAppConfiguration} website configuration
     */
    PublicAPI.getAppConfiguration = function () {
      return TrackerCategoryService.getAppConfiguration();
    };
    /**
     * Get the package's core-config.json
     *
     * @returns {import("core/types/interfaces").IConfig} package configuration
     */
    PublicAPI.getPackageConfiguration = function () {
      return TrackerCategoryService.getPackageConfiguration();
    };
    /**
     * Get all consent models available as part of sdk
     *
     * @returns {import("core/types/interfaces").IConsentModelExternal[]} list of consent models
     */
    PublicAPI.getConsentModels = function () {
      return window.__MSFT_SDK[kind$1].Store.getters.models.map(function (_a) {
        var _b;
        var name = _a.name,
          version = _a.version,
          id = _a.id,
          friendlyName = _a.friendlyName;
        return {
          id: id,
          name: name,
          friendlyName: friendlyName,
          version: version,
          selected:
            ((_b = window.__MSFT_SDK[kind$1].Store.getters.currentModel) ===
              null || _b === void 0
              ? void 0
              : _b.id) === id,
        };
      });
    };
    return PublicAPI;
  })();

  var MobileHelpers = /** @class */ (function () {
    function MobileHelpers() {}
    MobileHelpers.registerEventHandlers = function () {
      MobileHelpers.eventsToBeSubscribed.forEach(function (eventName) {
        window.__MSFT_SDK[kind$1].EventBus.on(eventName, function (data) {
          return MobileHelpers.sendEventToHost(eventName, data);
        });
      });
    };
    MobileHelpers.sendEventToHost = function (eventName, data) {
      if (data === void 0) {
        data = {};
      }
      if (window.MSFTAndroidHost && window.MSFTAndroidHost.onMessageReceived) {
        window.MSFTAndroidHost.onMessageReceived(
          eventName,
          JSON.stringify(data)
        );
      }
    };
    MobileHelpers.eventsToBeSubscribed = [
      window.__MSFT_SDK[kind$1].enums.PublicEvents.ConsentChanged,
      window.__MSFT_SDK[kind$1].enums.PublicEvents.ShowFirstPage,
      window.__MSFT_SDK[kind$1].enums.PublicEvents.Done,
    ];
    return MobileHelpers;
  })();

  window.__MSFT_SDK[kind$1].Helpers.addPublicApis(PublicAPI);
  window.__MSFT_SDK[kind$1].Helpers.exposeApis();
  MobileHelpers.registerEventHandlers();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
