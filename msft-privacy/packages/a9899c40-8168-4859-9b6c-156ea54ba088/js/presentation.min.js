(function () {
    'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
        PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
        PublicEvents["DataPropsUpdated"] = "DataPropsUpdated";
        PublicEvents["Done"] = "Done";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var Attributes;
    (function (Attributes) {
        // Web consent events
        Attributes["ConsentNotice"] = "msft-consent-notice";
        Attributes["AcceptAll"] = "msft-consent-accept-all";
        Attributes["OpenPreference"] = "msft-consent-open-preferences";
        Attributes["ClosePreference"] = "msft-consent-close-preferences";
        Attributes["DeclineAll"] = "msft-consent-decline-all";
        Attributes["SavePreferences"] = "msft-consent-save-preferences";
        Attributes["TrackerCategory"] = "msft-consent-tracker-category";
        // DSR events
        Attributes["QuestionnaireForm"] = "msft-questionnaire-form";
        Attributes["QuestionnaireFormSubmit"] = "msft-questionnaire-form-submit";
        // Generic events
        Attributes["Redirect"] = "msft-redirect";
        Attributes["OpenPage"] = "msft-open-page";
        Attributes["ClosePage"] = "msft-close-page";
        Attributes["TriggerEvent"] = "msft-trigger";
        Attributes["ToggleId"] = "msft-toggle-id";
        Attributes["ToggleOn"] = "msft-toggle-on";
        Attributes["ToggleOff"] = "msft-toggle-off";
        Attributes["FormPayloadData"] = "msft-payload-data";
        Attributes["FormId"] = "msft-payload-form-id";
        Attributes["FormInputIDs"] = "msft-payload-input-ids";
    })(Attributes || (Attributes = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
        Cookie["ConsentMetadata"] = "msft-consent-metadata";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsent"] = "MICROSOFT.WebConsent";
        ModelKind["DSRSubmission"] = "MICROSOFT.DSRSubmission";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = "WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var registerHeplers = function () {
        if (window.Handlebars) {
            window.Handlebars.registerHelper('toLowerCase', function (type) {
                return type.toLowerCase();
            });
            window.Handlebars.registerHelper('equals', function (param1, param2) {
                return param1.toLowerCase() === param2.toLowerCase();
            });
        }
    };

    var kind = 'trackerConsent';

    // Below regex is to allow any whitespace as well like "< data-prop >consentId< \ data-prop >"
    /* eslint-disable no-useless-escape */
    var customVariablesRegex = /<\s*data-prop\s*>(\s|&nbsp;)*(.*?)(\s|&nbsp;)*<\s*[\/\\]\s*data-prop\s*>/g;
    /* eslint-enable no-useless-escape */
    var replaceDataPropsInLayoutValues = function (originalDetails) {
        var stringifiedResult = replaceDataProps(JSON.stringify(originalDetails));
        return JSON.parse(stringifiedResult);
    };
    var replaceDataProps = function (str) {
        var dataProps = window.__MSFT_SDK[kind].Store.getters.dataProps;
        return str.replaceAll(customVariablesRegex, function () {
            var _a;
            var result = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                result[_i] = arguments[_i];
            }
            var variableName = (_a = result[2]) === null || _a === void 0 ? void 0 : _a.trim();
            return dataProps[variableName]
                ? dataProps[variableName].toString()
                : result[0];
        });
    };

    var ObjectUtils = /** @class */ (function () {
        function ObjectUtils() {
        }
        ObjectUtils.isObject = function (item) {
            return item && typeof item === 'object' && !Array.isArray(item);
        };
        ObjectUtils.mergeDeep = function (target) {
            var _a, _b;
            var sources = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sources[_i - 1] = arguments[_i];
            }
            if (!sources.length)
                return target;
            var source = sources.shift();
            if (this.isObject(target) && this.isObject(source)) {
                for (var key in source) {
                    if (this.isObject(source[key])) {
                        if (!target[key])
                            Object.assign(target, (_a = {}, _a[key] = {}, _a));
                        this.mergeDeep(target[key], source[key]);
                    }
                    else {
                        Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                    }
                }
            }
            return this.mergeDeep.apply(this, __spreadArray([target], __read(sources), false));
        };
        return ObjectUtils;
    }());

    var SDKModules;
    (function (SDKModules) {
        SDKModules["PRESENTATION"] = "presentation";
        SDKModules["PREVIEW"] = "preview";
        SDKModules["CONFIG"] = "config";
        SDKModules["HANDLEBAR"] = "handlebar";
        SDKModules["PROXY"] = "proxy";
        SDKModules["DSR"] = "dsr";
    })(SDKModules || (SDKModules = {}));
    var SDKModulesPath;
    (function (SDKModulesPath) {
        SDKModulesPath["PRESENTATION"] = "$jsRootPath/msft-privacy/packages/$packageId/js/presentation.min.js";
        SDKModulesPath["PREVIEW"] = "$jsRootPath/msft-privacy/packages/$packageId/js/preview.min.js";
        SDKModulesPath["HANDLEBAR"] = "$jsRootPath/msft-privacy/packages/$packageId/js/vendor/handlebars.min.js";
        SDKModulesPath["PROXY"] = "$jsRootPath/msft-privacy/packages/$packageId/js/proxy.min.js";
        SDKModulesPath["DSR"] = "$jsRootPath/msft-privacy/packages/$packageId/js/dsr.min.js";
    })(SDKModulesPath || (SDKModulesPath = {}));
    var SDKModulesSourceVariable;
    (function (SDKModulesSourceVariable) {
        SDKModulesSourceVariable["PRESENTATION"] = "msft-presentation.js";
        SDKModulesSourceVariable["HANDLEBAR"] = "msft-handlebars.js";
        SDKModulesSourceVariable["PROXY"] = "msft-proxy.js";
        SDKModulesSourceVariable["DSR"] = "dsr.js";
    })(SDKModulesSourceVariable || (SDKModulesSourceVariable = {}));
    var ModuleSourceType;
    (function (ModuleSourceType) {
        ModuleSourceType["PATH"] = "path";
        ModuleSourceType["VARIABLE"] = "variable";
    })(ModuleSourceType || (ModuleSourceType = {}));

    var State = /** @class */ (function () {
        function State(state) {
            this.state = state || {
                config: {},
                debug: {
                    logs: [],
                    events: [],
                },
                custom: {},
                userValues: {},
            };
        }
        return State;
    }());

    var Getters = /** @class */ (function (_super) {
        __extends(Getters, _super);
        function Getters(state) {
            return _super.call(this, state) || this;
        }
        Object.defineProperty(Getters.prototype, "debugInfo", {
            get: function () {
                return this.state.debug;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "config", {
            get: function () {
                return this.state.config;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "userConsent", {
            get: function () {
                return this.state.custom.userConsent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isHeadless", {
            // TODO: Implement below getters
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isPreviewMode", {
            get: function () {
                var _a;
                return ((_a = this.state.config.initConfig) === null || _a === void 0 ? void 0 : _a.preview) || false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isActionDisabled", {
            get: function () {
                var _a;
                return ((_a = this.state.config.initConfig) === null || _a === void 0 ? void 0 : _a.disableActions) || false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isLivePreviewMode", {
            get: function () {
                var _a;
                try {
                    return ((_a = window.parent) === null || _a === void 0 ? void 0 : _a.name) === 'ConsentLivePreview';
                }
                catch (_err) {
                    // If we try to access outer IFrame we get error
                    // Uncaught (in promise) DOMException: Blocked a frame with origin "https://localhost:23309" from accessing a cross-origin frame.
                    // This catch block is to bypass the error
                    return false;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "presentationVariable", {
            get: function () {
                return SDKModulesSourceVariable.PRESENTATION;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "handlebarVariable", {
            get: function () {
                return SDKModulesSourceVariable.HANDLEBAR;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "proxyVariable", {
            get: function () {
                return SDKModulesSourceVariable.PROXY;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "dsrVariable", {
            get: function () {
                return SDKModulesSourceVariable.DSR;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "dataProps", {
            get: function () {
                return this.state.custom.dynamicValues || {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isGPCEnabled", {
            get: function () {
                var _a;
                var gpcValue = (_a = window.navigator.globalPrivacyControl) === null || _a === void 0 ? void 0 : _a.toString();
                return gpcValue ? gpcValue === 'true' || gpcValue === '1' : false;
            },
            enumerable: false,
            configurable: true
        });
        return Getters;
    }(State));

    var EventsReplayStrategy;
    (function (EventsReplayStrategy) {
        EventsReplayStrategy[EventsReplayStrategy["REPLAY_ALL"] = 0] = "REPLAY_ALL";
        EventsReplayStrategy[EventsReplayStrategy["REPLAY_LATEST"] = 1] = "REPLAY_LATEST";
        EventsReplayStrategy[EventsReplayStrategy["SKIP"] = 2] = "SKIP";
    })(EventsReplayStrategy || (EventsReplayStrategy = {}));

    var ReplayAllEvents = /** @class */ (function () {
        function ReplayAllEvents() {
            this.strategy = EventsReplayStrategy.REPLAY_ALL;
        }
        ReplayAllEvents.prototype.execute = function (callback, events) {
            events.forEach(function (_a) {
                var payload = _a.payload;
                return callback(payload);
            });
        };
        return ReplayAllEvents;
    }());
    var ReplayAllEvents$1 = new ReplayAllEvents();

    var ReplayLatestEvent = /** @class */ (function () {
        function ReplayLatestEvent() {
            this.strategy = EventsReplayStrategy.REPLAY_LATEST;
        }
        ReplayLatestEvent.prototype.execute = function (callback, events) {
            if (events.length) {
                callback(events[events.length - 1].payload);
            }
        };
        return ReplayLatestEvent;
    }());
    var ReplayLatestEvent$1 = new ReplayLatestEvent();

    var SkipEventReplay = /** @class */ (function () {
        function SkipEventReplay() {
            this.strategy = EventsReplayStrategy.SKIP;
        }
        SkipEventReplay.prototype.execute = function () {
            return void 0;
        };
        return SkipEventReplay;
    }());
    var SkipEventReplay$1 = new SkipEventReplay();

    var _a;
    var ReplayStrategy = (_a = {},
        _a[EventsReplayStrategy.REPLAY_ALL] = ReplayAllEvents$1,
        _a[EventsReplayStrategy.REPLAY_LATEST] = ReplayLatestEvent$1,
        _a[EventsReplayStrategy.SKIP] = SkipEventReplay$1,
        _a);

    var EventsRecording = /** @class */ (function () {
        function EventsRecording() {
        }
        EventsRecording.record = function (event, payload) {
            this.eventsLogs[event] = this.eventsLogs[event] || [];
            this.eventsLogs[event].push({ payload: payload });
        };
        EventsRecording.replay = function (event, callback, strategy) {
            if (strategy === void 0) { strategy = this.DEFAULT_STRATEGY; }
            ReplayStrategy[strategy].execute(callback, this.eventsLogs[event] || []);
        };
        EventsRecording.eventsLogs = {};
        EventsRecording.DEFAULT_STRATEGY = EventsReplayStrategy.REPLAY_LATEST;
        return EventsRecording;
    }());

    var EventBus = /** @class */ (function () {
        function EventBus() {
            this.events = {};
            this.eventIdCounter = 0;
        }
        /**
         * Gets default event details.
         * @returns {IEventDetails} Default event details
         */
        EventBus.getDefaultEventDetails = function () {
            return {
                executionCount: 0,
                callbacks: [],
            };
        };
        /**
         * Add an event listener.
         * @param {string} event Event name
         * @param {ICallback} callback Listener callback
         * @param {IEventHandlerProperties} properties Additional configuration properties
         * @returns {number} Event ID
         */
        EventBus.prototype.on = function (event, callback, _a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.sync, sync = _c === void 0 ? false : _c, replayStrategy = _b.replayStrategy;
            Logger.info("Callback registered for event : ".concat(event));
            this.eventIdCounter++;
            var eventDetails = {
                id: this.eventIdCounter,
                fn: callback,
                sync: sync,
            };
            this.events[event] =
                this.events[event] || EventBus.getDefaultEventDetails();
            this.events[event].callbacks.push(eventDetails);
            EventsRecording.replay(event, callback, replayStrategy);
            return this.eventIdCounter;
        };
        /**
         * Execute an event.
         * @param {string} event Event name
         * @param {import("core/types/interfaces").IGenericObject} payload Payload data
         */
        EventBus.prototype.trigger = function (event, payload) {
            var _this = this;
            var _a;
            if (payload === void 0) { payload = {}; }
            var callbacks = ((_a = this.events[event]) === null || _a === void 0 ? void 0 : _a.callbacks) || [];
            // Let the logic run even if no active listeners so that we can record the events.
            Logger.info("Started executing '".concat(callbacks.length, "' callbacks for event '").concat(event, "'"), payload);
            Store.reducers.saveDebugInfo({ event: event });
            callbacks.forEach(function (eventHandler) { return __awaiter(_this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            if (!!eventHandler.sync) return [3 /*break*/, 2];
                            return [4 /*yield*/, Promise.resolve()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            eventHandler.fn(payload);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            Logger.error("Error in executing callback id : ".concat(eventHandler.id, " for event '").concat(event), e_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
            EventsRecording.record(event, payload);
            Logger.info("Completed executing '".concat(callbacks.length, "' callbacks for event '").concat(event, "'"), payload);
            if (this.events[event]) {
                this.events[event].executionCount++;
            }
        };
        /**
         * Detach an event listener.
         * @param {string} event Event name
         * @param {number | ICallback} eventIdOrCallback Event listener ID or callback to remove
         */
        EventBus.prototype.off = function (event, eventIdOrCallback) {
            var _a;
            var idx = (_a = this.events[event]) === null || _a === void 0 ? void 0 : _a.callbacks.findIndex(function (eventDetails) {
                return eventDetails.id === eventIdOrCallback ||
                    eventDetails.fn === eventIdOrCallback;
            });
            if (typeof idx === 'number' && ~idx) {
                Logger.info("Removing event listener '".concat(this.events[event].callbacks[idx].id, "' of '").concat(event, "' event"));
                this.events[event].callbacks.splice(idx, 1);
            }
            else {
                Logger.error("Unable to remove event listener for event '".concat(event, "'. No matching event id or callback found."));
            }
        };
        /**
         * Checks if any event listener is attached in the event bus.
         * @param {string} event Event name
         * @returns {boolean} True if an event listener is attached else false
         */
        EventBus.prototype.hasListener = function (event) {
            var _a;
            return ((_a = this.events[event]) === null || _a === void 0 ? void 0 : _a.callbacks.length) > 0;
        };
        return EventBus;
    }());
    var EventBus$1 = new EventBus();

    var Reducers = /** @class */ (function (_super) {
        __extends(Reducers, _super);
        function Reducers(state) {
            return _super.call(this, state) || this;
        }
        Reducers.prototype.saveDebugInfo = function (_a) {
            var event = _a.event, log = _a.log;
            if (event) {
                this.state.debug.events.push(event);
            }
            if (log) {
                this.state.debug.logs.push(log);
            }
        };
        Reducers.prototype.setUserConsent = function (consent) {
            this.state.custom.userConsent = consent;
        };
        Reducers.prototype.setInitConfig = function (initConfig) {
            this.state.config.initConfig = initConfig;
            if (initConfig === null || initConfig === void 0 ? void 0 : initConfig.dataProps) {
                this.setDataProps(initConfig.dataProps);
            }
        };
        Reducers.prototype.setDataProps = function (values) {
            this.state.custom.dynamicValues = __assign(__assign({}, (this.state.custom.dynamicValues || {})), values);
            EventBus$1.trigger(PublicEvents.DataPropsUpdated, this.state.custom.dynamicValues);
        };
        Reducers.prototype.addCustomUserValue = function (key, value) {
            this.state.userValues[key] = value;
        };
        Reducers.prototype.getCustomUserValue = function (key) {
            return this.state.userValues[key];
        };
        return Reducers;
    }(State));

    var state = new State().state;
    var getter = new Getters(state);
    var reducer = new Reducers(state);
    var Store = {
        getters: getter,
        reducers: reducer,
        addReducers: function (reducers) {
            this.reducers = ObjectUtils.mergeDeep(this.reducers, reducers);
        },
        addGetters: function (getters) {
            Object.defineProperties(this.getters, Object.getOwnPropertyDescriptors(getters.prototype));
        },
    };

    var LogLevels;
    (function (LogLevels) {
        LogLevels[LogLevels["INFO"] = 0] = "INFO";
        LogLevels[LogLevels["WARN"] = 1] = "WARN";
        LogLevels[LogLevels["ERROR"] = 2] = "ERROR";
    })(LogLevels || (LogLevels = {}));

    var ConsoleLogger = /** @class */ (function () {
        function ConsoleLogger() {
        }
        /**
         * Browser's console logger plugin.
         *
         * @param {LogLevels} level Log level
         * @param {string} message Log message
         */
        ConsoleLogger.log = function (level, message) {
            switch (level) {
                case LogLevels.WARN:
                    console.warn(message);
                    break;
                case LogLevels.ERROR:
                    console.error(message);
                    break;
                default:
                    {
                        console.log(message);
                    }
                    break;
            }
        };
        return ConsoleLogger;
    }());

    /**
     * @typedef {import("core/types/interfaces").IGenericObject} IGenericObject
     */
    var Logger = /** @class */ (function () {
        function Logger() {
        }
        /**
         * Info logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.info = function (message, data) {
            Logger.log(LogLevels.INFO, message, data);
        };
        /**
         * Warning logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.warn = function (message, data) {
            Logger.log(LogLevels.WARN, message, data);
        };
        /**
         * Error logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.error = function (message, data) {
            Logger.log(LogLevels.ERROR, message, data);
        };
        /**
         * Logs the message using the plugin based in level.
         *
         * @param {LogLevels} logLevel Log level
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.log = function (logLevel, message, data) {
            var formattedMessage = Logger.formatLogMessage(logLevel, message, data);
            Store.reducers.saveDebugInfo({ log: formattedMessage });
            ConsoleLogger.log(logLevel, formattedMessage);
        };
        /**
         * Formats the logger message.
         *
         * @param {LogLevels} logLevel Log level
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         * @returns {string} Formatted logger message
         */
        Logger.formatLogMessage = function (logLevel, message, data) {
            var stringifiedData = data ? "| ".concat(JSON.stringify(data)) : '';
            return "[".concat(LogLevels[logLevel], "] ").concat(message, " ").concat(stringifiedData);
        };
        return Logger;
    }());

    var ConsentEncodingService = /** @class */ (function () {
        function ConsentEncodingService() {
        }
        /**
         * Encode user's consent preference
         *
         * @param  {import("core/types/interfaces").IUserConsent} consent user's consent object
         * @param  {import("core/types/interfaces").ICoreConsentModel} model current selected consent model
         * @returns {string} encoded consent
         */
        ConsentEncodingService.encodeConsent = function (consent, model) {
            Logger.info('encoding consent', { consent: consent, model: model });
            var preferences = consent.preferences;
            var encodedConsentString = Object.keys(preferences)
                .map(function (category) {
                return "".concat(category, "=").concat(preferences[category] === Preference.ON
                    ? Preference.ON
                    : Preference.OFF);
            })
                .join('%');
            Logger.info("encoded consent string: ".concat(encodedConsentString));
            return encodedConsentString;
        };
        ConsentEncodingService.encodeConsentMetadata = function (consent, model, bannerTrackerCategories) {
            Logger.info('encoding consent', { consent: consent, model: model });
            var preferences = consent.preferences;
            var encodedConsentString = "".concat(ConsentEncodingService.CONSENTVERSION, "=") +
                model.properties.consentVersion.toString() +
                '%';
            encodedConsentString +=
                "".concat(ConsentEncodingService.CONSENTID, "=") +
                    model.properties.consentId +
                    '%';
            var acceptAll = true, declineAll = true;
            bannerTrackerCategories.forEach(function (bannerTrackerCategory) {
                if (!bannerTrackerCategory.properties.isEssential) {
                    if (preferences[bannerTrackerCategory.name] === Preference.OFF)
                        acceptAll = false;
                    else
                        declineAll = false;
                }
            });
            encodedConsentString +=
                "".concat(ConsentEncodingService.ACCEPTALL, "=") +
                    (acceptAll ? Preference.ON : Preference.OFF) +
                    '%';
            encodedConsentString +=
                "".concat(ConsentEncodingService.DECLINEALL, "=") +
                    (declineAll ? Preference.ON : Preference.OFF) +
                    '%';
            Logger.info("encoded consent metadata string: ".concat(encodedConsentString));
            return encodedConsentString;
        };
        /**
         * Decode encoded consent string.
         *
         * @param  {string} encodedConsentString encoded consent
         * @returns {import("core/types/interfaces").IUserConsent} object having user preference for all tracker categories
         */
        ConsentEncodingService.decodeConsentString = function (encodedConsentString) {
            var _a;
            Logger.info("decoding consent string: ".concat(encodedConsentString));
            var preferences = {};
            (_a = encodedConsentString === null || encodedConsentString === void 0 ? void 0 : encodedConsentString.split('%')) === null || _a === void 0 ? void 0 : _a.forEach(function (pairStr) {
                var pair = pairStr.split('=');
                if (pair.length !== 2)
                    return;
                var key = pair[0];
                var val = pair[1];
                if (key !== ConsentEncodingService.CONSENTVERSION &&
                    key !== ConsentEncodingService.CONSENTID) {
                    preferences[key] = val;
                }
            });
            Logger.info('decoded consent', { preferences: preferences });
            return { preferences: preferences };
        };
        /**
         * Get version from encoded consent metadata string
         *
         * @param  {string} encodedConsentString encoded consent metadata
         * @returns {number} version
         */
        ConsentEncodingService.getVersionFromMetadataString = function (encodedConsentString) {
            var match = encodedConsentString.match(/consentVersion=([\d.]+)%/);
            if (match == null) {
                return -1;
            }
            var res = parseInt(match[1]);
            if (isNaN(res)) {
                return -1;
            }
            Logger.info("getVersionString str: ".concat(encodedConsentString, " found consentVersion: ").concat(res));
            return res;
        };
        /**
         * Get model name from encoded consent metadata string
         *
         * @param  {string} encodedConsentString encoded consent metadata
         * @returns {string | undefined} name
         */
        ConsentEncodingService.getModelIdFromMetadataString = function (encodedConsentString) {
            var match = encodedConsentString.match(/consentId=([^%]+)%/);
            if (match == null) {
                return undefined;
            }
            Logger.info("getModelIdFromString str: ".concat(encodedConsentString, " found version: ").concat(match[1]));
            return match[1];
        };
        ConsentEncodingService.getAcceptAllFromMetadataString = function (encodedConsentString) {
            var match = encodedConsentString.match(/acceptAll=([^%]+)%/);
            if (match == null) {
                return false;
            }
            Logger.info("getAcceptAllFromString str: ".concat(encodedConsentString, " found acceptAll: ").concat(match[1]));
            return match[1] === Preference.ON;
        };
        ConsentEncodingService.getDeclineAllFromMetadataString = function (encodedConsentString) {
            var match = encodedConsentString.match(/declineAll=([^%]+)%/);
            if (match == null) {
                return false;
            }
            Logger.info("getDeclineAllFromString str: ".concat(encodedConsentString, " found declineAll: ").concat(match[1]));
            return match[1] === Preference.ON;
        };
        ConsentEncodingService.CONSENTVERSION = 'consentVersion';
        ConsentEncodingService.CONSENTID = 'consentId';
        ConsentEncodingService.ACCEPTALL = 'acceptAll';
        ConsentEncodingService.DECLINEALL = 'declineAll';
        return ConsentEncodingService;
    }());

    var TemplateHandler = /** @class */ (function () {
        function TemplateHandler() {
            TemplateHandler.registerShowTemplateHandlers();
        }
        /**
         * Register event handlers to open/close different templates
         */
        TemplateHandler.registerShowTemplateHandlers = function () {
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.PublicEvents.ShowConsentNotice, TemplateHandler.showFirstPage);
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.PublicEvents.CloseConsentNotice, TemplateHandler.hideConsentNotice);
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.Events.Init, TemplateHandler.saveStylesOnInit);
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.PublicEvents.ShowTemplate, TemplateHandler.showTemplate);
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.PublicEvents.CloseTemplate, TemplateHandler.closeTemplate);
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.PublicEvents.ConsentChanged, TemplateHandler.init);
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.Events.ConfigReady, TemplateHandler.init);
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.PublicEvents.ShowPreferences, TemplateHandler.showPreferences);
        };
        TemplateHandler.showPreferences = function () {
            try {
                TemplateHandler.showTemplate({ templateId: Template.Preferences });
            }
            catch (e) {
                TemplateHandler.showFirstPage();
            }
        };
        /**
         * Show template
         * @param  {import("core/types/interfaces").IGenericObject} payload payload data
         */
        TemplateHandler.showTemplate = function (_a) {
            var _b;
            var templateId = _a.templateId;
            if (window.__MSFT_SDK[kind].Store.getters.components &&
                window.__MSFT_SDK[kind].Store.getters.components[templateId]) {
                var consentModel = window.__MSFT_SDK[kind].Store.getters.currentModel;
                TemplateHandler.showTemplateInIFrame(window.__MSFT_SDK[kind].Store.getters.components[templateId], templateId, [
                    {
                        type: StyleType.Text,
                        value: ((_b = consentModel === null || consentModel === void 0 ? void 0 : consentModel.layout.ui.css) === null || _b === void 0 ? void 0 : _b[templateId.toLowerCase()]) || '',
                    },
                ], TemplateHandler.getParentElement(templateId));
            }
            else {
                throw new Error("Template : ".concat(templateId, " not found."));
            }
        };
        /**
         * Hide template
         * @param  {import("core/types/interfaces").IGenericObject} payload payload data
         */
        TemplateHandler.closeTemplate = function (_a) {
            var templateId = _a.templateId;
            TemplateHandler.closeIFrame(templateId);
        };
        /**
         * Save styles passed by user in window.__MSFT_SDK[kind].Store
         * @param  {import("core/types/interfaces").IInitConfig} config init config
         */
        TemplateHandler.saveStylesOnInit = function (config) {
            if (config.styles) {
                window.__MSFT_SDK[kind].Logger.info('user provided styles persisted to window.__MSFT_SDK[kind].Store.');
                window.__MSFT_SDK[kind].Store.reducers.setStyles(config.styles);
            }
        };
        TemplateHandler.toPascalCase = function (str) {
            if (typeof str === 'string') {
                return str[0].toUpperCase() + str.slice(1);
            }
            return str;
        };
        TemplateHandler.validationArrayToObject = function (validations) {
            return validations.reduce(function (previous, current) {
                var _a;
                return __assign(__assign({}, previous), (_a = {}, _a[TemplateHandler.toPascalCase(current.type)] = current.value, _a));
            }, {});
        };
        TemplateHandler.getTemplateData = function (consentModel) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var groupedTranslations, data, preferences, trackerCategoriesMap, questionMap, addedTrackerCategories, consentMetadata, layoutDetails;
                return __generator(this, function (_b) {
                    groupedTranslations = window.__MSFT_SDK[kind].Store.getters.translations;
                    data = {};
                    data[NoticeType.TrackerCategory] = [];
                    data[NoticeType.Questions] = [];
                    preferences = window.MSFTPrivacy[kind].getConsent().preferences;
                    trackerCategoriesMap = new Map();
                    questionMap = new Map();
                    addedTrackerCategories = new Set();
                    if (consentModel.kind === ModelKind.WebConsent) {
                        window.__MSFT_SDK[kind].Store.getters.bannerTrackerCategories.forEach(function (category) {
                            trackerCategoriesMap.set(category.objectId, category);
                        });
                        consentMetadata = window.__MSFT_SDK[kind].Store.getters.encodedConsentMetadata;
                        data[ConsentEncodingService.ACCEPTALL] =
                            ConsentEncodingService.getAcceptAllFromMetadataString(consentMetadata);
                        data[ConsentEncodingService.DECLINEALL] =
                            ConsentEncodingService.getDeclineAllFromMetadataString(consentMetadata);
                    }
                    else if (consentModel.kind === ModelKind.DSRSubmission) {
                        consentModel.controls.forEach(function (control) {
                            control.instances.forEach(function (instance) {
                                questionMap.set(instance.name, instance);
                            });
                        });
                    }
                    groupedTranslations.forEach(function (groupedTranslation) {
                        return Object.keys(groupedTranslation).forEach(function (namespace) {
                            var _a, _b, _c, _d;
                            if (namespace === 'model') {
                                var modelTranslations_1 = groupedTranslation[namespace];
                                delete modelTranslations_1.trackerCategory;
                                Object.keys(modelTranslations_1).forEach(function (control) {
                                    if (Array.isArray(modelTranslations_1[control])) {
                                        modelTranslations_1[control].forEach(function (translationInstance) {
                                            var controlInstance = questionMap.get(translationInstance.name);
                                            translationInstance.validations =
                                                TemplateHandler.validationArrayToObject((controlInstance === null || controlInstance === void 0 ? void 0 : controlInstance.validations) || []);
                                        });
                                    }
                                });
                                data = __assign(__assign({}, data), modelTranslations_1);
                            }
                            else if (trackerCategoriesMap.has(namespace) &&
                                !addedTrackerCategories.has(namespace)) {
                                var categoryTranslation = __assign(__assign({}, groupedTranslation[namespace]), { name: (_a = trackerCategoriesMap.get(namespace)) === null || _a === void 0 ? void 0 : _a.name, isEssential: (_c = (_b = trackerCategoriesMap.get(namespace)) === null || _b === void 0 ? void 0 : _b.properties) === null || _c === void 0 ? void 0 : _c.isEssential, isOn: preferences[((_d = trackerCategoriesMap.get(namespace)) === null || _d === void 0 ? void 0 : _d.name) || ''] ===
                                        '1' });
                                data[NoticeType.TrackerCategory].push(categoryTranslation);
                                addedTrackerCategories.add(namespace);
                            }
                        });
                    });
                    data[NoticeType.TrackerCategory] = __spreadArray(__spreadArray([], __read(data[NoticeType.TrackerCategory].filter(function (category) { return category.isEssential; })), false), __read(data[NoticeType.TrackerCategory].filter(function (category) { return !category.isEssential; })), false);
                    data['msft-script-open'] = '<script>';
                    data['msft-script-close'] = '</script>';
                    window.__MSFT_SDK[kind].Logger.info('getTemplate data invoked', {
                        consentModel: consentModel,
                        data: data,
                    });
                    layoutDetails = __assign(__assign(__assign(__assign(__assign({}, data), window.__MSFT_SDK[kind].Store.getters.templateData), (((_a = consentModel.layout) === null || _a === void 0 ? void 0 : _a.properties) || {})), { consentModel: consentModel, modelProps: consentModel.properties }), (window.__MSFT_SDK[kind].Store.getters.dataProps || {}));
                    return [2 /*return*/, replaceDataPropsInLayoutValues(layoutDetails)];
                });
            });
        };
        /**
         * Perform all necessary steps like replacing placeholders in
         * templates during init.
         */
        TemplateHandler.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consentModel, template, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            registerHeplers();
                            if (window.__MSFT_SDK[kind].Store.getters.currentModel === undefined ||
                                window.__MSFT_SDK[kind].Store.getters.template === undefined) {
                                window.__MSFT_SDK[kind].Logger.warn('Cannot call init before config is ready.');
                                return [2 /*return*/];
                            }
                            consentModel = window.__MSFT_SDK[kind].Store.getters
                                .currentModel;
                            template = window.__MSFT_SDK[kind].Store.getters.template;
                            return [4 /*yield*/, TemplateHandler.getTemplateData(consentModel)];
                        case 1:
                            data = _a.sent();
                            template.pages.forEach(function (page) {
                                var _a;
                                var templateString;
                                try {
                                    var template_1 = window.Handlebars.compile(page.css + page.content);
                                    templateString = template_1(data);
                                }
                                catch (e) {
                                    window.__MSFT_SDK[kind].Logger.error(e.message, e);
                                    templateString = ErrorStrings.TemplateError;
                                }
                                window.__MSFT_SDK[kind].Store.reducers.setComponents(__assign(__assign({}, window.__MSFT_SDK[kind].Store.getters.components), (_a = {}, _a[page.name] = templateString, _a)));
                            });
                            window.__MSFT_SDK[kind].Logger.info('Components updated');
                            if (!TemplateHandler.initialized) {
                                window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.PublicEvents.ShowFirstPage, TemplateHandler.showFirstPage);
                                TemplateHandler.initialized = true;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Show Consent notice template
         */
        TemplateHandler.showFirstPage = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var consentModel, initComponent, template;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!TemplateHandler.initialized) return [3 /*break*/, 2];
                            return [4 /*yield*/, TemplateHandler.init()];
                        case 1:
                            _b.sent();
                            _b.label = 2;
                        case 2:
                            consentModel = window.__MSFT_SDK[kind].Store.getters.currentModel;
                            if (consentModel === undefined) {
                                window.__MSFT_SDK[kind].Logger.warn('Cannot call init before consent model is selected.');
                                return [2 /*return*/];
                            }
                            initComponent = window.__MSFT_SDK[kind].Store.getters.startingLayoutPage;
                            if (window.__MSFT_SDK[kind].Store.getters.components === undefined ||
                                initComponent === undefined ||
                                window.__MSFT_SDK[kind].Store.getters.components[initComponent] ===
                                    undefined) {
                                window.__MSFT_SDK[kind].Logger.error('Notice template not found.');
                                return [2 /*return*/];
                            }
                            template = window.__MSFT_SDK[kind].Store.getters.components[initComponent];
                            TemplateHandler.showTemplateInIFrame(template, initComponent, [
                                {
                                    type: StyleType.Text,
                                    value: ((_a = consentModel.layout.ui.css) === null || _a === void 0 ? void 0 : _a[initComponent.toLowerCase()]) || '',
                                },
                            ], TemplateHandler.getParentElement(initComponent));
                            return [2 /*return*/];
                    }
                });
            });
        };
        TemplateHandler.getParentElement = function (templateId) {
            var _a;
            var parentMap = ((_a = window.__MSFT_SDK[kind].Store.getters.config.initConfig) === null || _a === void 0 ? void 0 : _a.componentParentMap) ||
                window.__MSFT_SDK[kind].Store.getters.templateParentMap;
            var parentElementId = (parentMap === null || parentMap === void 0 ? void 0 : parentMap[templateId]) || (parentMap === null || parentMap === void 0 ? void 0 : parentMap['*']);
            if (parentElementId) {
                return document.getElementById(parentElementId);
            }
            return null;
        };
        /**
         * Adds template to iframe and append it to dom
         * @param  {string} template template to add
         * @param  {string} iframeId iframe id
         * @param  {import("core/types/interfaces").IStyle[]} styles user provided styles
         * @param  {HTMLElement|null} parentElement if iframe should be added to a specific element instead of body
         */
        TemplateHandler.showTemplateInIFrame = function (template, iframeId, styles, parentElement) {
            var _a, _b;
            if (styles === void 0) { styles = []; }
            var iframeElement = document.getElementById(iframeId);
            if (iframeElement) {
                window.__MSFT_SDK[kind].Logger.info("Template: ".concat(iframeId, " is already open."));
            }
            else {
                if (template === ErrorStrings.TemplateError &&
                    (!window.__MSFT_SDK[kind].Store.getters.isLivePreviewMode ||
                        !window.__MSFT_SDK[kind].Store.getters.isPreviewMode)) {
                    return;
                }
                var data = {
                    origin: window.origin,
                    renderTemplateWithoutIframe: (_a = window.__MSFT_SDK[kind].Store.getters.config.initConfig) === null || _a === void 0 ? void 0 : _a.renderTemplateWithoutIframe,
                    executionContexts: ((_b = window.__MSFT_SDK[kind].Store.getters.config.initConfig) === null || _b === void 0 ? void 0 : _b.executionContexts) || [],
                    isGPCEnabled: window.__MSFT_SDK[kind].Store.getters.isGPCEnabled &&
                        window.__MSFT_SDK[kind].Store.getters.shouldHonourGPC,
                };
                template =
                    "<script>var msftData = ".concat(JSON.stringify(data), "</script>\n        <script>").concat(window.__MSFT_SDK[kind].Store.getters.proxyJS, "</script>") +
                        replaceDataProps(template);
                window.__MSFT_SDK[kind].Utils.IFrameUtils.createIFrame(template, iframeId, parentElement, styles);
            }
        };
        /**
         * Hide consent notice iframe
         */
        TemplateHandler.hideConsentNotice = function () {
            var consentModel = window.__MSFT_SDK[kind].Store.getters.currentModel;
            if (consentModel === undefined) {
                window.__MSFT_SDK[kind].Logger.warn('Cannot call hideConsentNotice before consent model is selected.');
                return;
            }
            var initComponent = window.__MSFT_SDK[kind].Store.getters.startingLayoutPage;
            initComponent && TemplateHandler.closeIFrame(initComponent);
        };
        /**
         * Set iframe display to none
         * @param  {string} iframeId id of iframe element
         */
        TemplateHandler.closeIFrame = function (iframeId) {
            var _a;
            var iframeElement = document.getElementById(iframeId);
            (_a = iframeElement === null || iframeElement === void 0 ? void 0 : iframeElement.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(iframeElement);
        };
        TemplateHandler.initialized = false;
        return TemplateHandler;
    }());

    window.onmessage = function (e) { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        var _a;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(e.origin === 'null')) return [3 /*break*/, 3];
                    if (window.__MSFT_SDK[kind].Store.getters.isActionDisabled &&
                        e.data.method === 'trigger') {
                        return [2 /*return*/];
                    }
                    response = (_a = window.MSFTPrivacy[kind])[e.data.method].apply(_a, __spreadArray([], __read(e.data.params), false));
                    if (!(response instanceof Promise)) return [3 /*break*/, 2];
                    return [4 /*yield*/, response];
                case 1:
                    response = _c.sent();
                    _c.label = 2;
                case 2:
                    if (e.data.responseId) {
                        (_b = e.source) === null || _b === void 0 ? void 0 : _b.postMessage(__assign(__assign({}, e.data), { response: response }), { targetOrigin: '*' });
                    }
                    _c.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    }); };
    window.__MSFT_SDK[kind].EventBus.on(PublicEvents.AnchorTagClicked, function (_a) {
        var attributes = _a.attributes;
        var aTag = document.createElement('a');
        Object.keys(attributes).forEach(function (attrName) {
            aTag.setAttribute(attrName, attributes[attrName]);
        });
        aTag.click();
    });
    new TemplateHandler();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
