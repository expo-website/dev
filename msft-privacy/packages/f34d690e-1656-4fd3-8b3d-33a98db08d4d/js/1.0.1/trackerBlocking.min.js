(function () {
    'use strict';

    var kind = 'trackerConsent';

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowLayout"] = "ShowLayout";
        PublicEvents["CloseLayout"] = "CloseLayout";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
        PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
        PublicEvents["DataPropsUpdated"] = "DataPropsUpdated";
        PublicEvents["Done"] = "Done";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
        Events["ConsentInvalid"] = "ConsentInvalid";
    })(Events || (Events = {}));
    var Attributes;
    (function (Attributes) {
        // Web consent events
        Attributes["ConsentNotice"] = "msft-consent-notice";
        Attributes["AcceptAll"] = "msft-consent-accept-all";
        Attributes["OpenPreference"] = "msft-consent-open-preferences";
        Attributes["ClosePreference"] = "msft-consent-close-preferences";
        Attributes["DeclineAll"] = "msft-consent-decline-all";
        Attributes["SavePreferences"] = "msft-consent-save-preferences";
        Attributes["Purpose"] = "msft-consent-tracker-category";
        // DSR events
        Attributes["QuestionnaireForm"] = "msft-questionnaire-form";
        Attributes["QuestionnaireFormSubmit"] = "msft-questionnaire-form-submit";
        // Generic events
        Attributes["Redirect"] = "msft-redirect";
        Attributes["OpenPage"] = "msft-open-page";
        Attributes["ClosePage"] = "msft-close-page";
        Attributes["TriggerEvent"] = "msft-trigger";
        Attributes["ToggleId"] = "msft-toggle-id";
        Attributes["ToggleOn"] = "msft-toggle-on";
        Attributes["ToggleOff"] = "msft-toggle-off";
        Attributes["FormPayloadData"] = "msft-payload-data";
        Attributes["FormId"] = "msft-payload-form-id";
        Attributes["FormInputIDs"] = "msft-payload-input-ids";
    })(Attributes || (Attributes = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
        Cookie["ConsentMetadata"] = "msft-consent-metadata";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["Control"] = "Control";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["LayoutError"] = "<b>There is something wrong with layout. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsent"] = "MICROSOFT.WebConsent";
        ModelKind["DSRSubmission"] = "MICROSOFT.DSRSubmission";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = "WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Layout;
    (function (Layout) {
        Layout["Preferences"] = "Preferences";
    })(Layout || (Layout = {}));
    var AppConfigurationType;
    (function (AppConfigurationType) {
        AppConfigurationType["PurposeConfiguration"] = "purposeConfiguration";
    })(AppConfigurationType || (AppConfigurationType = {}));

    var BlockingServiceUtil = /** @class */ (function () {
        function BlockingServiceUtil() {
        }
        BlockingServiceUtil.shouldBlockTrackerSource = function (purposes) {
            // Check for 'isEssential !== true' means if purpose is non-essential or unknown then block it.
            return Boolean(purposes === null || purposes === void 0 ? void 0 : purposes.split(',').some(function (p) {
                var _a, _b, _c, _d;
                var purpose = window.__MSFT_SDK[kind].Store.getters.applicablePurposes.find(function (_a) {
                    var purposeName = _a.name;
                    return purposeName === p;
                });
                // Block any unknown purpose
                return purpose
                    ? ((_a = purpose.properties) === null || _a === void 0 ? void 0 : _a.isEssential) !== true
                    : (_d = (_c = (_b = window.__MSFT_SDK[kind].Store.getters.sdkConfig) === null || _b === void 0 ? void 0 : _b.properties) === null || _c === void 0 ? void 0 : _c.trackerBlocking) === null || _d === void 0 ? void 0 : _d.isUnknownTagBlockingEnabled;
            }));
        };
        BlockingServiceUtil.shouldUnblockTrackerSource = function (purposes) {
            return Boolean(purposes === null || purposes === void 0 ? void 0 : purposes.split(',').every(function (purpose) {
                var _a;
                return ((_a = window.__MSFT_SDK[kind].Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[purpose]) === Preference.ON;
            }));
        };
        BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE = 'text/blocked';
        BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE = 'msft-consent-purposes';
        BlockingServiceUtil.MSFT_TRACKER_EXECUTION_ATTRIBUTE = 'msft-tracker-executed';
        BlockingServiceUtil.SRC_ATTRIBUTE = 'src';
        BlockingServiceUtil.DATASET_SRC_ATTRIBUTE = 'data-src';
        BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE = 'type';
        BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE = 'msft-post-consent-type';
        BlockingServiceUtil.MSFT_CONSENT_IGNORE_ATTRIBUTE = 'msft-ignore-consent';
        return BlockingServiceUtil;
    }());

    var BlockingService = /** @class */ (function () {
        function BlockingService() {
            this.domObserver = null;
        }
        BlockingService.mutationCallback = function (mutationRecords) {
            mutationRecords.forEach(function (mutationRecord) {
                mutationRecord.addedNodes.forEach(function (addedNode) {
                    try {
                        if (addedNode.nodeType === 1 &&
                            addedNode.hasAttribute(BlockingServiceUtil.MSFT_CONSENT_IGNORE_ATTRIBUTE) === false) {
                            if (addedNode.nodeName.toLowerCase() ===
                                window.__MSFT_SDK[kind].enums.RegisteredDivType.Script) {
                                BlockingService.scriptMutationObserver(addedNode);
                            }
                            else if (addedNode.nodeName.toLowerCase() ===
                                window.__MSFT_SDK[kind].enums.RegisteredDivType.IFrame) {
                                BlockingService.iframeMutationObserver(addedNode);
                            }
                        }
                    }
                    catch (error) {
                        console.warn('Failed to block the node ', addedNode.nodeName, 'with error ', error);
                        window.__MSFT_SDK[kind].Logger.warn('Failed to block tag ' + addedNode.nodeName);
                    }
                });
            });
        };
        BlockingService.scriptMutationObserver = function (scriptNode) {
            var type = scriptNode.type;
            var msftConsentPurposes = scriptNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE);
            if (BlockingServiceUtil.shouldBlockTrackerSource(msftConsentPurposes)) {
                window.__MSFT_SDK[kind].Logger.info('Blocking script ' + scriptNode.src);
                if (!scriptNode.hasAttribute(BlockingServiceUtil.MSFT_TRACKER_EXECUTION_ATTRIBUTE)) {
                    scriptNode.setAttribute(BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE, type);
                    scriptNode.setAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE);
                }
            }
            // Firefox has this additional event which prevents scripts from being executed
            var beforeScriptExecuteListener = function (event) {
                // Prevent only marked scripts from executing
                if (scriptNode.getAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE) ===
                    BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE)
                    event.preventDefault();
                scriptNode.removeEventListener('beforescriptexecute', beforeScriptExecuteListener);
            };
            scriptNode.addEventListener('beforescriptexecute', beforeScriptExecuteListener);
        };
        BlockingService.iframeMutationObserver = function (iframeNode) {
            var src = iframeNode.src;
            var msftConsentPurposes = iframeNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE);
            if (BlockingServiceUtil.shouldBlockTrackerSource(msftConsentPurposes)) {
                window.__MSFT_SDK[kind].Logger.info('Blocking iframe ' + iframeNode.src);
                iframeNode.removeAttribute(BlockingServiceUtil.SRC_ATTRIBUTE);
                iframeNode.setAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, src);
            }
        };
        BlockingService.unblock = function () {
            window.__MSFT_SDK[kind].Logger.info('Tracker Blocking unblock is started');
            BlockingService.unblockScripts();
            BlockingService.unblockIFrames();
        };
        BlockingService.unblockScripts = function () {
            document
                .querySelectorAll("script[".concat(BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE, "][").concat(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, "=\"").concat(BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE, "\"]:not([").concat(BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE, "=\"\"])"))
                .forEach(function (blockedNode) {
                var scriptNode = blockedNode;
                try {
                    var consentPurposes = scriptNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE);
                    var shouldUnblockTrackerSource = BlockingServiceUtil.shouldUnblockTrackerSource(consentPurposes);
                    if (shouldUnblockTrackerSource) {
                        window.__MSFT_SDK[kind].Logger.info('Unblocking script ' + scriptNode.src);
                        var typeValue = scriptNode.getAttribute(BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE);
                        typeValue =
                            typeValue != null ? typeValue : 'application/javascript';
                        var parentNode = scriptNode.parentNode;
                        parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(scriptNode);
                        var newNode = document.createElement('script');
                        for (var i = 0; i < scriptNode.attributes.length; i++) {
                            var attribute = scriptNode.attributes[i];
                            if (attribute.name !== 'type') {
                                newNode.setAttribute(attribute.name, scriptNode.attributes[i].value);
                            }
                            else {
                                newNode.setAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, typeValue);
                            }
                        }
                        newNode.setAttribute(BlockingServiceUtil.MSFT_TRACKER_EXECUTION_ATTRIBUTE, 'true');
                        newNode.appendChild(document.createTextNode(scriptNode.innerHTML));
                        parentNode == null
                            ? document.head.appendChild(newNode)
                            : parentNode.appendChild(newNode);
                    }
                    else {
                        window.__MSFT_SDK[kind].Logger.info("Not Unblocking script ".concat(scriptNode.src, " as consent not given"));
                    }
                }
                catch (error) {
                    window.__MSFT_SDK[kind].Logger.info("Failed to unblock script ".concat(scriptNode.src));
                }
            });
        };
        BlockingService.unblockIFrames = function () {
            document
                .querySelectorAll("iframe[".concat(BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE, "][").concat(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, "]:not([").concat(BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE, "=\"\"][").concat(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, "=\"\"])"))
                .forEach(function (blockedNode) {
                var iframeNode = blockedNode;
                try {
                    var consentPurposes = iframeNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_PURPOSES_ATTRIBUTE);
                    var shouldUnblockTrackerSource = BlockingServiceUtil.shouldUnblockTrackerSource(consentPurposes);
                    if (shouldUnblockTrackerSource) {
                        window.__MSFT_SDK[kind].Logger.info('Unblocking iframe ' + iframeNode.src);
                        var parentNode = iframeNode.parentNode;
                        parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(iframeNode);
                        var newNode = iframeNode.cloneNode(true);
                        var datasrc = newNode.getAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE);
                        datasrc = datasrc !== null ? datasrc : '';
                        newNode.setAttribute(BlockingServiceUtil.SRC_ATTRIBUTE, datasrc);
                        newNode.setAttribute(BlockingServiceUtil.MSFT_TRACKER_EXECUTION_ATTRIBUTE, 'true');
                        newNode.removeAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE);
                        parentNode == null
                            ? document.head.appendChild(newNode)
                            : parentNode.appendChild(newNode);
                    }
                    else {
                        window.__MSFT_SDK[kind].Logger.info("Not Unblocking iframe ".concat(iframeNode.src, " as consent not given"));
                    }
                }
                catch (error) {
                    window.__MSFT_SDK[kind].Logger.info("Failed to unblock iframe ".concat(iframeNode.src));
                }
            });
        };
        BlockingService.prototype.start = function (enableMutationObserver) {
            window.__MSFT_SDK[kind].EventBus.on(window.__MSFT_SDK[kind].enums.PublicEvents.ConsentChanged, BlockingService.unblock);
            this.domObserver = null;
            if (enableMutationObserver) {
                this.domObserver = new MutationObserver(function (mutationRecords) {
                    return BlockingService.mutationCallback(mutationRecords);
                });
                this.domObserver.observe(document.documentElement, {
                    childList: true,
                    subtree: true,
                });
                window.__MSFT_SDK[kind].Logger.info('Started tracker blocking service');
            }
        };
        return BlockingService;
    }());
    var BlockingServiceInstance = new BlockingService();

    var PublicAPI = /** @class */ (function () {
        function PublicAPI() {
        }
        PublicAPI.getBlockingService = function () {
            return BlockingServiceInstance;
        };
        return PublicAPI;
    }());

    var _a, _b, _c, _d;
    window.__MSFT_SDK[kind].Helpers.addPublicApis(PublicAPI);
    window.__MSFT_SDK[kind].Helpers.exposeApis();
    if ((_d = (_c = (_b = (_a = window.__MSFT_SDK[kind].Store.getters.sdkConfig) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.trackerBlocking) === null || _c === void 0 ? void 0 : _c.isEnabled) !== null && _d !== void 0 ? _d : true) {
        PublicAPI.getBlockingService().start(true);
    }

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
