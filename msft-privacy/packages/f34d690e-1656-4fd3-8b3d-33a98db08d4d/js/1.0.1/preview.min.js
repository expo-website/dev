(function () {
    'use strict';

    var ListenerEvents;
    (function (ListenerEvents) {
        ListenerEvents["INIT_CONFIG"] = "initConfig";
        ListenerEvents["DISCONNECT"] = "disconnect";
    })(ListenerEvents || (ListenerEvents = {}));
    var DispatcherEvents;
    (function (DispatcherEvents) {
        DispatcherEvents["CONNECTED"] = "connected";
        DispatcherEvents["CLOSED"] = "closed";
    })(DispatcherEvents || (DispatcherEvents = {}));

    var kind = 'trackerConsent';

    var PostMessage = /** @class */ (function () {
        function PostMessage(callback) {
            this.source = null;
            this.origin = '';
            // https://privacy.ci.ext.web.purview.azure-test.com
            // https://privacy.canary.ext.web.purview.azure.com
            // https://privacy.ms.ext.web.purview.azure.com
            this.regExp = new RegExp('^https://privacy.(ci|ms|canary|prod).ext.web.purview.azure(-test){0,1}.com$');
            this.callback = callback;
            this.listen();
        }
        PostMessage.prototype.send = function (details) {
            var _a;
            (_a = this.source) === null || _a === void 0 ? void 0 : _a.postMessage(details, { targetOrigin: this.origin });
        };
        PostMessage.prototype.onMessageReceived = function (event) {
            if (this.regExp.test(event.origin)) {
                this.source = this.source || event.source;
                this.origin = this.origin || event.origin;
                this.callback(event.data);
            }
            else {
                window.__MSFT_SDK[kind].Logger.warn("Received invalid origin '".concat(event.origin, "'. Skipping execution."));
            }
        };
        PostMessage.prototype.listen = function () {
            var _this = this;
            window.addEventListener('message', function (event) {
                _this.onMessageReceived(event);
            });
        };
        return PostMessage;
    }());

    var Messenger = /** @class */ (function () {
        function Messenger() {
        }
        Messenger.send = function (payload) {
            Messenger.messengerPlugin.send(payload);
        };
        Messenger.listen = function (eventName, callback) {
            Messenger.callbacksMap[eventName] = Messenger.callbacksMap[eventName] || [];
            Messenger.callbacksMap[eventName].push(callback);
        };
        Messenger.getMessengerPlugin = function () {
            return Messenger.messengerPlugin;
        };
        Messenger.onMessage = function (_a) {
            var _b;
            var event = _a.event, value = _a.value;
            (_b = Messenger.callbacksMap[event]) === null || _b === void 0 ? void 0 : _b.forEach(function (callback) { return callback(value); });
        };
        Messenger.callbacksMap = {};
        Messenger.messengerPlugin = new PostMessage(Messenger.onMessage);
        return Messenger;
    }());

    var _a$1;
    var dispatcher = (_a$1 = {},
        _a$1[DispatcherEvents.CONNECTED] = function () {
            Messenger.send({
                event: DispatcherEvents.CONNECTED,
            });
        },
        _a$1[DispatcherEvents.CLOSED] = function () {
            Messenger.send({ event: DispatcherEvents.CLOSED });
        },
        _a$1);

    var _a;
    var listeners = (_a = {},
        _a[ListenerEvents.INIT_CONFIG] = function (initConfig) {
            window.__MSFT_SDK[kind].initConsent(initConfig);
            dispatcher.connected();
        },
        _a[ListenerEvents.DISCONNECT] = function () {
            window.close();
        },
        _a);
    Object.keys(listeners).forEach(function (event) {
        Messenger.listen(event, listeners[event]);
    });

    var unload = function () {
        dispatcher.closed();
    };
    window.addEventListener('beforeunload', unload, false);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
