(function () {
    'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
        PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = "WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var FormHandler = /** @class */ (function () {
        function FormHandler() {
            window.__MSFT_SDK.EventBus.on(Events.ConfigReady, FormHandler.init);
            window.__MSFT_SDK.EventBus.on(Events.Init, function () {
                window.__MSFT_SDK.EventBus.trigger(PublicEvents.ShowFirstPage);
            });
            window.__MSFT_SDK.EventBus.on(PublicEvents.QuestionsFormSubmitWithoutMetaData, FormHandler.onQuestionFormSubmit);
        }
        FormHandler.getQuestionTemplate = function (question, validations) {
            var questionStr = "<label class=\"msft-form-question-label\" for=\"".concat(question.name, "\">{{{").concat(question.name, ".question}}} ").concat(validations.includes(QuestionValidation.Required)
                ? '<span class="required-star">*</span>'
                : '', "</label>");
            var answer = "";
            switch (question.type) {
                case QuestionType.Text:
                case QuestionType.Number:
                case QuestionType.Date:
                    answer = "<input id=\"".concat(question.name, "\" name=\"").concat(question.name, "\" ").concat(validations.includes(QuestionValidation.Required) && 'required', "  type=\"").concat(question.type.toLowerCase(), "\" />");
                    break;
                case QuestionType.Email:
                    answer = "<input id=\"".concat(question.name, "\" name=\"").concat(question.name, "\"\n        pattern=\"^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$\"\n        ").concat(validations.includes(QuestionValidation.Required) && 'required', "\n        type=\"text\" title=\"Valid email address\" />");
                    break;
                case QuestionType.MultiLineText:
                    answer = "<textarea name=\"".concat(question.name, "\" ").concat(validations.includes(QuestionValidation.Required) && 'required', " > </textarea>");
                    break;
                case QuestionType.Select:
                    answer = "<select id=\"".concat(question.name, "\" name=\"").concat(question.name, "\" ").concat(validations.includes(QuestionValidation.Required) && 'required', "> \n          {{#each ").concat(question.name, ".options}} <option value={{{value}}}>{{{label}}}</option> {{/each}}\n        </select>");
                    break;
                case QuestionType.MultiSelect:
                    answer = "<select id=\"".concat(question.name, "\" name=\"").concat(question.name, "\" multiple ").concat(validations.includes(QuestionValidation.Required) && 'required', "> \n          {{#each ").concat(question.name, ".options}} <option value={{{value}}}>{{{label}}}</option> {{/each}}\n        </select>");
                    break;
                case QuestionType.Radio:
                    answer = "{{#each ".concat(question.name, ".options}}\n        <div>\n          <input type=\"radio\" id={{{value}}} name=\"").concat(question.name, "\" value={{{value}}}>\n          <label class=\"msft-form-question-label\" for={{{value}}}>{{{label}}}</label>\n        </div>\n        {{/each}}");
                    break;
                case QuestionType.CreditCard:
                    answer = "<input id=\"".concat(question.name, "\" name=\"").concat(question.name, "\" ").concat(validations.includes(QuestionValidation.Required) && 'required', "  type=\"tel\" inputmode=\"numeric\"/>");
                    break;
                case QuestionType.PhoneNumber:
                    answer = "<input id=\"".concat(question.name, "\" name=\"").concat(question.name, "\" ").concat(validations.includes(QuestionValidation.Required) && 'required', "  type=\"text\"/>");
            }
            return "<div class=\"msft-form-question\">".concat(questionStr, " ").concat(answer, "</div>");
        };
        FormHandler.init = function () {
            var selectedModel = window.__MSFT_SDK.Store.getters
                .currentModel;
            if ((selectedModel === null || selectedModel === void 0 ? void 0 : selectedModel.kind) === ModelKind.QuestionModel) {
                var formTemplate = FormHandler.getFormTemplate(window.__MSFT_SDK.Store.getters.questions, selectedModel);
                window.__MSFT_SDK.Logger.info('Setting question form template data');
                window.__MSFT_SDK.Store.reducers.setTemplateData(__assign(__assign({}, window.__MSFT_SDK.Store.getters.templateData), { questions: formTemplate, logoURL: selectedModel.logoURL }));
            }
        };
        FormHandler.getFormTemplate = function (questions, questionModel) {
            var questionMap = {};
            questions.forEach(function (question) {
                questionMap[question.name] = question;
            });
            return ("\n      <style>\n        .msft-question-form {\n          display: inline-block;\n          text-align: left;\n        }\n        .msft-form-question {\n          display:flex;\n          flex-direction:column;\n        }\n        .required-star {\n          color: red;\n        }\n      </style>\n      <form id=\"".concat(FormHandler.formId, "\" class=\"msft-question-form\">") +
                questionModel.questions.reduce(function (templateStr, ques) {
                    return templateStr +
                        FormHandler.getQuestionTemplate(questionMap[ques.questionName], __spreadArray(__spreadArray([], __read((ques.validations || [])), false), __read(questionMap[ques.questionName].validations), false));
                }, '') +
                "</form>\n       <script>\n        const form = document.getElementById('".concat(FormHandler.formId, "');\n        form.addEventListener('submit', msftCallbackFunction);\n       </script>\n      "));
        };
        FormHandler.onQuestionFormSubmit = function (payload) {
            var questions = window.__MSFT_SDK.Store.getters.questions;
            var model = window.__MSFT_SDK.Store.getters
                .currentModel;
            questions.forEach(function (question) {
                var _a, _b, _c;
                question.classification =
                    ((_c = (_b = (_a = model.questions) === null || _a === void 0 ? void 0 : _a.find(function (que) { return que.questionName === question.name; })) === null || _b === void 0 ? void 0 : _b.classifications) === null || _c === void 0 ? void 0 : _c[0]) || question.classification;
            });
            window.__MSFT_SDK.EventBus.trigger(PublicEvents.QuestionsFormSubmit, {
                data: payload.data,
                metadata: {
                    questions: questions,
                    model: model,
                },
            });
        };
        FormHandler.formId = 'msft-question-form';
        return FormHandler;
    }());
    new FormHandler();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
