(function () {
    'use strict';

    var formDataToJsonObject = function (formData) {
        var object = {};
        formData.forEach(function (value, key) {
            if (!Reflect.has(object, key)) {
                object[key] = value;
                return;
            }
            if (!Array.isArray(object[key])) {
                object[key] = [object[key]];
            }
            object[key].push(value);
        });
        return object;
    };
    var getStaticData = function (jsonStr) {
        try {
            return JSON.parse(jsonStr);
        }
        catch (e) {
            return null;
        }
    };
    var getJsonUsingFormId = function (formId) {
        try {
            var form = document.getElementById(formId);
            if (!form) {
                return null;
            }
            var formData = new FormData(form);
            return formDataToJsonObject(formData);
        }
        catch (e) {
            return null;
        }
    };
    var getJsonUsingInputIds = function (inputIds) {
        try {
            var inputIdsArray = inputIds.split(',');
            var object_1 = {};
            inputIdsArray.forEach(function (id) {
                var input = document.getElementById(id);
                if (input) {
                    object_1[id] = input.value;
                }
            });
            return object_1;
        }
        catch (e) {
            return null;
        }
    };
    var msftCallbackFunction = function (event) {
        event.preventDefault();
        var formData = new FormData(event.target);
        var object = formDataToJsonObject(formData);
        window.MSFTConsent.trigger('QuestionsFormSubmitWithoutMetaData', {
            data: object,
        });
    };

    var handlers = [
        {
            //handler for accept all button
            selector: '[msft-consent-accept-all]',
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    window.MSFTConsent.trigger('AcceptAll');
                    window.MSFTConsent.trigger('CloseConsentNotice');
                });
            },
        },
        //handler for open preferences button
        {
            selector: '[msft-consent-open-preferences]',
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    window.MSFTConsent.trigger('ShowTemplate', {
                        templateId: 'Preferences',
                    });
                    window.MSFTConsent.trigger('CloseConsentNotice');
                });
            },
        },
        //handler for decline all button
        {
            selector: '[msft-consent-decline-all]',
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    window.MSFTConsent.trigger('RejectAll');
                    window.MSFTConsent.trigger('CloseConsentNotice');
                });
            },
        },
        //handler for save preferences button
        {
            selector: '[msft-consent-save-preferences]',
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    var trackerCategoriesSelectors = document.querySelectorAll('[msft-consent-tracker-category]');
                    var currentPreferences = { preferences: {} };
                    trackerCategoriesSelectors.forEach(function (category) {
                        currentPreferences.preferences[category.getElementsByTagName('input')[0].id] = category.getElementsByTagName('input')[0].checked ? '1' : '0';
                    });
                    window.MSFTConsent.trigger('UpdateConsent', {
                        consent: currentPreferences,
                    });
                    window.MSFTConsent.trigger('CloseTemplate', {
                        templateId: 'Preferences',
                    });
                    window.MSFTConsent.trigger('CloseConsentNotice');
                });
            },
        },
        //handler for close preferences button
        {
            selector: '[msft-consent-close-preferences]',
            handler: function (elm) {
                elm.addEventListener('click', function () {
                    window.MSFTConsent.trigger('CloseTemplate', {
                        templateId: 'Preferences',
                    });
                    window.MSFTConsent.trigger('ShowConsentNotice');
                });
            },
        },
        //handler for form submit
        {
            selector: '[msft-questionnaire-form]',
            handler: function (elm) {
                elm.addEventListener('submit', msftCallbackFunction);
            },
        },
        //handler for open page
        {
            selector: '[msft-consent-open-page]',
            handler: function (elm) {
                var templateId = elm.getAttribute('msft-consent-open-page');
                if (templateId === null)
                    return;
                elm.addEventListener('click', function () {
                    window.MSFTConsent.trigger('ShowTemplate', {
                        templateId: templateId,
                    });
                });
            },
        },
        //handler for close page
        {
            selector: '[msft-consent-close-page]',
            handler: function (elm) {
                var templateId = elm.getAttribute('msft-consent-close-page');
                if (templateId === null)
                    return;
                elm.addEventListener('click', function () {
                    window.MSFTConsent.trigger('CloseTemplate', {
                        templateId: templateId,
                    });
                });
            },
        },
        //handler for trigger event
        {
            selector: '[msft-consent-trigger-event]',
            handler: function (elm) {
                var eventName = elm.getAttribute('msft-consent-trigger-event');
                if (eventName === null)
                    return;
                var staticData = elm.getAttribute('msft-payload-data');
                var formId = elm.getAttribute('msft-payload-form-id');
                var inputIds = elm.getAttribute('msft-payload-input-ids');
                var payload = null;
                if (staticData !== null) {
                    payload = getStaticData(staticData);
                }
                else if (formId !== null) {
                    payload = getJsonUsingFormId(formId);
                }
                else if (inputIds !== null) {
                    payload = getJsonUsingInputIds(inputIds);
                }
                elm.addEventListener('click', function () {
                    window.MSFTConsent.trigger(eventName, payload);
                });
            },
        },
    ];
    window['disableQuestionFormSubmit'] = function () {
        document.querySelectorAll('[msft-questionnaire-form-submit]').forEach(function (elm) {
            elm.setAttribute('disabled', '');
        });
    };
    window['enableQuestionFormSubmit'] = function () {
        document.querySelectorAll('[msft-questionnaire-form-submit]').forEach(function (elm) {
            elm.removeAttribute('disabled');
        });
    };
    var registerHandlers = function () {
        var _a, _b;
        var executionContexts = ((_b = (_a = window.msftData) === null || _a === void 0 ? void 0 : _a.executionContexts) === null || _b === void 0 ? void 0 : _b.length)
            ? window.msftData.executionContexts
            : [];
        // register all handlers
        handlers.forEach(function (_a) {
            var selector = _a.selector, handler = _a.handler;
            document.querySelectorAll(selector).forEach(function (elm) {
                if (executionContexts.length > 0) {
                    var attributes_1 = elm.getAttributeNames();
                    if (executionContexts.some(function (ctx) { return attributes_1.includes("".concat(ctx, "-disabled")); })) {
                        return;
                    }
                }
                handler(elm);
            });
        });
        //remove all hidden elements
        executionContexts.forEach(function (ctx) {
            document.querySelectorAll("[".concat(ctx, "-hidden]")).forEach(function (elm) {
                elm.remove();
            });
        });
    };
    if (document.readyState !== 'loading') {
        registerHandlers();
    }
    else {
        document.addEventListener('DOMContentLoaded', function () {
            registerHandlers();
        });
    }

    var _a;
    var addProxyMethods = function () {
        Promise.resolve().then(function () { return anchorClickHandler; });
        Promise.resolve().then(function () { return proxy; }).then(function (_a) {
            var callMethod = _a.callMethod, sendMessage = _a.sendMessage;
            window.MSFTConsent = {};
            var methodsWithReturnType = ['getConsent', 'getTrackerCategories'];
            var methodsWithoutReturnType = ['trigger', 'showChangeSettingsModal'];
            methodsWithoutReturnType.forEach(function (methodName) {
                window.MSFTConsent[methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    sendMessage(methodName, args);
                };
            });
            methodsWithReturnType.forEach(function (methodName) {
                window.MSFTConsent[methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return callMethod(methodName, args);
                };
            });
        });
    };
    if (!((_a = window.msftData) === null || _a === void 0 ? void 0 : _a.renderTemplateWithoutIframe)) {
        addProxyMethods();
    }

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
        PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = "WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var onclickHandler = function (e) {
        if (e.target &&
            e.target.nodeName.toLowerCase() === 'a') {
            var attributes = {};
            var attributeNames = e.target.getAttributeNames();
            e.preventDefault();
            e.stopPropagation();
            for (var i = 0; i < attributeNames.length; i++) {
                var attrName = attributeNames[i];
                attributes[attrName] =
                    e.target.getAttribute(attrName) || '';
            }
            window.MSFTConsent.trigger(PublicEvents.AnchorTagClicked, { attributes: attributes });
        }
    };
    // Options for the observer (which mutations to observe)
    var config = { childList: true, subtree: true };
    // Callback function to execute when mutations are observed
    var callback = function (mutationList) {
        mutationList.forEach(function (mutationRecord) {
            mutationRecord.addedNodes.forEach(function (addedNode) {
                if (addedNode.nodeName.toLowerCase() === 'a') {
                    addedNode.addEventListener('click', { handleEvent: onclickHandler });
                }
            });
        });
    };
    // Create an observer instance linked to the callback function
    var observer = new MutationObserver(callback);
    // Start observing the target node for configured mutations
    observer.observe(document.documentElement, config);

    var anchorClickHandler = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    var AsyncUtils = /** @class */ (function () {
        function AsyncUtils() {
        }
        AsyncUtils.deferred = function () {
            var defer = {};
            defer.promise = new Promise(function (res, rej) {
                defer.resolve = res;
                defer.reject = rej;
            });
            return defer;
        };
        return AsyncUtils;
    }());
    var AsyncUtils$1 = AsyncUtils;

    var promiseMap = {};
    var sendMessage = function (method, args, responseId) {
        if (parent) {
            parent.postMessage({ method: method, params: Object.values(args), responseId: responseId }, msftData.origin);
        }
    };
    var callMethod = function (method, args) {
        var responseId = "".concat(method, "-").concat(new Date().getTime());
        var deferred = AsyncUtils$1.deferred();
        promiseMap[responseId] = deferred;
        sendMessage(method, args, responseId);
        return deferred.promise;
    };
    window.onmessage = function (e) {
        var _a;
        if (e.origin === msftData.origin && ((_a = e === null || e === void 0 ? void 0 : e.data) === null || _a === void 0 ? void 0 : _a.responseId)) {
            e.data.error
                ? promiseMap[e.data.responseId].reject(e.data.error)
                : promiseMap[e.data.responseId].resolve(e.data.response);
        }
    };

    var proxy = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sendMessage: sendMessage,
        callMethod: callMethod
    });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
