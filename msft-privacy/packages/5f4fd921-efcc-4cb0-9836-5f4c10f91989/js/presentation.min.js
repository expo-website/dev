(function () {
    'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
        PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = "WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var registerHeplers = function () {
        if (window.Handlebars) {
            window.Handlebars.registerHelper('toLowerCase', function (type) {
                return type.toLowerCase();
            });
            window.Handlebars.registerHelper('equals', function (param1, param2) {
                return param1.toLowerCase() === param2.toLowerCase();
            });
        }
    };

    var TemplateHandler = /** @class */ (function () {
        function TemplateHandler() {
            TemplateHandler.registerShowTemplateHandlers();
        }
        /**
         * Register event handlers to open/close different templates
         */
        TemplateHandler.registerShowTemplateHandlers = function () {
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ShowConsentNotice, TemplateHandler.showFirstPage);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.CloseConsentNotice, TemplateHandler.hideConsentNotice);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.Events.Init, TemplateHandler.saveStylesOnInit);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ShowTemplate, TemplateHandler.showTemplate);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.CloseTemplate, TemplateHandler.closeTemplate);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.Events.ConfigReady, TemplateHandler.init);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ShowPreferences, TemplateHandler.showPreferences);
        };
        TemplateHandler.showPreferences = function () {
            try {
                TemplateHandler.showTemplate({ templateId: Template.Preferences });
            }
            catch (e) {
                TemplateHandler.showFirstPage();
            }
        };
        /**
         * Show template
         *
         * @param  {import("core/types/interfaces").IGenericObject} payload payload data
         */
        TemplateHandler.showTemplate = function (_a) {
            var templateId = _a.templateId;
            if (window.__MSFT_SDK.Store.getters.components &&
                window.__MSFT_SDK.Store.getters.components[templateId]) {
                var consentModel = window.__MSFT_SDK.Store.getters.currentModel;
                TemplateHandler.showTemplateInIFrame(window.__MSFT_SDK.Store.getters.components[templateId], templateId, [
                    {
                        type: StyleType.Text,
                        value: (consentModel === null || consentModel === void 0 ? void 0 : consentModel.layout.ui.css) || '',
                    },
                ], TemplateHandler.getParentElement(templateId));
            }
            else {
                throw new Error("Template : ".concat(templateId, " not found."));
            }
        };
        /**
         * Hide template
         *
         * @param  {import("core/types/interfaces").IGenericObject} payload payload data
         */
        TemplateHandler.closeTemplate = function (_a) {
            var templateId = _a.templateId;
            TemplateHandler.closeIFrame(templateId);
        };
        /**
         * Save styles passed by user in window.__MSFT_SDK.Store
         *
         * @param  {import("core/types/interfaces").IInitConfig} config init config
         */
        TemplateHandler.saveStylesOnInit = function (config) {
            if (config.styles) {
                window.__MSFT_SDK.Logger.info('user provided styles persisted to window.__MSFT_SDK.Store.');
                window.__MSFT_SDK.Store.reducers.setStyles(config.styles);
            }
        };
        TemplateHandler.validationArrayToObject = function (validations) {
            return validations.reduce(function (previous, current) {
                var _a;
                return __assign(__assign({}, previous), (_a = {}, _a[current] = true, _a));
            }, {});
        };
        TemplateHandler.getTemplateData = function (consentModel) {
            return __awaiter(this, void 0, void 0, function () {
                var groupedTranslations, questions, data, questionWithOptions, preferences, trackerCategoriesMap, questionsMap, addedQuestions, addedTrackerCategories;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            groupedTranslations = window.__MSFT_SDK.Store.getters.translations;
                            questions = window.__MSFT_SDK.Store.getters.questions;
                            data = {};
                            questionWithOptions = {};
                            data[NoticeType.TrackerCategory] = [];
                            data[NoticeType.Questions] = [];
                            return [4 /*yield*/, window.MSFTConsent.getConsent()];
                        case 1:
                            preferences = (_a.sent()).preferences;
                            trackerCategoriesMap = new Map();
                            questionsMap = new Map();
                            addedQuestions = new Set();
                            addedTrackerCategories = new Set();
                            if (consentModel.kind === ModelKind.WebConsentModel) {
                                window.__MSFT_SDK.Store.getters.bannerTrackerCategories.forEach(function (category) {
                                    trackerCategoriesMap.set(category.id, category);
                                });
                            }
                            else if (consentModel.kind === ModelKind.QuestionModel) {
                                questions.forEach(function (question) {
                                    questionsMap.set(question.name, question);
                                });
                                data.captcha = consentModel.captcha;
                            }
                            groupedTranslations.forEach(function (groupedTranslation) {
                                return Object.keys(groupedTranslation).forEach(function (namespace) {
                                    var _a;
                                    var _b, _c, _d, _e, _f;
                                    if (namespace === 'model') {
                                        data = __assign(__assign({}, data), groupedTranslation[namespace]);
                                    }
                                    else if (questionsMap.has(namespace) &&
                                        !addedQuestions.has(namespace)) {
                                        questionWithOptions = __assign(__assign(__assign({}, groupedTranslation[namespace]), questionsMap.get(namespace)), { validations: _this.validationArrayToObject(((_b = questionsMap.get(namespace)) === null || _b === void 0 ? void 0 : _b.validations) || []) });
                                        questionWithOptions.validations = __assign(__assign({}, questionWithOptions.validations), _this.validationArrayToObject(((_c = consentModel.questions.find(function (question) { return question.questionName == namespace; })) === null || _c === void 0 ? void 0 : _c.validations) || []));
                                        data[NoticeType.Questions].push(questionWithOptions);
                                        addedQuestions.add(namespace);
                                    }
                                    else if (consentModel.kind === ModelKind.QuestionModel) {
                                        data = __assign(__assign({}, data), (_a = {}, _a[namespace] = groupedTranslation[namespace], _a));
                                    }
                                    else if (trackerCategoriesMap.has(namespace) &&
                                        !addedTrackerCategories.has(namespace)) {
                                        var categoryTranslation = __assign(__assign({}, groupedTranslation[namespace]), { name: (_d = trackerCategoriesMap.get(namespace)) === null || _d === void 0 ? void 0 : _d.categoryName, isEssential: (_e = trackerCategoriesMap.get(namespace)) === null || _e === void 0 ? void 0 : _e.isEssential, isOn: preferences[((_f = trackerCategoriesMap.get(namespace)) === null || _f === void 0 ? void 0 : _f.categoryName) || ''] === '1' });
                                        data[NoticeType.TrackerCategory].push(categoryTranslation);
                                        addedTrackerCategories.add(namespace);
                                    }
                                });
                            });
                            data[NoticeType.TrackerCategory] = __spreadArray(__spreadArray([], __read(data[NoticeType.TrackerCategory].filter(function (category) { return category.isEssential; })), false), __read(data[NoticeType.TrackerCategory].filter(function (category) { return !category.isEssential; })), false);
                            data['msft-script-open'] = '<script>';
                            data['msft-script-close'] = '</script>';
                            window.__MSFT_SDK.Logger.info('getTemplate data invoked', {
                                consentModel: consentModel,
                                data: data,
                            });
                            return [2 /*return*/, __assign(__assign(__assign({}, data), window.__MSFT_SDK.Store.getters.templateData), { consentModel: consentModel })];
                    }
                });
            });
        };
        /**
         * Perform all necessary steps like replacing placeholders in
         * templates during init.
         */
        TemplateHandler.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consentModel, template, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            registerHeplers();
                            if (window.__MSFT_SDK.Store.getters.currentModel === undefined ||
                                window.__MSFT_SDK.Store.getters.template === undefined) {
                                window.__MSFT_SDK.Logger.warn('Cannot call init before config is ready.');
                                return [2 /*return*/];
                            }
                            consentModel = window.__MSFT_SDK.Store.getters.currentModel;
                            template = window.__MSFT_SDK.Store.getters.template;
                            return [4 /*yield*/, TemplateHandler.getTemplateData(consentModel)];
                        case 1:
                            data = _a.sent();
                            template.pages.forEach(function (page) {
                                var _a;
                                var templateString;
                                try {
                                    var template_1 = window.Handlebars.compile(page.css + page.content);
                                    templateString = template_1(data);
                                }
                                catch (e) {
                                    window.__MSFT_SDK.Logger.error(e.message, e);
                                    templateString = ErrorStrings.TemplateError;
                                }
                                window.__MSFT_SDK.Store.reducers.setComponents(__assign(__assign({}, window.__MSFT_SDK.Store.getters.components), (_a = {}, _a[page.name] = templateString, _a)));
                            });
                            window.__MSFT_SDK.Logger.info('Components updated');
                            TemplateHandler.initialized = true;
                            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ShowFirstPage, TemplateHandler.showFirstPage);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Show Consent notice template
         */
        TemplateHandler.showFirstPage = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consentModel, initComponent, template;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!TemplateHandler.initialized) return [3 /*break*/, 2];
                            return [4 /*yield*/, TemplateHandler.init()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            consentModel = window.__MSFT_SDK.Store.getters.currentModel;
                            if (consentModel === undefined) {
                                window.__MSFT_SDK.Logger.warn('Cannot call init before consent model is selected.');
                                return [2 /*return*/];
                            }
                            initComponent = window.__MSFT_SDK.Store.getters.startingLayoutPage;
                            if (window.__MSFT_SDK.Store.getters.components === undefined ||
                                initComponent === undefined ||
                                window.__MSFT_SDK.Store.getters.components[initComponent] === undefined) {
                                window.__MSFT_SDK.Logger.error('Notice template not found.');
                                return [2 /*return*/];
                            }
                            template = window.__MSFT_SDK.Store.getters.components[initComponent];
                            TemplateHandler.showTemplateInIFrame(template, initComponent, [
                                {
                                    type: StyleType.Text,
                                    value: consentModel.layout.ui.css || '',
                                },
                            ], TemplateHandler.getParentElement(initComponent));
                            return [2 /*return*/];
                    }
                });
            });
        };
        TemplateHandler.getParentElement = function (templateId) {
            var _a;
            var parentElementId = (((_a = window.__MSFT_SDK.Store.getters.config.initConfig) === null || _a === void 0 ? void 0 : _a.componentParentMap) ||
                window.__MSFT_SDK.Store.getters.templateParentMap)[templateId];
            if (parentElementId) {
                return document.getElementById(parentElementId);
            }
            return null;
        };
        /**
         * Adds template to iframe and append it to dom
         *
         * @param  {string} template template to add
         * @param  {string} iframeId iframe id
         * @param  {window.__MSFT_SDK.interfaces.IStyle[]} styles user provided styles
         * @param  {HTMLElement|null} parentElement if iframe should be added to a specific element instead of body
         */
        TemplateHandler.showTemplateInIFrame = function (template, iframeId, styles, parentElement) {
            var _a, _b;
            if (styles === void 0) { styles = []; }
            var iframeElement = document.getElementById(iframeId);
            if (iframeElement) {
                window.__MSFT_SDK.Logger.info("Template: ".concat(iframeId, " is already open."));
            }
            else {
                if (template === ErrorStrings.TemplateError &&
                    (!window.__MSFT_SDK.Store.getters.isLivePreviewMode ||
                        !window.__MSFT_SDK.Store.getters.isPreviewMode)) {
                    return;
                }
                var data = {
                    origin: window.origin,
                    renderTemplateWithoutIframe: (_a = window.__MSFT_SDK.Store.getters.config.initConfig) === null || _a === void 0 ? void 0 : _a.renderTemplateWithoutIframe,
                    executionContexts: ((_b = window.__MSFT_SDK.Store.getters.config.initConfig) === null || _b === void 0 ? void 0 : _b.executionContexts) || [],
                };
                template =
                    "<script>var msftData = ".concat(JSON.stringify(data), "</script> \n        <script>").concat(window.__MSFT_SDK.Store.getters.proxyJS, "</script>") + template;
                window.__MSFT_SDK.Utils.IFrameUtils.createIFrame(template, iframeId, parentElement, styles);
            }
        };
        /**
         * Hide consent notice iframe
         */
        TemplateHandler.hideConsentNotice = function () {
            var consentModel = window.__MSFT_SDK.Store.getters.currentModel;
            if (consentModel === undefined) {
                window.__MSFT_SDK.Logger.warn('Cannot call hideConsentNotice before consent model is selected.');
                return;
            }
            var initComponent = window.__MSFT_SDK.Store.getters.startingLayoutPage;
            initComponent && TemplateHandler.closeIFrame(initComponent);
        };
        /**
         * Set iframe display to none
         *
         * @param  {string} iframeId id of iframe element
         */
        TemplateHandler.closeIFrame = function (iframeId) {
            var _a;
            var iframeElement = document.getElementById(iframeId);
            (_a = iframeElement === null || iframeElement === void 0 ? void 0 : iframeElement.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(iframeElement);
        };
        TemplateHandler.initialized = false;
        return TemplateHandler;
    }());

    window.onmessage = function (e) { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        var _a;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(e.origin === 'null')) return [3 /*break*/, 3];
                    if (window.__MSFT_SDK.Store.getters.isActionDisabled &&
                        e.data.method === 'trigger') {
                        return [2 /*return*/];
                    }
                    response = (_a = window.MSFTConsent)[e.data.method].apply(_a, __spreadArray([], __read(e.data.params), false));
                    if (!(response instanceof Promise)) return [3 /*break*/, 2];
                    return [4 /*yield*/, response];
                case 1:
                    response = _c.sent();
                    _c.label = 2;
                case 2:
                    if (e.data.responseId) {
                        (_b = e.source) === null || _b === void 0 ? void 0 : _b.postMessage(__assign(__assign({}, e.data), { response: response }), { targetOrigin: '*' });
                    }
                    _c.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    }); };
    window.__MSFT_SDK.EventBus.on(PublicEvents.AnchorTagClicked, function (_a) {
        var attributes = _a.attributes;
        var aTag = document.createElement('a');
        Object.keys(attributes).forEach(function (attrName) {
            aTag.setAttribute(attrName, attributes[attrName]);
        });
        aTag.click();
    });
    new TemplateHandler();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
